// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/star-table/startable-server/common/core/types"
	"github.com/star-table/startable-server/common/model/vo"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActualListItem struct {
		ActualWorkHourDateList func(childComplexity int) int
		Name                   func(childComplexity int) int
	}

	ActualWorkHourDateItem struct {
		Date     func(childComplexity int) int
		WorkHour func(childComplexity int) int
	}

	AddIssueAttachmentFsResp struct {
		Resources func(childComplexity int) int
	}

	AppInfo struct {
		CheckStatus func(childComplexity int) int
		Code        func(childComplexity int) int
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		Name        func(childComplexity int) int
		Owner       func(childComplexity int) int
		Secret1     func(childComplexity int) int
		Secret2     func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdateTime  func(childComplexity int) int
		Updator     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	AppInfoList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ApplyScopesResp struct {
		ThirdCode func(childComplexity int) int
		ThirdMsg  func(childComplexity int) int
	}

	ArchiveIssueBatchResp struct {
		NoAuthIssues  func(childComplexity int) int
		SuccessIssues func(childComplexity int) int
	}

	AreaLinkageListResp struct {
		List func(childComplexity int) int
	}

	AreaLinkageResp struct {
		Cname     func(childComplexity int) int
		Code      func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDefault func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Attachment struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		CreatorName    func(childComplexity int) int
		FileType       func(childComplexity int) int
		Host           func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		IssueList      func(childComplexity int) int
		Md5            func(childComplexity int) int
		Name           func(childComplexity int) int
		OfficeURL      func(childComplexity int) int
		OrgID          func(childComplexity int) int
		Path           func(childComplexity int) int
		PathCompressed func(childComplexity int) int
		Size           func(childComplexity int) int
		Suffix         func(childComplexity int) int
		Type           func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		Updator        func(childComplexity int) int
		Version        func(childComplexity int) int
	}

	AttachmentList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	BasicShowSetting struct {
		MirrorStat    func(childComplexity int) int
		SideBarShow   func(childComplexity int) int
		WorkBenchShow func(childComplexity int) int
	}

	BoolResp struct {
		IsTrue func(childComplexity int) int
	}

	BuildInfoDefine struct {
		BuildGoVersion func(childComplexity int) int
		BuildTime      func(childComplexity int) int
		GitCommitLog   func(childComplexity int) int
		GitStatus      func(childComplexity int) int
	}

	ChangeList struct {
		Field     func(childComplexity int) int
		FieldName func(childComplexity int) int
		NewValue  func(childComplexity int) int
		OldValue  func(childComplexity int) int
	}

	ChatData struct {
		Avatar      func(childComplexity int) int
		Description func(childComplexity int) int
		IsMain      func(childComplexity int) int
		Name        func(childComplexity int) int
		OutChatID   func(childComplexity int) int
		RelationID  func(childComplexity int) int
	}

	CheckIsEnableWorkHourResp struct {
		IsEnable func(childComplexity int) int
	}

	CheckSpecificScopeResp struct {
		HasPower func(childComplexity int) int
	}

	CheckTokenValidityResp struct {
		ID    func(childComplexity int) int
		OrgID func(childComplexity int) int
	}

	CustomValue struct {
		FieldType  func(childComplexity int) int
		FieldValue func(childComplexity int) int
		ID         func(childComplexity int) int
		IsOrgField func(childComplexity int) int
		Name       func(childComplexity int) int
		Remark     func(childComplexity int) int
		Status     func(childComplexity int) int
		Title      func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	DeleteIssueBatchResp struct {
		NoAuthIssues         func(childComplexity int) int
		RemainChildrenIssues func(childComplexity int) int
		SuccessIssues        func(childComplexity int) int
	}

	DeleteProjectAttachmentResp struct {
		ResourceIds func(childComplexity int) int
	}

	DeleteProjectFolderResp struct {
		FolderIds func(childComplexity int) int
	}

	DeleteProjectResourceResp struct {
		ResourceIds func(childComplexity int) int
	}

	Department struct {
		Code          func(childComplexity int) int
		CreateTime    func(childComplexity int) int
		Creator       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsHide        func(childComplexity int) int
		Name          func(childComplexity int) int
		OrgID         func(childComplexity int) int
		ParentID      func(childComplexity int) int
		Sort          func(childComplexity int) int
		SourceChannel func(childComplexity int) int
		Status        func(childComplexity int) int
	}

	DepartmentList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	DepartmentMemberInfo struct {
		Avatar        func(childComplexity int) int
		DepartmentID  func(childComplexity int) int
		EmplID        func(childComplexity int) int
		Name          func(childComplexity int) int
		NamePy        func(childComplexity int) int
		OrgUserStatus func(childComplexity int) int
		UnionID       func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	DepartmentMembersListResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	DepartmentSimpleInfo struct {
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UserCount func(childComplexity int) int
	}

	ExportIssueTemplateResp struct {
		URL func(childComplexity int) int
	}

	ExportWorkHourStatisticResp struct {
		URL func(childComplexity int) int
	}

	FeiShuAuthCodeResp struct {
		AccessToken  func(childComplexity int) int
		Binding      func(childComplexity int) int
		CodeToken    func(childComplexity int) int
		IsAdmin      func(childComplexity int) int
		Name         func(childComplexity int) int
		OpenID       func(childComplexity int) int
		OrgCode      func(childComplexity int) int
		OrgID        func(childComplexity int) int
		OrgName      func(childComplexity int) int
		OutOrgName   func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		TenantKey    func(childComplexity int) int
		Token        func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	FeiShuAuthResp struct {
		IsAdmin   func(childComplexity int) int
		Name      func(childComplexity int) int
		OpenID    func(childComplexity int) int
		OrgCode   func(childComplexity int) int
		OrgID     func(childComplexity int) int
		OrgName   func(childComplexity int) int
		TenantKey func(childComplexity int) int
		Token     func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	Folder struct {
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		CreatorName func(childComplexity int) int
		FileType    func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		Name        func(childComplexity int) int
		OrgID       func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Path        func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		UpdateTime  func(childComplexity int) int
		Updator     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	FolderList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetAppTicketResp struct {
		AppID     func(childComplexity int) int
		AppSecret func(childComplexity int) int
	}

	GetExportFieldsResp struct {
		Fields func(childComplexity int) int
	}

	GetExportFieldsRespFieldsItem struct {
		DefineType func(childComplexity int) int
		FieldID    func(childComplexity int) int
		IsMust     func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	GetFsProjectChatPushSettingsOneChat struct {
		CreateIssue         func(childComplexity int) int
		CreateIssueComment  func(childComplexity int) int
		ModifyColumnsOfSend func(childComplexity int) int
		Tables              func(childComplexity int) int
		UpdateIssueCase     func(childComplexity int) int
	}

	GetFsProjectChatPushSettingsOneChatTables struct {
		ProjectID func(childComplexity int) int
		TableID   func(childComplexity int) int
	}

	GetFsProjectChatPushSettingsOneProOneTable struct {
		CreateIssue         func(childComplexity int) int
		CreateIssueComment  func(childComplexity int) int
		ModifyColumnsOfSend func(childComplexity int) int
		TableIDStr          func(childComplexity int) int
		UpdateIssueCase     func(childComplexity int) int
	}

	GetFsProjectChatPushSettingsResp struct {
		OutChatSettings func(childComplexity int) int
	}

	GetInviteCodeResp struct {
		Expire     func(childComplexity int) int
		InviteCode func(childComplexity int) int
	}

	GetInviteInfoResp struct {
		InviterID   func(childComplexity int) int
		InviterName func(childComplexity int) int
		OrgID       func(childComplexity int) int
		OrgName     func(childComplexity int) int
	}

	GetIssueViewListItem struct {
		Config              func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsPrivate           func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		Remark              func(childComplexity int) int
		Sort                func(childComplexity int) int
		Type                func(childComplexity int) int
		ViewName            func(childComplexity int) int
	}

	GetIssueWorkHoursInfoResp struct {
		ActualNeedTimeTotal   func(childComplexity int) int
		ActualWorkHourList    func(childComplexity int) int
		PredictWorkHourList   func(childComplexity int) int
		SimplePredictWorkHour func(childComplexity int) int
	}

	GetJsAPITicketResp struct {
		Ticket func(childComplexity int) int
	}

	GetMQTTChannelKeyResp struct {
		Address func(childComplexity int) int
		Channel func(childComplexity int) int
		Host    func(childComplexity int) int
		Key     func(childComplexity int) int
		Port    func(childComplexity int) int
	}

	GetPayRemindResp struct {
		RemindPayExpireMsg func(childComplexity int) int
	}

	GetPersonalPermissionInfoResp struct {
		Data func(childComplexity int) int
	}

	GetProjectMainChatIDResp struct {
		ChatID func(childComplexity int) int
	}

	GetWorkHourStatisticResp struct {
		GroupStatisticList func(childComplexity int) int
		Summary            func(childComplexity int) int
		Total              func(childComplexity int) int
	}

	GetWorkHourStatisticSummary struct {
		ActualTotal  func(childComplexity int) int
		PredictTotal func(childComplexity int) int
	}

	HomeIssueGroup struct {
		Avatar    func(childComplexity int) int
		BgStyle   func(childComplexity int) int
		FitTotal  func(childComplexity int) int
		FontStyle func(childComplexity int) int
		ID        func(childComplexity int) int
		List      func(childComplexity int) int
		Name      func(childComplexity int) int
		TimeSpan  func(childComplexity int) int
	}

	HomeIssueInfo struct {
		AfterIssueIds         func(childComplexity int) int
		AllStatus             func(childComplexity int) int
		AuditorsInfo          func(childComplexity int) int
		ChildsFinishedNum     func(childComplexity int) int
		ChildsNum             func(childComplexity int) int
		CustomField           func(childComplexity int) int
		FollowerInfos         func(childComplexity int) int
		IsAttach              func(childComplexity int) int
		Issue                 func(childComplexity int) int
		IssueID               func(childComplexity int) int
		IterationName         func(childComplexity int) int
		LessData              func(childComplexity int) int
		Owner                 func(childComplexity int) int
		ParentID              func(childComplexity int) int
		ParentInfo            func(childComplexity int) int
		ParentIsMeetCondition func(childComplexity int) int
		Priority              func(childComplexity int) int
		Project               func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		PropertyInfo          func(childComplexity int) int
		RelateCommentCount    func(childComplexity int) int
		RelateIssueCount      func(childComplexity int) int
		RelateResourceCount   func(childComplexity int) int
		SourceInfo            func(childComplexity int) int
		Status                func(childComplexity int) int
		Tags                  func(childComplexity int) int
		Title                 func(childComplexity int) int
		TypeInfo              func(childComplexity int) int
		WorkHourInfo          func(childComplexity int) int
	}

	HomeIssueInfoGroupResp struct {
		ActualTotal func(childComplexity int) int
		Group       func(childComplexity int) int
		TimeSpan    func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	HomeIssueInfoResp struct {
		ActualTotal func(childComplexity int) int
		List        func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	HomeIssueOwnerInfo struct {
		Avatar     func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeleted  func(childComplexity int) int
		IsDisabled func(childComplexity int) int
		Name       func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	HomeIssuePriorityInfo struct {
		BgStyle   func(childComplexity int) int
		FontStyle func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	HomeIssueProjectInfo struct {
		AppID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsFilling     func(childComplexity int) int
		Name          func(childComplexity int) int
		PrivacyStatus func(childComplexity int) int
		ProjectTypeID func(childComplexity int) int
	}

	HomeIssueStatusInfo struct {
		BgStyle     func(childComplexity int) int
		DisplayName func(childComplexity int) int
		FontStyle   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Sort        func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	HomeIssueTagInfo struct {
		BgStyle   func(childComplexity int) int
		FontStyle func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	HomeIssueWorkHourInfo struct {
		ActualList      func(childComplexity int) int
		ActualWorkHour  func(childComplexity int) int
		PredictList     func(childComplexity int) int
		PredictWorkHour func(childComplexity int) int
	}

	IndustryListResp struct {
		List func(childComplexity int) int
	}

	IndustryResp struct {
		Cname func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	InternalAuthResp struct {
		HasPermission func(childComplexity int) int
	}

	InviteUserInfo struct {
		Email           func(childComplexity int) int
		ID              func(childComplexity int) int
		InviteTime      func(childComplexity int) int
		IsInvitedRecent func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	InviteUserResp struct {
		InvalidEmail func(childComplexity int) int
		InvitedEmail func(childComplexity int) int
		IsUserEmail  func(childComplexity int) int
		SuccessEmail func(childComplexity int) int
	}

	Issue struct {
		AuditStatus         func(childComplexity int) int
		Code                func(childComplexity int) int
		CreateTime          func(childComplexity int) int
		Creator             func(childComplexity int) int
		DataID              func(childComplexity int) int
		EndTime             func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsDelete            func(childComplexity int) int
		IsFiling            func(childComplexity int) int
		IssueIds            func(childComplexity int) int
		IssueObjectTypeID   func(childComplexity int) int
		IterationID         func(childComplexity int) int
		ModuleID            func(childComplexity int) int
		OrgID               func(childComplexity int) int
		Owner               func(childComplexity int) int
		Owners              func(childComplexity int) int
		ParentID            func(childComplexity int) int
		ParentInfo          func(childComplexity int) int
		ParentTitle         func(childComplexity int) int
		PlanEndTime         func(childComplexity int) int
		PlanStartTime       func(childComplexity int) int
		PlanWorkHour        func(childComplexity int) int
		PriorityID          func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		PropertyID          func(childComplexity int) int
		Remark              func(childComplexity int) int
		RemarkDetail        func(childComplexity int) int
		Sort                func(childComplexity int) int
		SourceID            func(childComplexity int) int
		StartTime           func(childComplexity int) int
		Status              func(childComplexity int) int
		TableID             func(childComplexity int) int
		Title               func(childComplexity int) int
		UpdateTime          func(childComplexity int) int
		Updator             func(childComplexity int) int
		VersionID           func(childComplexity int) int
	}

	IssueAssignRankInfo struct {
		Avatar               func(childComplexity int) int
		EmplID               func(childComplexity int) int
		IncompleteissueCount func(childComplexity int) int
		Name                 func(childComplexity int) int
	}

	IssueDailyPersonalWorkCompletionStatData struct {
		CompletedCount func(childComplexity int) int
		StatDate       func(childComplexity int) int
	}

	IssueInfo struct {
		AllStatus             func(childComplexity int) int
		AuditorsInfo          func(childComplexity int) int
		ChildsFinishedNum     func(childComplexity int) int
		ChildsNum             func(childComplexity int) int
		CreatorInfo           func(childComplexity int) int
		CustomField           func(childComplexity int) int
		FollowerInfos         func(childComplexity int) int
		Issue                 func(childComplexity int) int
		IterationName         func(childComplexity int) int
		LastUrgeTime          func(childComplexity int) int
		LastUrgeTimeForIssue  func(childComplexity int) int
		LessData              func(childComplexity int) int
		NextStatus            func(childComplexity int) int
		Owner                 func(childComplexity int) int
		ParticipantInfos      func(childComplexity int) int
		Priority              func(childComplexity int) int
		Project               func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		PropertyInfo          func(childComplexity int) int
		RelateCommentCount    func(childComplexity int) int
		RelateIssueCount      func(childComplexity int) int
		RelateResourceCount   func(childComplexity int) int
		SourceInfo            func(childComplexity int) int
		Status                func(childComplexity int) int
		TableName             func(childComplexity int) int
		Tags                  func(childComplexity int) int
		TypeInfo              func(childComplexity int) int
		WorkHourInfo          func(childComplexity int) int
	}

	IssueList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IssueObjectTypeInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	IssueProperty struct {
		CreateTime          func(childComplexity int) int
		Creator             func(childComplexity int) int
		ID                  func(childComplexity int) int
		LangCode            func(childComplexity int) int
		Name                func(childComplexity int) int
		OrgID               func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		Remark              func(childComplexity int) int
		Sort                func(childComplexity int) int
		Status              func(childComplexity int) int
		UpdateTime          func(childComplexity int) int
		Updator             func(childComplexity int) int
	}

	IssuePropertyInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	IssueRestInfo struct {
		AllStatus             func(childComplexity int) int
		AuditStatus           func(childComplexity int) int
		EndTime               func(childComplexity int) int
		Finished              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IterationID           func(childComplexity int) int
		IterationName         func(childComplexity int) int
		OwnerAvatar           func(childComplexity int) int
		OwnerID               func(childComplexity int) int
		OwnerIsDeleted        func(childComplexity int) int
		OwnerIsDisabled       func(childComplexity int) int
		OwnerName             func(childComplexity int) int
		PlanEndTime           func(childComplexity int) int
		PlanStartTime         func(childComplexity int) int
		PriorityInfo          func(childComplexity int) int
		ProjectObjectTypeID   func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		ProjectTypeID         func(childComplexity int) int
		StatusID              func(childComplexity int) int
		StatusInfo            func(childComplexity int) int
		StatusName            func(childComplexity int) int
		Title                 func(childComplexity int) int
		Type                  func(childComplexity int) int
	}

	IssueSource struct {
		CreateTime          func(childComplexity int) int
		Creator             func(childComplexity int) int
		ID                  func(childComplexity int) int
		LangCode            func(childComplexity int) int
		Name                func(childComplexity int) int
		OrgID               func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		Remark              func(childComplexity int) int
		Sort                func(childComplexity int) int
		Status              func(childComplexity int) int
		UpdateTime          func(childComplexity int) int
		Updator             func(childComplexity int) int
	}

	IssueSourceInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	IssueStatByObjectType struct {
		ProjectObjectTypeID   func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		Total                 func(childComplexity int) int
	}

	IssueStatusTypeStatDetailResp struct {
		Completed  func(childComplexity int) int
		NotStart   func(childComplexity int) int
		Processing func(childComplexity int) int
	}

	IssueStatusTypeStatResp struct {
		BeAboutToOverdueSum   func(childComplexity int) int
		CallMeTotal           func(childComplexity int) int
		CompletedTodayTotal   func(childComplexity int) int
		CompletedTotal        func(childComplexity int) int
		List                  func(childComplexity int) int
		NotStartTotal         func(childComplexity int) int
		OverdueCompletedTotal func(childComplexity int) int
		OverdueTodayTotal     func(childComplexity int) int
		OverdueTomorrowTotal  func(childComplexity int) int
		OverdueTotal          func(childComplexity int) int
		ProcessingTotal       func(childComplexity int) int
		TodayCount            func(childComplexity int) int
		TodayCreateCount      func(childComplexity int) int
		Total                 func(childComplexity int) int
		WaitConfirmedTotal    func(childComplexity int) int
	}

	IssueWorkHours struct {
		Desc      func(childComplexity int) int
		EndTime   func(childComplexity int) int
		ID        func(childComplexity int) int
		NeedTime  func(childComplexity int) int
		StartTime func(childComplexity int) int
		Type      func(childComplexity int) int
		WorkerID  func(childComplexity int) int
	}

	Iteration struct {
		AllIssueCount      func(childComplexity int) int
		CreateTime         func(childComplexity int) int
		Creator            func(childComplexity int) int
		FinishedIssueCount func(childComplexity int) int
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		OrgID              func(childComplexity int) int
		Owner              func(childComplexity int) int
		OwnerInfo          func(childComplexity int) int
		PlanEndTime        func(childComplexity int) int
		PlanStartTime      func(childComplexity int) int
		PlanWorkHour       func(childComplexity int) int
		ProjectID          func(childComplexity int) int
		Remark             func(childComplexity int) int
		Sort               func(childComplexity int) int
		Status             func(childComplexity int) int
		StatusInfo         func(childComplexity int) int
		StoryPoint         func(childComplexity int) int
		UpdateTime         func(childComplexity int) int
		Updator            func(childComplexity int) int
		VersionID          func(childComplexity int) int
	}

	IterationInfoResp struct {
		IterStatusList func(childComplexity int) int
		Iteration      func(childComplexity int) int
		NextStatus     func(childComplexity int) int
		Owner          func(childComplexity int) int
		Project        func(childComplexity int) int
		Status         func(childComplexity int) int
		StatusTimeInfo func(childComplexity int) int
	}

	IterationList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IterationStat struct {
		BugCount               func(childComplexity int) int
		BugEndCount            func(childComplexity int) int
		BugOverdueCount        func(childComplexity int) int
		BugRunningCount        func(childComplexity int) int
		BugWaitCount           func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		DemandCount            func(childComplexity int) int
		DemandEndCount         func(childComplexity int) int
		DemandOverdueCount     func(childComplexity int) int
		DemandRunningCount     func(childComplexity int) int
		DemandWaitCount        func(childComplexity int) int
		Ext                    func(childComplexity int) int
		ID                     func(childComplexity int) int
		IssueCount             func(childComplexity int) int
		IssueEndCount          func(childComplexity int) int
		IssueOverdueCount      func(childComplexity int) int
		IssueRunningCount      func(childComplexity int) int
		IssueWaitCount         func(childComplexity int) int
		IterationID            func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		ProjectID              func(childComplexity int) int
		StatDate               func(childComplexity int) int
		Status                 func(childComplexity int) int
		StoryPointCount        func(childComplexity int) int
		StoryPointEndCount     func(childComplexity int) int
		StoryPointOverdueCount func(childComplexity int) int
		StoryPointRunningCount func(childComplexity int) int
		StoryPointWaitCount    func(childComplexity int) int
		TaskCount              func(childComplexity int) int
		TaskEndCount           func(childComplexity int) int
		TaskOverdueCount       func(childComplexity int) int
		TaskRunningCount       func(childComplexity int) int
		TaskWaitCount          func(childComplexity int) int
		TesttaskCount          func(childComplexity int) int
		TesttaskEndCount       func(childComplexity int) int
		TesttaskOverdueCount   func(childComplexity int) int
		TesttaskRunningCount   func(childComplexity int) int
		TesttaskWaitCount      func(childComplexity int) int
	}

	IterationStatList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IterationStatSimple struct {
		AllIssues     func(childComplexity int) int
		FinishIssues  func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		OverdueIssues func(childComplexity int) int
	}

	JsAPISignResp struct {
		AgentID   func(childComplexity int) int
		NoceStr   func(childComplexity int) int
		Signature func(childComplexity int) int
		TimeStamp func(childComplexity int) int
	}

	MemberInfo struct {
		Avatar func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	MoveIssueBatchResp struct {
		ChildrenIssues       func(childComplexity int) int
		NoAuthIssues         func(childComplexity int) int
		RemainChildrenIssues func(childComplexity int) int
		SuccessIssues        func(childComplexity int) int
	}

	Mutation struct {
		AddIssueAttachmentFs            func(childComplexity int, input vo.AddIssueAttachmentFsReq) int
		ApplyScopes                     func(childComplexity int) int
		ArchiveProject                  func(childComplexity int, projectID int64) int
		AuditIssue                      func(childComplexity int, params vo.AuditIssueReq) int
		AuthFs                          func(childComplexity int, input vo.FeiShuAuthReq) int
		AuthFsCode                      func(childComplexity int, input vo.FeiShuAuthReq) int
		BindLoginName                   func(childComplexity int, input vo.BindLoginNameReq) int
		BoundFs                         func(childComplexity int, input vo.BoundFeiShuReq) int
		BoundFsAccount                  func(childComplexity int, input vo.BoundFeiShuAccountReq) int
		CancelArchivedProject           func(childComplexity int, projectID int64) int
		ChangeLoginName                 func(childComplexity int, input vo.BindLoginNameReq) int
		ChangeParentIssue               func(childComplexity int, input vo.ChangeParentIssueReq) int
		CheckLoginName                  func(childComplexity int, input vo.CheckLoginNameReq) int
		CompleteDelete                  func(childComplexity int, input vo.RecoverRecycleBinRecordReq) int
		ConvertIssueToParent            func(childComplexity int, input vo.ConvertIssueToParentReq) int
		CreateIssueComment              func(childComplexity int, input vo.CreateIssueCommentReq) int
		CreateIssueWorkHours            func(childComplexity int, params *vo.CreateIssueWorkHoursReq) int
		CreateIteration                 func(childComplexity int, input vo.CreateIterationReq) int
		CreateMultiIssueWorkHours       func(childComplexity int, params *vo.CreateMultiIssueWorkHoursReq) int
		CreateOrg                       func(childComplexity int, input vo.CreateOrgReq) int
		CreateProject                   func(childComplexity int, input vo.CreateProjectReq) int
		CreateProjectFolder             func(childComplexity int, input vo.CreateProjectFolderReq) int
		DeleteIssue                     func(childComplexity int, input vo.DeleteIssueReq) int
		DeleteIssueBatch                func(childComplexity int, input vo.DeleteIssueBatchReq) int
		DeleteIssueWorkHours            func(childComplexity int, params *vo.DeleteIssueWorkHoursReq) int
		DeleteIteration                 func(childComplexity int, input vo.DeleteIterationReq) int
		DeleteProject                   func(childComplexity int, projectID int64) int
		DeleteProjectAttachment         func(childComplexity int, input vo.DeleteProjectAttachmentReq) int
		DeleteProjectFolder             func(childComplexity int, input vo.DeleteProjectFolderReq) int
		DeleteProjectResource           func(childComplexity int, input vo.DeleteProjectResourceReq) int
		InitFsAccount                   func(childComplexity int, input vo.InitFeiShuAccountReq) int
		JoinOrgByInviteCode             func(childComplexity int, params vo.JoinOrgByInviteCodeReq) int
		RecoverRecycleBinRecord         func(childComplexity int, input vo.RecoverRecycleBinRecordReq) int
		ResetPassword                   func(childComplexity int, input vo.ResetPasswordReq) int
		RetrievePassword                func(childComplexity int, input vo.RetrievePasswordReq) int
		SendAuthCode                    func(childComplexity int, input vo.SendAuthCodeReq) int
		SendSmsLoginCode                func(childComplexity int, input vo.SendSmsLoginCodeReq) int
		SetPassword                     func(childComplexity int, input vo.SetPasswordReq) int
		SetUserJoinIssue                func(childComplexity int, params vo.SetUserJoinIssueReq) int
		SwitchUserOrganization          func(childComplexity int, input vo.SwitchUserOrganizationReq) int
		UnbindLoginName                 func(childComplexity int, input vo.UnbindLoginNameReq) int
		UpdateFsProjectChatPushSettings func(childComplexity int, params vo.UpdateFsProjectChatPushSettingsReq) int
		UpdateIssueWorkHours            func(childComplexity int, params *vo.UpdateIssueWorkHoursReq) int
		UpdateIteration                 func(childComplexity int, input vo.UpdateIterationReq) int
		UpdateIterationSort             func(childComplexity int, input vo.UpdateIterationSortReq) int
		UpdateIterationStatus           func(childComplexity int, input vo.UpdateIterationStatusReq) int
		UpdateIterationStatusTime       func(childComplexity int, input vo.UpdateIterationStatusTimeReq) int
		UpdateMultiIssueWorkHours       func(childComplexity int, params *vo.UpdateMultiIssueWorkHoursReq) int
		UpdateOrgMemberCheckStatus      func(childComplexity int, input vo.UpdateOrgMemberCheckStatusReq) int
		UpdateOrgMemberStatus           func(childComplexity int, input vo.UpdateOrgMemberStatusReq) int
		UpdateOrganizationSetting       func(childComplexity int, input vo.UpdateOrganizationSettingsReq) int
		UpdateProject                   func(childComplexity int, input vo.UpdateProjectReq) int
		UpdateProjectDetail             func(childComplexity int, input vo.UpdateProjectDetailReq) int
		UpdateProjectFileResource       func(childComplexity int, input vo.UpdateProjectFileResourceReq) int
		UpdateProjectFolder             func(childComplexity int, input vo.UpdateProjectFolderReq) int
		UpdateProjectResourceFolder     func(childComplexity int, input vo.UpdateProjectResourceFolderReq) int
		UpdateProjectResourceName       func(childComplexity int, input vo.UpdateProjectResourceNameReq) int
		UpdateProjectStatus             func(childComplexity int, input vo.UpdateProjectStatusReq) int
		UpdateUserConfig                func(childComplexity int, input vo.UpdateUserConfigReq) int
		UpdateUserInfo                  func(childComplexity int, input vo.UpdateUserInfoReq) int
		UpdateUserPcConfig              func(childComplexity int, input vo.UpdateUserPcConfigReq) int
		UrgeAuditIssue                  func(childComplexity int, params vo.UrgeAuditIssueReq) int
		UrgeIssue                       func(childComplexity int, params vo.UrgeIssueReq) int
		UserLogin                       func(childComplexity int, input vo.UserLoginReq) int
		UserQuit                        func(childComplexity int) int
		UserRegister                    func(childComplexity int, input vo.UserRegisterReq) int
		VerifyOldName                   func(childComplexity int, input vo.UnbindLoginNameReq) int
		ViewAuditIssue                  func(childComplexity int, params vo.ViewAuditIssueReq) int
		WithdrawIssue                   func(childComplexity int, params vo.WithdrawIssueReq) int
	}

	Notice struct {
		Content       func(childComplexity int) int
		CreateTime    func(childComplexity int) int
		Creator       func(childComplexity int) int
		CreatorInfo   func(childComplexity int) int
		Ext           func(childComplexity int) int
		ID            func(childComplexity int) int
		IssueID       func(childComplexity int) int
		IssueName     func(childComplexity int) int
		Noticer       func(childComplexity int) int
		OrgID         func(childComplexity int) int
		ParentIssueID func(childComplexity int) int
		ProjectID     func(childComplexity int) int
		ProjectName   func(childComplexity int) int
		RelationType  func(childComplexity int) int
		Status        func(childComplexity int) int
		TrendsID      func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	OneActualWorkHourRecord struct {
		CreateTime  func(childComplexity int) int
		CreatorName func(childComplexity int) int
		Desc        func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		IsEnable    func(childComplexity int) int
		NeedTime    func(childComplexity int) int
		StartTime   func(childComplexity int) int
		Type        func(childComplexity int) int
		Worker      func(childComplexity int) int
	}

	OneDateWorkHour struct {
		Date    func(childComplexity int) int
		Time    func(childComplexity int) int
		WeekDay func(childComplexity int) int
	}

	OnePersonWorkHourStatisticInfo struct {
		ActualHourTotal  func(childComplexity int) int
		DateWorkHourList func(childComplexity int) int
		Name             func(childComplexity int) int
		PredictHourTotal func(childComplexity int) int
		WorkerID         func(childComplexity int) int
	}

	OneWorkHourRecord struct {
		Desc      func(childComplexity int) int
		EndTime   func(childComplexity int) int
		ID        func(childComplexity int) int
		IsEnable  func(childComplexity int) int
		NeedTime  func(childComplexity int) int
		StartTime func(childComplexity int) int
		Type      func(childComplexity int) int
		Worker    func(childComplexity int) int
	}

	OrgConfig struct {
		BasicShowSetting func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		ID               func(childComplexity int) int
		IsGrayLevel      func(childComplexity int) int
		Logo             func(childComplexity int) int
		OrgID            func(childComplexity int) int
		OrgMemberNumber  func(childComplexity int) int
		PayEndTime       func(childComplexity int) int
		PayLevel         func(childComplexity int) int
		PayLevelTrue     func(childComplexity int) int
		PayStartTime     func(childComplexity int) int
		SummaryAppID     func(childComplexity int) int
	}

	OrgProjectMemberInfoResp struct {
		Avatar             func(childComplexity int) int
		HasOrgOutInfo      func(childComplexity int) int
		HasOutInfo         func(childComplexity int) int
		Name               func(childComplexity int) int
		NamePy             func(childComplexity int) int
		OrgID              func(childComplexity int) int
		OrgUserCheckStatus func(childComplexity int) int
		OrgUserIsDelete    func(childComplexity int) int
		OrgUserStatus      func(childComplexity int) int
		OutOrgID           func(childComplexity int) int
		OutUserID          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	OrganizationInfoResp struct {
		Address       func(childComplexity int) int
		CityCname     func(childComplexity int) int
		CityID        func(childComplexity int) int
		Code          func(childComplexity int) int
		CountryCname  func(childComplexity int) int
		CountryID     func(childComplexity int) int
		IndustryID    func(childComplexity int) int
		IndustryName  func(childComplexity int) int
		LogoURL       func(childComplexity int) int
		OrgID         func(childComplexity int) int
		OrgName       func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerInfo     func(childComplexity int) int
		ProvinceCname func(childComplexity int) int
		ProvinceID    func(childComplexity int) int
		Remark        func(childComplexity int) int
		Scale         func(childComplexity int) int
		ThirdCode     func(childComplexity int) int
		WebSite       func(childComplexity int) int
	}

	OrganizationUser struct {
		AuditTime        func(childComplexity int) int
		AuditorID        func(childComplexity int) int
		AuditorInfo      func(childComplexity int) int
		CheckStatus      func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		Creator          func(childComplexity int) int
		ID               func(childComplexity int) int
		OrgID            func(childComplexity int) int
		Status           func(childComplexity int) int
		StatusChangeTime func(childComplexity int) int
		StatusChangerID  func(childComplexity int) int
		UpdateTime       func(childComplexity int) int
		Updator          func(childComplexity int) int
		UseStatus        func(childComplexity int) int
		UserID           func(childComplexity int) int
		UserInfo         func(childComplexity int) int
		UserRole         func(childComplexity int) int
	}

	OssPostPolicyResp struct {
		AccessID    func(childComplexity int) int
		Bucket      func(childComplexity int) int
		Callback    func(childComplexity int) int
		Dir         func(childComplexity int) int
		Expire      func(childComplexity int) int
		FileName    func(childComplexity int) int
		Host        func(childComplexity int) int
		MaxFileSize func(childComplexity int) int
		Policy      func(childComplexity int) int
		Region      func(childComplexity int) int
		Signature   func(childComplexity int) int
	}

	ParentInfo struct {
		Code  func(childComplexity int) int
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	PayLimitNumResp struct {
		FileSize   func(childComplexity int) int
		IssueNum   func(childComplexity int) int
		ProjectNum func(childComplexity int) int
	}

	Permission struct {
		Code       func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		ID         func(childComplexity int) int
		IsShow     func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		OrgID      func(childComplexity int) int
		ParentID   func(childComplexity int) int
		Path       func(childComplexity int) int
		Remark     func(childComplexity int) int
		Status     func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		Updator    func(childComplexity int) int
	}

	PermissionList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PermissionOperation struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		ID             func(childComplexity int) int
		IsShow         func(childComplexity int) int
		LangCode       func(childComplexity int) int
		Name           func(childComplexity int) int
		OperationCodes func(childComplexity int) int
		OrgID          func(childComplexity int) int
		PermissionID   func(childComplexity int) int
		Remark         func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		Updator        func(childComplexity int) int
	}

	PermissionOperationListResp struct {
		OperationList  func(childComplexity int) int
		PermissionHave func(childComplexity int) int
		PermissionInfo func(childComplexity int) int
	}

	PersonalInfo struct {
		Avatar             func(childComplexity int) int
		Birthday           func(childComplexity int) int
		CreateTime         func(childComplexity int) int
		Email              func(childComplexity int) int
		EmplID             func(childComplexity int) int
		ExtraDataMap       func(childComplexity int) int
		Functions          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsAdmin            func(childComplexity int) int
		IsManager          func(childComplexity int) int
		Language           func(childComplexity int) int
		LastLoginIP        func(childComplexity int) int
		LastLoginTime      func(childComplexity int) int
		Level              func(childComplexity int) int
		LevelName          func(childComplexity int) int
		LoginFailCount     func(childComplexity int) int
		LoginName          func(childComplexity int) int
		LoginNameEditCount func(childComplexity int) int
		Mobile             func(childComplexity int) int
		Motto              func(childComplexity int) int
		Name               func(childComplexity int) int
		OrgCode            func(childComplexity int) int
		OrgID              func(childComplexity int) int
		OrgName            func(childComplexity int) int
		PasswordSet        func(childComplexity int) int
		RemindBindPhone    func(childComplexity int) int
		Rimanente          func(childComplexity int) int
		Sex                func(childComplexity int) int
		SourceChannel      func(childComplexity int) int
		ThirdName          func(childComplexity int) int
		UpdateTime         func(childComplexity int) int
	}

	PredictListItem struct {
		Name     func(childComplexity int) int
		WorkHour func(childComplexity int) int
	}

	Priority struct {
		BgStyle    func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		FontStyle  func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDefault  func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		OrgID      func(childComplexity int) int
		Remark     func(childComplexity int) int
		Sort       func(childComplexity int) int
		Status     func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		Updator    func(childComplexity int) int
		Version    func(childComplexity int) int
	}

	PriorityList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Project struct {
		AllIssues              func(childComplexity int) int
		AllStatus              func(childComplexity int) int
		AppID                  func(childComplexity int) int
		Code                   func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		CreatorInfo            func(childComplexity int) int
		FinishIssues           func(childComplexity int) int
		FollowerInfo           func(childComplexity int) int
		ID                     func(childComplexity int) int
		Icon                   func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		IsFiling               func(childComplexity int) int
		IsStar                 func(childComplexity int) int
		IsSyncOutCalendar      func(childComplexity int) int
		IterationStat          func(childComplexity int) int
		MemberInfo             func(childComplexity int) int
		Name                   func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		OverdueIssues          func(childComplexity int) int
		Owner                  func(childComplexity int) int
		OwnerInfo              func(childComplexity int) int
		OwnersInfo             func(childComplexity int) int
		PlanEndTime            func(childComplexity int) int
		PlanStartTime          func(childComplexity int) int
		PreCode                func(childComplexity int) int
		PriorityID             func(childComplexity int) int
		ProjectTypeID          func(childComplexity int) int
		ProjectTypeLangCode    func(childComplexity int) int
		ProjectTypeName        func(childComplexity int) int
		PublicStatus           func(childComplexity int) int
		RelateUnfinish         func(childComplexity int) int
		Remark                 func(childComplexity int) int
		ResourceCompressedPath func(childComplexity int) int
		ResourceID             func(childComplexity int) int
		ResourcePath           func(childComplexity int) int
		Status                 func(childComplexity int) int
		StatusType             func(childComplexity int) int
		UpdateTime             func(childComplexity int) int
		Updator                func(childComplexity int) int
		Version                func(childComplexity int) int
	}

	ProjectDayStat struct {
		BugCount               func(childComplexity int) int
		BugEndCount            func(childComplexity int) int
		BugOverdueCount        func(childComplexity int) int
		BugRunningCount        func(childComplexity int) int
		BugWaitCount           func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		DemandCount            func(childComplexity int) int
		DemandEndCount         func(childComplexity int) int
		DemandOverdueCount     func(childComplexity int) int
		DemandRunningCount     func(childComplexity int) int
		DemandWaitCount        func(childComplexity int) int
		Ext                    func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		IssueCount             func(childComplexity int) int
		IssueEndCount          func(childComplexity int) int
		IssueOverdueCount      func(childComplexity int) int
		IssueRunningCount      func(childComplexity int) int
		IssueWaitCount         func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		ProjectID              func(childComplexity int) int
		StatDate               func(childComplexity int) int
		Status                 func(childComplexity int) int
		StoryPointCount        func(childComplexity int) int
		StoryPointEndCount     func(childComplexity int) int
		StoryPointOverdueCount func(childComplexity int) int
		StoryPointRunningCount func(childComplexity int) int
		StoryPointWaitCount    func(childComplexity int) int
		TaskCount              func(childComplexity int) int
		TaskEndCount           func(childComplexity int) int
		TaskOverdueCount       func(childComplexity int) int
		TaskRunningCount       func(childComplexity int) int
		TaskWaitCount          func(childComplexity int) int
		TesttaskCount          func(childComplexity int) int
		TesttaskEndCount       func(childComplexity int) int
		TesttaskOverdueCount   func(childComplexity int) int
		TesttaskRunningCount   func(childComplexity int) int
		TesttaskWaitCount      func(childComplexity int) int
		UpdateTime             func(childComplexity int) int
		Updator                func(childComplexity int) int
		Version                func(childComplexity int) int
	}

	ProjectDayStatList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectDetail struct {
		CreateTime        func(childComplexity int) int
		Creator           func(childComplexity int) int
		ID                func(childComplexity int) int
		IsEnableWorkHours func(childComplexity int) int
		IsSyncOutCalendar func(childComplexity int) int
		Notice            func(childComplexity int) int
		OrgID             func(childComplexity int) int
		ProjectID         func(childComplexity int) int
		UpdateTime        func(childComplexity int) int
		Updator           func(childComplexity int) int
	}

	ProjectDetailList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectInfo struct {
		AllStatus              func(childComplexity int) int
		AppID                  func(childComplexity int) int
		Code                   func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		CreatorInfo            func(childComplexity int) int
		FollowerInfo           func(childComplexity int) int
		ID                     func(childComplexity int) int
		Icon                   func(childComplexity int) int
		IsCreateFsChat         func(childComplexity int) int
		IsFiling               func(childComplexity int) int
		IsStar                 func(childComplexity int) int
		IsSyncOutCalendar      func(childComplexity int) int
		MemberDepartmentInfo   func(childComplexity int) int
		MemberInfo             func(childComplexity int) int
		Name                   func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		Owner                  func(childComplexity int) int
		OwnerInfo              func(childComplexity int) int
		OwnersInfo             func(childComplexity int) int
		ParentID               func(childComplexity int) int
		PlanEndTime            func(childComplexity int) int
		PlanStartTime          func(childComplexity int) int
		PreCode                func(childComplexity int) int
		PriorityID             func(childComplexity int) int
		PrivacyStatus          func(childComplexity int) int
		ProjectTypeID          func(childComplexity int) int
		PublicStatus           func(childComplexity int) int
		Remark                 func(childComplexity int) int
		ResourceID             func(childComplexity int) int
		ResourcePath           func(childComplexity int) int
		Status                 func(childComplexity int) int
		SyncCalendarStatusList func(childComplexity int) int
		UpdateTime             func(childComplexity int) int
		Updator                func(childComplexity int) int
	}

	ProjectList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectMemberIDListResp struct {
		DepartmentIds func(childComplexity int) int
		UserIds       func(childComplexity int) int
	}

	ProjectType struct {
		Cover            func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		Creator          func(childComplexity int) int
		DefaultProcessID func(childComplexity int) int
		ID               func(childComplexity int) int
		IsReadonly       func(childComplexity int) int
		LangCode         func(childComplexity int) int
		Name             func(childComplexity int) int
		OrgID            func(childComplexity int) int
		Remark           func(childComplexity int) int
		Sort             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdateTime       func(childComplexity int) int
		Updator          func(childComplexity int) int
	}

	ProjectTypeList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Query struct {
		AreaLinkageList              func(childComplexity int, input vo.AreaLinkageListReq) int
		CheckIsEnableWorkHour        func(childComplexity int, params vo.CheckIsEnableWorkHourReq) int
		CheckIsIssueMember           func(childComplexity int, params vo.CheckIsIssueMemberReq) int
		CheckSpecificScope           func(childComplexity int, params vo.CheckSpecificScopeReq) int
		CheckTokenValidity           func(childComplexity int) int
		DepartmentMembers            func(childComplexity int, params vo.DepartmentMemberListReq) int
		DepartmentMembersList        func(childComplexity int, page *int, size *int, params *vo.DepartmentMembersListReq) int
		Departments                  func(childComplexity int, page *int, size *int, params *vo.DepartmentListReq) int
		ExportData                   func(childComplexity int, projectID int64, iterationID *int64, tableID string, isNeedDocument *bool) int
		ExportIssueTemplate          func(childComplexity int, projectID int64, tableID string) int
		ExportWorkHourStatistic      func(childComplexity int, params vo.GetWorkHourStatisticReq) int
		FsDocumentList               func(childComplexity int, page *int, size *int, input vo.FsDocumentListReq) int
		GetAppTicket                 func(childComplexity int) int
		GetFsProjectChatPushSettings func(childComplexity int, params vo.GetFsProjectChatPushSettingsReq) int
		GetInviteCode                func(childComplexity int, input *vo.GetInviteCodeReq) int
		GetInviteInfo                func(childComplexity int, input vo.GetInviteInfoReq) int
		GetIssueViewList             func(childComplexity int, params vo.GetIssueViewListReq) int
		GetIssueWorkHoursInfo        func(childComplexity int, params vo.GetIssueWorkHoursInfoReq) int
		GetJsAPITicket               func(childComplexity int) int
		GetMQTTChannelKey            func(childComplexity int, input vo.GetMQTTChannelKeyReq) int
		GetOrgConfig                 func(childComplexity int) int
		GetOssPostPolicy             func(childComplexity int, input vo.OssPostPolicyReq) int
		GetPayRemind                 func(childComplexity int) int
		GetPersonalPermissionInfo    func(childComplexity int, projectID *int64, issueID *int64) int
		GetProjectMainChatID         func(childComplexity int, params vo.GetProjectMainChatIDReq) int
		GetWorkHourStatistic         func(childComplexity int, params vo.GetWorkHourStatisticReq) int
		IndustryList                 func(childComplexity int) int
		IssueAssignRank              func(childComplexity int, input vo.IssueAssignRankReq) int
		IssueInfoNotDelete           func(childComplexity int, param vo.IssueInfoNotDeleteReq) int
		IssueStatusTypeStat          func(childComplexity int, input *vo.IssueStatusTypeStatReq) int
		IssueStatusTypeStatDetail    func(childComplexity int, input *vo.IssueStatusTypeStatReq) int
		IterationInfo                func(childComplexity int, input vo.IterationInfoReq) int
		IterationStats               func(childComplexity int, page *int, size *int, params vo.IterationStatReq) int
		Iterations                   func(childComplexity int, page *int, size *int, params *vo.IterationListReq) int
		OrgUserList                  func(childComplexity int, page *int, size *int, input vo.OrgUserListReq) int
		OrganizationInfo             func(childComplexity int, input vo.OrganizationInfoReq) int
		PayLimitNum                  func(childComplexity int) int
		PersonalInfo                 func(childComplexity int) int
		ProjectAttachment            func(childComplexity int, page *int, size *int, params vo.ProjectAttachmentReq) int
		ProjectAttachmentInfo        func(childComplexity int, input vo.ProjectAttachmentInfoReq) int
		ProjectDayStats              func(childComplexity int, page *int, size *int, params *vo.ProjectDayStatReq) int
		ProjectDetail                func(childComplexity int, projectID int64) int
		ProjectFolder                func(childComplexity int, page *int, size *int, params vo.ProjectFolderReq) int
		ProjectInfo                  func(childComplexity int, input vo.ProjectInfoReq) int
		ProjectMemberIDList          func(childComplexity int, params vo.ProjectMemberIDListReq) int
		ProjectResource              func(childComplexity int, page *int, size *int, params vo.ProjectResourceReq) int
		Projects                     func(childComplexity int, page int, size int, params map[string]interface{}, order []*string, input *vo.ProjectsReq) int
		RecycleBinList               func(childComplexity int, page *int, size *int, params vo.RecycleBinListReq) int
		TrendList                    func(childComplexity int, input *vo.TrendReq) int
		UserConfigInfo               func(childComplexity int) int
		UserOrganizationList         func(childComplexity int) int
	}

	RecycleBin struct {
		CreateTime   func(childComplexity int) int
		Creator      func(childComplexity int) int
		CreatorInfo  func(childComplexity int) int
		ID           func(childComplexity int) int
		IsCanDo      func(childComplexity int) int
		Name         func(childComplexity int) int
		OrgID        func(childComplexity int) int
		ProjectID    func(childComplexity int) int
		RelationID   func(childComplexity int) int
		RelationType func(childComplexity int) int
		ResourceInfo func(childComplexity int) int
		TagInfo      func(childComplexity int) int
		UpdateTime   func(childComplexity int) int
		Updator      func(childComplexity int) int
	}

	RecycleBinList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	RelationIssue struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	RelationType struct {
		Avatar       func(childComplexity int) int
		Name         func(childComplexity int) int
		OutOrgUserID func(childComplexity int) int
		OutUserID    func(childComplexity int) int
		ProjectID    func(childComplexity int) int
		RelationType func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Resource struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		CreatorName    func(childComplexity int) int
		FileType       func(childComplexity int) int
		Host           func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		Md5            func(childComplexity int) int
		Name           func(childComplexity int) int
		OfficeURL      func(childComplexity int) int
		OrgID          func(childComplexity int) int
		Path           func(childComplexity int) int
		PathCompressed func(childComplexity int) int
		Size           func(childComplexity int) int
		Suffix         func(childComplexity int) int
		Type           func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		Updator        func(childComplexity int) int
		Version        func(childComplexity int) int
	}

	ResourceInfo struct {
		Creator     func(childComplexity int) int
		CreatorName func(childComplexity int) int
		Name        func(childComplexity int) int
		Size        func(childComplexity int) int
		Suffix      func(childComplexity int) int
		URL         func(childComplexity int) int
		UploadTime  func(childComplexity int) int
	}

	ResourceList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Role struct {
		CreateTime         func(childComplexity int) int
		Creator            func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDefault          func(childComplexity int) int
		IsModifyPermission func(childComplexity int) int
		IsReadonly         func(childComplexity int) int
		LangCode           func(childComplexity int) int
		Name               func(childComplexity int) int
		OrgID              func(childComplexity int) int
		Remark             func(childComplexity int) int
		RoleGroupID        func(childComplexity int) int
		Status             func(childComplexity int) int
		UpdateTime         func(childComplexity int) int
		Updator            func(childComplexity int) int
	}

	SimpleTagInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	StatCommon struct {
		Count func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	StatData struct {
		IssueCount             func(childComplexity int) int
		IssueEndCount          func(childComplexity int) int
		IssueRunningCount      func(childComplexity int) int
		IssueWaitCount         func(childComplexity int) int
		StoryPointCount        func(childComplexity int) int
		StoryPointEndCount     func(childComplexity int) int
		StoryPointRunningCount func(childComplexity int) int
		StoryPointWaitCount    func(childComplexity int) int
	}

	StatExtResp struct {
		Issue func(childComplexity int) int
	}

	StatIssueExt struct {
		Data func(childComplexity int) int
	}

	StatusTimeInfo struct {
		EndTime       func(childComplexity int) int
		PlanEndTime   func(childComplexity int) int
		PlanStartTime func(childComplexity int) int
		StartTime     func(childComplexity int) int
		StatusID      func(childComplexity int) int
		StatusName    func(childComplexity int) int
		StatusType    func(childComplexity int) int
	}

	Tag struct {
		BgStyle    func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		FontStyle  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		NamePinyin func(childComplexity int) int
		OrgID      func(childComplexity int) int
		ProjectID  func(childComplexity int) int
		UsedNum    func(childComplexity int) int
	}

	ThirdAccountBindListResp struct {
		Avatar        func(childComplexity int) int
		Name          func(childComplexity int) int
		SourceChannel func(childComplexity int) int
	}

	Trend struct {
		Comment         func(childComplexity int) int
		CreateTime      func(childComplexity int) int
		Creator         func(childComplexity int) int
		CreatorInfo     func(childComplexity int) int
		Ext             func(childComplexity int) int
		Extension       func(childComplexity int) int
		ID              func(childComplexity int) int
		Module1         func(childComplexity int) int
		Module2         func(childComplexity int) int
		Module2Id       func(childComplexity int) int
		Module3         func(childComplexity int) int
		Module3Id       func(childComplexity int) int
		NewValue        func(childComplexity int) int
		ObjIsDelete     func(childComplexity int) int
		OldValue        func(childComplexity int) int
		OperCode        func(childComplexity int) int
		OperObjID       func(childComplexity int) int
		OperObjName     func(childComplexity int) int
		OperObjProperty func(childComplexity int) int
		OperObjType     func(childComplexity int) int
		OrgID           func(childComplexity int) int
		RelationObjID   func(childComplexity int) int
		RelationObjType func(childComplexity int) int
		RelationType    func(childComplexity int) int
	}

	TrendAuditInfo struct {
		Attachments func(childComplexity int) int
		Remark      func(childComplexity int) int
		Status      func(childComplexity int) int
	}

	TrendExtension struct {
		AddedFormFields   func(childComplexity int) int
		AuditInfo         func(childComplexity int) int
		ChangeList        func(childComplexity int) int
		CommonChange      func(childComplexity int) int
		DeletedFormFields func(childComplexity int) int
		FieldIds          func(childComplexity int) int
		FolderID          func(childComplexity int) int
		IssueType         func(childComplexity int) int
		MemberInfo        func(childComplexity int) int
		ObjName           func(childComplexity int) int
		RelationIssue     func(childComplexity int) int
		ResourceInfo      func(childComplexity int) int
		TagInfo           func(childComplexity int) int
		UpdatedFormFields func(childComplexity int) int
	}

	TrendsList struct {
		LastTrendID func(childComplexity int) int
		List        func(childComplexity int) int
		Page        func(childComplexity int) int
		Size        func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	UpdateProjectFolderResp struct {
		FolderID func(childComplexity int) int
	}

	UpdateProjectResourceFolderResp struct {
		ResourceIds func(childComplexity int) int
	}

	UpdateUserConfigResp struct {
		ID func(childComplexity int) int
	}

	UserConfig struct {
		AttentionRangeStatus            func(childComplexity int) int
		CollaborateMessageStatus        func(childComplexity int) int
		CommentAtMessageStatus          func(childComplexity int) int
		CreateRangeStatus               func(childComplexity int) int
		DailyProjectReportMessageStatus func(childComplexity int) int
		DailyReportMessageStatus        func(childComplexity int) int
		DefaultProjectID                func(childComplexity int) int
		DefaultProjectObjectTypeID      func(childComplexity int) int
		ID                              func(childComplexity int) int
		ModifyMessageStatus             func(childComplexity int) int
		OwnerRangeStatus                func(childComplexity int) int
		ParticipantRangeStatus          func(childComplexity int) int
		PcCommentAtMessageStatus        func(childComplexity int) int
		PcIssueRemindMessageStatus      func(childComplexity int) int
		PcNoticeOpenStatus              func(childComplexity int) int
		PcOrgMessageStatus              func(childComplexity int) int
		PcProjectMessageStatus          func(childComplexity int) int
		RelationMessageStatus           func(childComplexity int) int
		RemindExpiring                  func(childComplexity int) int
		RemindMessageStatus             func(childComplexity int) int
	}

	UserDepartmentData struct {
		DeparmentName func(childComplexity int) int
		DepartmentID  func(childComplexity int) int
		IsLeader      func(childComplexity int) int
	}

	UserIDInfo struct {
		Avatar     func(childComplexity int) int
		EmplID     func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeleted  func(childComplexity int) int
		IsDisabled func(childComplexity int) int
		Name       func(childComplexity int) int
		NamePy     func(childComplexity int) int
		UnionID    func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	UserIDInfoExtraForIssueAudit struct {
		AuditStatus func(childComplexity int) int
		Avatar      func(childComplexity int) int
		EmplID      func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		IsDisabled  func(childComplexity int) int
		Name        func(childComplexity int) int
		NamePy      func(childComplexity int) int
		UnionID     func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	UserInfo struct {
		Avatar           func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		DepartmentList   func(childComplexity int) int
		Email            func(childComplexity int) int
		IsCreator        func(childComplexity int) int
		Name             func(childComplexity int) int
		NamePy           func(childComplexity int) int
		PhoneNumber      func(childComplexity int) int
		RoleList         func(childComplexity int) int
		Status           func(childComplexity int) int
		StatusChangeTime func(childComplexity int) int
		UserID           func(childComplexity int) int
	}

	UserLoginResp struct {
		Avatar      func(childComplexity int) int
		Name        func(childComplexity int) int
		NeedInitOrg func(childComplexity int) int
		NotFsMobile func(childComplexity int) int
		OrgCode     func(childComplexity int) int
		OrgID       func(childComplexity int) int
		OrgName     func(childComplexity int) int
		Token       func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	UserOrganization struct {
		Address         func(childComplexity int) int
		CityID          func(childComplexity int) int
		Code            func(childComplexity int) int
		CountryID       func(childComplexity int) int
		Functions       func(childComplexity int) int
		ID              func(childComplexity int) int
		IndustryID      func(childComplexity int) int
		IsAdmin         func(childComplexity int) int
		IsAuthenticated func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsShow          func(childComplexity int) int
		LogoURL         func(childComplexity int) int
		Name            func(childComplexity int) int
		OrgIsEnabled    func(childComplexity int) int
		Owner           func(childComplexity int) int
		ProvinceID      func(childComplexity int) int
		Remark          func(childComplexity int) int
		ResorceID       func(childComplexity int) int
		Scale           func(childComplexity int) int
		SourceChannel   func(childComplexity int) int
		SourcePlatform  func(childComplexity int) int
		WebSite         func(childComplexity int) int
	}

	UserOrganizationList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	UserOrganizationListResp struct {
		List func(childComplexity int) int
	}

	UserRegisterResp struct {
		Token func(childComplexity int) int
	}

	UserRoleData struct {
		RoleID   func(childComplexity int) int
		RoleName func(childComplexity int) int
	}

	UserRoleInfo struct {
		ID       func(childComplexity int) int
		LangCode func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	Void struct {
		ID func(childComplexity int) int
	}

	WorkHourWorker struct {
		Avatar func(childComplexity int) int
		Name   func(childComplexity int) int
		UserID func(childComplexity int) int
	}

	FsDocumentData struct {
		DocsToken func(childComplexity int) int
		DocsType  func(childComplexity int) int
		DocsURL   func(childComplexity int) int
		OwnerID   func(childComplexity int) int
		OwnerName func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	FsDocumentListResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetIssueViewListResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IssueListStatData struct {
		FinishedCount         func(childComplexity int) int
		OverdueCount          func(childComplexity int) int
		ProjectObjectTypeID   func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		Total                 func(childComplexity int) int
	}

	ProjectUser struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		CreatorInfo    func(childComplexity int) int
		DepartmentInfo func(childComplexity int) int
		Type           func(childComplexity int) int
		UserInfo       func(childComplexity int) int
		UserRole       func(childComplexity int) int
	}
}

type MutationResolver interface {
	SendSmsLoginCode(ctx context.Context, input vo.SendSmsLoginCodeReq) (*vo.Void, error)
	SendAuthCode(ctx context.Context, input vo.SendAuthCodeReq) (*vo.Void, error)
	RetrievePassword(ctx context.Context, input vo.RetrievePasswordReq) (*vo.Void, error)
	ResetPassword(ctx context.Context, input vo.ResetPasswordReq) (*vo.Void, error)
	SetPassword(ctx context.Context, input vo.SetPasswordReq) (*vo.Void, error)
	UnbindLoginName(ctx context.Context, input vo.UnbindLoginNameReq) (*vo.Void, error)
	BindLoginName(ctx context.Context, input vo.BindLoginNameReq) (*vo.Void, error)
	CheckLoginName(ctx context.Context, input vo.CheckLoginNameReq) (*vo.Void, error)
	VerifyOldName(ctx context.Context, input vo.UnbindLoginNameReq) (*vo.Void, error)
	ChangeLoginName(ctx context.Context, input vo.BindLoginNameReq) (*vo.Void, error)
	AuthFs(ctx context.Context, input vo.FeiShuAuthReq) (*vo.FeiShuAuthResp, error)
	AuthFsCode(ctx context.Context, input vo.FeiShuAuthReq) (*vo.FeiShuAuthCodeResp, error)
	BoundFs(ctx context.Context, input vo.BoundFeiShuReq) (*vo.Void, error)
	BoundFsAccount(ctx context.Context, input vo.BoundFeiShuAccountReq) (*vo.Void, error)
	InitFsAccount(ctx context.Context, input vo.InitFeiShuAccountReq) (*vo.FeiShuAuthCodeResp, error)
	UserLogin(ctx context.Context, input vo.UserLoginReq) (*vo.UserLoginResp, error)
	UserRegister(ctx context.Context, input vo.UserRegisterReq) (*vo.UserRegisterResp, error)
	UserQuit(ctx context.Context) (*vo.Void, error)
	UpdateProjectStatus(ctx context.Context, input vo.UpdateProjectStatusReq) (*vo.Void, error)
	ArchiveProject(ctx context.Context, projectID int64) (*vo.Void, error)
	CancelArchivedProject(ctx context.Context, projectID int64) (*vo.Void, error)
	DeleteProject(ctx context.Context, projectID int64) (*vo.Void, error)
	UpdateUserConfig(ctx context.Context, input vo.UpdateUserConfigReq) (*vo.UpdateUserConfigResp, error)
	UpdateUserPcConfig(ctx context.Context, input vo.UpdateUserPcConfigReq) (*vo.UpdateUserConfigResp, error)
	UpdateIterationStatus(ctx context.Context, input vo.UpdateIterationStatusReq) (*vo.Void, error)
	CreateOrg(ctx context.Context, input vo.CreateOrgReq) (*vo.Void, error)
	CreateIssueComment(ctx context.Context, input vo.CreateIssueCommentReq) (*vo.Void, error)
	DeleteIssue(ctx context.Context, input vo.DeleteIssueReq) (*vo.Issue, error)
	DeleteIssueBatch(ctx context.Context, input vo.DeleteIssueBatchReq) (*vo.DeleteIssueBatchResp, error)
	CreateProject(ctx context.Context, input vo.CreateProjectReq) (*vo.Project, error)
	UpdateProject(ctx context.Context, input vo.UpdateProjectReq) (*vo.Project, error)
	CreateIteration(ctx context.Context, input vo.CreateIterationReq) (*vo.Void, error)
	UpdateIteration(ctx context.Context, input vo.UpdateIterationReq) (*vo.Void, error)
	DeleteIteration(ctx context.Context, input vo.DeleteIterationReq) (*vo.Void, error)
	UpdateIterationSort(ctx context.Context, input vo.UpdateIterationSortReq) (*vo.Void, error)
	UpdateProjectDetail(ctx context.Context, input vo.UpdateProjectDetailReq) (*vo.Void, error)
	SwitchUserOrganization(ctx context.Context, input vo.SwitchUserOrganizationReq) (*vo.Void, error)
	UpdateOrganizationSetting(ctx context.Context, input vo.UpdateOrganizationSettingsReq) (*vo.Void, error)
	UpdateOrgMemberStatus(ctx context.Context, input vo.UpdateOrgMemberStatusReq) (*vo.Void, error)
	UpdateOrgMemberCheckStatus(ctx context.Context, input vo.UpdateOrgMemberCheckStatusReq) (*vo.Void, error)
	UpdateUserInfo(ctx context.Context, input vo.UpdateUserInfoReq) (*vo.Void, error)
	UpdateProjectResourceFolder(ctx context.Context, input vo.UpdateProjectResourceFolderReq) (*vo.UpdateProjectResourceFolderResp, error)
	UpdateProjectResourceName(ctx context.Context, input vo.UpdateProjectResourceNameReq) (*vo.Void, error)
	UpdateProjectFileResource(ctx context.Context, input vo.UpdateProjectFileResourceReq) (*vo.Void, error)
	DeleteProjectResource(ctx context.Context, input vo.DeleteProjectResourceReq) (*vo.DeleteProjectResourceResp, error)
	CreateProjectFolder(ctx context.Context, input vo.CreateProjectFolderReq) (*vo.Void, error)
	DeleteProjectFolder(ctx context.Context, input vo.DeleteProjectFolderReq) (*vo.DeleteProjectFolderResp, error)
	UpdateProjectFolder(ctx context.Context, input vo.UpdateProjectFolderReq) (*vo.UpdateProjectFolderResp, error)
	DeleteProjectAttachment(ctx context.Context, input vo.DeleteProjectAttachmentReq) (*vo.DeleteProjectAttachmentResp, error)
	UpdateIterationStatusTime(ctx context.Context, input vo.UpdateIterationStatusTimeReq) (*vo.Void, error)
	RecoverRecycleBinRecord(ctx context.Context, input vo.RecoverRecycleBinRecordReq) (*vo.Void, error)
	CompleteDelete(ctx context.Context, input vo.RecoverRecycleBinRecordReq) (*vo.Void, error)
	AddIssueAttachmentFs(ctx context.Context, input vo.AddIssueAttachmentFsReq) (*vo.AddIssueAttachmentFsResp, error)
	ConvertIssueToParent(ctx context.Context, input vo.ConvertIssueToParentReq) (*vo.Void, error)
	ChangeParentIssue(ctx context.Context, input vo.ChangeParentIssueReq) (*vo.Void, error)
	CreateIssueWorkHours(ctx context.Context, params *vo.CreateIssueWorkHoursReq) (*vo.BoolResp, error)
	CreateMultiIssueWorkHours(ctx context.Context, params *vo.CreateMultiIssueWorkHoursReq) (*vo.BoolResp, error)
	UpdateIssueWorkHours(ctx context.Context, params *vo.UpdateIssueWorkHoursReq) (*vo.BoolResp, error)
	UpdateMultiIssueWorkHours(ctx context.Context, params *vo.UpdateMultiIssueWorkHoursReq) (*vo.BoolResp, error)
	DeleteIssueWorkHours(ctx context.Context, params *vo.DeleteIssueWorkHoursReq) (*vo.BoolResp, error)
	SetUserJoinIssue(ctx context.Context, params vo.SetUserJoinIssueReq) (*vo.BoolResp, error)
	UpdateFsProjectChatPushSettings(ctx context.Context, params vo.UpdateFsProjectChatPushSettingsReq) (*vo.Void, error)
	UrgeIssue(ctx context.Context, params vo.UrgeIssueReq) (*vo.BoolResp, error)
	AuditIssue(ctx context.Context, params vo.AuditIssueReq) (*vo.Void, error)
	ViewAuditIssue(ctx context.Context, params vo.ViewAuditIssueReq) (*vo.Void, error)
	WithdrawIssue(ctx context.Context, params vo.WithdrawIssueReq) (*vo.Void, error)
	UrgeAuditIssue(ctx context.Context, params vo.UrgeAuditIssueReq) (*vo.BoolResp, error)
	ApplyScopes(ctx context.Context) (*vo.ApplyScopesResp, error)
	JoinOrgByInviteCode(ctx context.Context, params vo.JoinOrgByInviteCodeReq) (*vo.Void, error)
}
type QueryResolver interface {
	PersonalInfo(ctx context.Context) (*vo.PersonalInfo, error)
	GetOrgConfig(ctx context.Context) (*vo.OrgConfig, error)
	GetPayRemind(ctx context.Context) (*vo.GetPayRemindResp, error)
	UserConfigInfo(ctx context.Context) (*vo.UserConfig, error)
	IssueInfoNotDelete(ctx context.Context, param vo.IssueInfoNotDeleteReq) (*vo.IssueInfo, error)
	IssueStatusTypeStat(ctx context.Context, input *vo.IssueStatusTypeStatReq) (*vo.IssueStatusTypeStatResp, error)
	IssueStatusTypeStatDetail(ctx context.Context, input *vo.IssueStatusTypeStatReq) (*vo.IssueStatusTypeStatDetailResp, error)
	IssueAssignRank(ctx context.Context, input vo.IssueAssignRankReq) ([]*vo.IssueAssignRankInfo, error)
	FsDocumentList(ctx context.Context, page *int, size *int, input vo.FsDocumentListReq) (*vo.FsDocumentListResp, error)
	TrendList(ctx context.Context, input *vo.TrendReq) (*vo.TrendsList, error)
	IterationInfo(ctx context.Context, input vo.IterationInfoReq) (*vo.IterationInfoResp, error)
	GetOssPostPolicy(ctx context.Context, input vo.OssPostPolicyReq) (*vo.OssPostPolicyResp, error)
	GetInviteCode(ctx context.Context, input *vo.GetInviteCodeReq) (*vo.GetInviteCodeResp, error)
	GetInviteInfo(ctx context.Context, input vo.GetInviteInfoReq) (*vo.GetInviteInfoResp, error)
	GetMQTTChannelKey(ctx context.Context, input vo.GetMQTTChannelKeyReq) (*vo.GetMQTTChannelKeyResp, error)
	Projects(ctx context.Context, page int, size int, params map[string]interface{}, order []*string, input *vo.ProjectsReq) (*vo.ProjectList, error)
	ProjectInfo(ctx context.Context, input vo.ProjectInfoReq) (*vo.ProjectInfo, error)
	Iterations(ctx context.Context, page *int, size *int, params *vo.IterationListReq) (*vo.IterationList, error)
	IterationStats(ctx context.Context, page *int, size *int, params vo.IterationStatReq) (*vo.IterationStatList, error)
	ProjectDetail(ctx context.Context, projectID int64) (*vo.ProjectDetail, error)
	ProjectDayStats(ctx context.Context, page *int, size *int, params *vo.ProjectDayStatReq) (*vo.ProjectDayStatList, error)
	Departments(ctx context.Context, page *int, size *int, params *vo.DepartmentListReq) (*vo.DepartmentList, error)
	DepartmentMembers(ctx context.Context, params vo.DepartmentMemberListReq) ([]*vo.DepartmentMemberInfo, error)
	DepartmentMembersList(ctx context.Context, page *int, size *int, params *vo.DepartmentMembersListReq) (*vo.DepartmentMembersListResp, error)
	UserOrganizationList(ctx context.Context) (*vo.UserOrganizationListResp, error)
	AreaLinkageList(ctx context.Context, input vo.AreaLinkageListReq) (*vo.AreaLinkageListResp, error)
	IndustryList(ctx context.Context) (*vo.IndustryListResp, error)
	OrganizationInfo(ctx context.Context, input vo.OrganizationInfoReq) (*vo.OrganizationInfoResp, error)
	ExportIssueTemplate(ctx context.Context, projectID int64, tableID string) (*vo.ExportIssueTemplateResp, error)
	OrgUserList(ctx context.Context, page *int, size *int, input vo.OrgUserListReq) (*vo.UserOrganizationList, error)
	ExportData(ctx context.Context, projectID int64, iterationID *int64, tableID string, isNeedDocument *bool) (*vo.ExportIssueTemplateResp, error)
	ProjectResource(ctx context.Context, page *int, size *int, params vo.ProjectResourceReq) (*vo.ResourceList, error)
	ProjectFolder(ctx context.Context, page *int, size *int, params vo.ProjectFolderReq) (*vo.FolderList, error)
	ProjectAttachment(ctx context.Context, page *int, size *int, params vo.ProjectAttachmentReq) (*vo.AttachmentList, error)
	ProjectAttachmentInfo(ctx context.Context, input vo.ProjectAttachmentInfoReq) (*vo.Attachment, error)
	GetPersonalPermissionInfo(ctx context.Context, projectID *int64, issueID *int64) (*vo.GetPersonalPermissionInfoResp, error)
	RecycleBinList(ctx context.Context, page *int, size *int, params vo.RecycleBinListReq) (*vo.RecycleBinList, error)
	PayLimitNum(ctx context.Context) (*vo.PayLimitNumResp, error)
	GetIssueWorkHoursInfo(ctx context.Context, params vo.GetIssueWorkHoursInfoReq) (*vo.GetIssueWorkHoursInfoResp, error)
	GetWorkHourStatistic(ctx context.Context, params vo.GetWorkHourStatisticReq) (*vo.GetWorkHourStatisticResp, error)
	CheckIsIssueMember(ctx context.Context, params vo.CheckIsIssueMemberReq) (*vo.BoolResp, error)
	CheckIsEnableWorkHour(ctx context.Context, params vo.CheckIsEnableWorkHourReq) (*vo.CheckIsEnableWorkHourResp, error)
	ExportWorkHourStatistic(ctx context.Context, params vo.GetWorkHourStatisticReq) (*vo.ExportWorkHourStatisticResp, error)
	GetProjectMainChatID(ctx context.Context, params vo.GetProjectMainChatIDReq) (*vo.GetProjectMainChatIDResp, error)
	GetFsProjectChatPushSettings(ctx context.Context, params vo.GetFsProjectChatPushSettingsReq) (*vo.GetFsProjectChatPushSettingsResp, error)
	ProjectMemberIDList(ctx context.Context, params vo.ProjectMemberIDListReq) (*vo.ProjectMemberIDListResp, error)
	GetAppTicket(ctx context.Context) (*vo.GetAppTicketResp, error)
	GetIssueViewList(ctx context.Context, params vo.GetIssueViewListReq) (*vo.GetIssueViewListResp, error)
	CheckSpecificScope(ctx context.Context, params vo.CheckSpecificScopeReq) (*vo.CheckSpecificScopeResp, error)
	CheckTokenValidity(ctx context.Context) (*vo.CheckTokenValidityResp, error)
	GetJsAPITicket(ctx context.Context) (*vo.GetJsAPITicketResp, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ActualListItem.actualWorkHourDateList":
		if e.complexity.ActualListItem.ActualWorkHourDateList == nil {
			break
		}

		return e.complexity.ActualListItem.ActualWorkHourDateList(childComplexity), true

	case "ActualListItem.name":
		if e.complexity.ActualListItem.Name == nil {
			break
		}

		return e.complexity.ActualListItem.Name(childComplexity), true

	case "ActualWorkHourDateItem.date":
		if e.complexity.ActualWorkHourDateItem.Date == nil {
			break
		}

		return e.complexity.ActualWorkHourDateItem.Date(childComplexity), true

	case "ActualWorkHourDateItem.workHour":
		if e.complexity.ActualWorkHourDateItem.WorkHour == nil {
			break
		}

		return e.complexity.ActualWorkHourDateItem.WorkHour(childComplexity), true

	case "AddIssueAttachmentFsResp.resources":
		if e.complexity.AddIssueAttachmentFsResp.Resources == nil {
			break
		}

		return e.complexity.AddIssueAttachmentFsResp.Resources(childComplexity), true

	case "AppInfo.checkStatus":
		if e.complexity.AppInfo.CheckStatus == nil {
			break
		}

		return e.complexity.AppInfo.CheckStatus(childComplexity), true

	case "AppInfo.code":
		if e.complexity.AppInfo.Code == nil {
			break
		}

		return e.complexity.AppInfo.Code(childComplexity), true

	case "AppInfo.createTime":
		if e.complexity.AppInfo.CreateTime == nil {
			break
		}

		return e.complexity.AppInfo.CreateTime(childComplexity), true

	case "AppInfo.creator":
		if e.complexity.AppInfo.Creator == nil {
			break
		}

		return e.complexity.AppInfo.Creator(childComplexity), true

	case "AppInfo.id":
		if e.complexity.AppInfo.ID == nil {
			break
		}

		return e.complexity.AppInfo.ID(childComplexity), true

	case "AppInfo.isDelete":
		if e.complexity.AppInfo.IsDelete == nil {
			break
		}

		return e.complexity.AppInfo.IsDelete(childComplexity), true

	case "AppInfo.name":
		if e.complexity.AppInfo.Name == nil {
			break
		}

		return e.complexity.AppInfo.Name(childComplexity), true

	case "AppInfo.owner":
		if e.complexity.AppInfo.Owner == nil {
			break
		}

		return e.complexity.AppInfo.Owner(childComplexity), true

	case "AppInfo.secret1":
		if e.complexity.AppInfo.Secret1 == nil {
			break
		}

		return e.complexity.AppInfo.Secret1(childComplexity), true

	case "AppInfo.secret2":
		if e.complexity.AppInfo.Secret2 == nil {
			break
		}

		return e.complexity.AppInfo.Secret2(childComplexity), true

	case "AppInfo.status":
		if e.complexity.AppInfo.Status == nil {
			break
		}

		return e.complexity.AppInfo.Status(childComplexity), true

	case "AppInfo.updateTime":
		if e.complexity.AppInfo.UpdateTime == nil {
			break
		}

		return e.complexity.AppInfo.UpdateTime(childComplexity), true

	case "AppInfo.updator":
		if e.complexity.AppInfo.Updator == nil {
			break
		}

		return e.complexity.AppInfo.Updator(childComplexity), true

	case "AppInfo.version":
		if e.complexity.AppInfo.Version == nil {
			break
		}

		return e.complexity.AppInfo.Version(childComplexity), true

	case "AppInfoList.list":
		if e.complexity.AppInfoList.List == nil {
			break
		}

		return e.complexity.AppInfoList.List(childComplexity), true

	case "AppInfoList.total":
		if e.complexity.AppInfoList.Total == nil {
			break
		}

		return e.complexity.AppInfoList.Total(childComplexity), true

	case "ApplyScopesResp.thirdCode":
		if e.complexity.ApplyScopesResp.ThirdCode == nil {
			break
		}

		return e.complexity.ApplyScopesResp.ThirdCode(childComplexity), true

	case "ApplyScopesResp.thirdMsg":
		if e.complexity.ApplyScopesResp.ThirdMsg == nil {
			break
		}

		return e.complexity.ApplyScopesResp.ThirdMsg(childComplexity), true

	case "ArchiveIssueBatchResp.noAuthIssues":
		if e.complexity.ArchiveIssueBatchResp.NoAuthIssues == nil {
			break
		}

		return e.complexity.ArchiveIssueBatchResp.NoAuthIssues(childComplexity), true

	case "ArchiveIssueBatchResp.successIssues":
		if e.complexity.ArchiveIssueBatchResp.SuccessIssues == nil {
			break
		}

		return e.complexity.ArchiveIssueBatchResp.SuccessIssues(childComplexity), true

	case "AreaLinkageListResp.list":
		if e.complexity.AreaLinkageListResp.List == nil {
			break
		}

		return e.complexity.AreaLinkageListResp.List(childComplexity), true

	case "AreaLinkageResp.cname":
		if e.complexity.AreaLinkageResp.Cname == nil {
			break
		}

		return e.complexity.AreaLinkageResp.Cname(childComplexity), true

	case "AreaLinkageResp.code":
		if e.complexity.AreaLinkageResp.Code == nil {
			break
		}

		return e.complexity.AreaLinkageResp.Code(childComplexity), true

	case "AreaLinkageResp.id":
		if e.complexity.AreaLinkageResp.ID == nil {
			break
		}

		return e.complexity.AreaLinkageResp.ID(childComplexity), true

	case "AreaLinkageResp.isDefault":
		if e.complexity.AreaLinkageResp.IsDefault == nil {
			break
		}

		return e.complexity.AreaLinkageResp.IsDefault(childComplexity), true

	case "AreaLinkageResp.name":
		if e.complexity.AreaLinkageResp.Name == nil {
			break
		}

		return e.complexity.AreaLinkageResp.Name(childComplexity), true

	case "Attachment.createTime":
		if e.complexity.Attachment.CreateTime == nil {
			break
		}

		return e.complexity.Attachment.CreateTime(childComplexity), true

	case "Attachment.creator":
		if e.complexity.Attachment.Creator == nil {
			break
		}

		return e.complexity.Attachment.Creator(childComplexity), true

	case "Attachment.creatorName":
		if e.complexity.Attachment.CreatorName == nil {
			break
		}

		return e.complexity.Attachment.CreatorName(childComplexity), true

	case "Attachment.fileType":
		if e.complexity.Attachment.FileType == nil {
			break
		}

		return e.complexity.Attachment.FileType(childComplexity), true

	case "Attachment.host":
		if e.complexity.Attachment.Host == nil {
			break
		}

		return e.complexity.Attachment.Host(childComplexity), true

	case "Attachment.id":
		if e.complexity.Attachment.ID == nil {
			break
		}

		return e.complexity.Attachment.ID(childComplexity), true

	case "Attachment.isDelete":
		if e.complexity.Attachment.IsDelete == nil {
			break
		}

		return e.complexity.Attachment.IsDelete(childComplexity), true

	case "Attachment.issueList":
		if e.complexity.Attachment.IssueList == nil {
			break
		}

		return e.complexity.Attachment.IssueList(childComplexity), true

	case "Attachment.md5":
		if e.complexity.Attachment.Md5 == nil {
			break
		}

		return e.complexity.Attachment.Md5(childComplexity), true

	case "Attachment.name":
		if e.complexity.Attachment.Name == nil {
			break
		}

		return e.complexity.Attachment.Name(childComplexity), true

	case "Attachment.officeUrl":
		if e.complexity.Attachment.OfficeURL == nil {
			break
		}

		return e.complexity.Attachment.OfficeURL(childComplexity), true

	case "Attachment.orgId":
		if e.complexity.Attachment.OrgID == nil {
			break
		}

		return e.complexity.Attachment.OrgID(childComplexity), true

	case "Attachment.path":
		if e.complexity.Attachment.Path == nil {
			break
		}

		return e.complexity.Attachment.Path(childComplexity), true

	case "Attachment.pathCompressed":
		if e.complexity.Attachment.PathCompressed == nil {
			break
		}

		return e.complexity.Attachment.PathCompressed(childComplexity), true

	case "Attachment.size":
		if e.complexity.Attachment.Size == nil {
			break
		}

		return e.complexity.Attachment.Size(childComplexity), true

	case "Attachment.suffix":
		if e.complexity.Attachment.Suffix == nil {
			break
		}

		return e.complexity.Attachment.Suffix(childComplexity), true

	case "Attachment.type":
		if e.complexity.Attachment.Type == nil {
			break
		}

		return e.complexity.Attachment.Type(childComplexity), true

	case "Attachment.updateTime":
		if e.complexity.Attachment.UpdateTime == nil {
			break
		}

		return e.complexity.Attachment.UpdateTime(childComplexity), true

	case "Attachment.updator":
		if e.complexity.Attachment.Updator == nil {
			break
		}

		return e.complexity.Attachment.Updator(childComplexity), true

	case "Attachment.version":
		if e.complexity.Attachment.Version == nil {
			break
		}

		return e.complexity.Attachment.Version(childComplexity), true

	case "AttachmentList.list":
		if e.complexity.AttachmentList.List == nil {
			break
		}

		return e.complexity.AttachmentList.List(childComplexity), true

	case "AttachmentList.total":
		if e.complexity.AttachmentList.Total == nil {
			break
		}

		return e.complexity.AttachmentList.Total(childComplexity), true

	case "BasicShowSetting.mirrorStat":
		if e.complexity.BasicShowSetting.MirrorStat == nil {
			break
		}

		return e.complexity.BasicShowSetting.MirrorStat(childComplexity), true

	case "BasicShowSetting.sideBarShow":
		if e.complexity.BasicShowSetting.SideBarShow == nil {
			break
		}

		return e.complexity.BasicShowSetting.SideBarShow(childComplexity), true

	case "BasicShowSetting.workBenchShow":
		if e.complexity.BasicShowSetting.WorkBenchShow == nil {
			break
		}

		return e.complexity.BasicShowSetting.WorkBenchShow(childComplexity), true

	case "BoolResp.isTrue":
		if e.complexity.BoolResp.IsTrue == nil {
			break
		}

		return e.complexity.BoolResp.IsTrue(childComplexity), true

	case "BuildInfoDefine.buildGoVersion":
		if e.complexity.BuildInfoDefine.BuildGoVersion == nil {
			break
		}

		return e.complexity.BuildInfoDefine.BuildGoVersion(childComplexity), true

	case "BuildInfoDefine.buildTime":
		if e.complexity.BuildInfoDefine.BuildTime == nil {
			break
		}

		return e.complexity.BuildInfoDefine.BuildTime(childComplexity), true

	case "BuildInfoDefine.gitCommitLog":
		if e.complexity.BuildInfoDefine.GitCommitLog == nil {
			break
		}

		return e.complexity.BuildInfoDefine.GitCommitLog(childComplexity), true

	case "BuildInfoDefine.gitStatus":
		if e.complexity.BuildInfoDefine.GitStatus == nil {
			break
		}

		return e.complexity.BuildInfoDefine.GitStatus(childComplexity), true

	case "ChangeList.field":
		if e.complexity.ChangeList.Field == nil {
			break
		}

		return e.complexity.ChangeList.Field(childComplexity), true

	case "ChangeList.fieldName":
		if e.complexity.ChangeList.FieldName == nil {
			break
		}

		return e.complexity.ChangeList.FieldName(childComplexity), true

	case "ChangeList.newValue":
		if e.complexity.ChangeList.NewValue == nil {
			break
		}

		return e.complexity.ChangeList.NewValue(childComplexity), true

	case "ChangeList.oldValue":
		if e.complexity.ChangeList.OldValue == nil {
			break
		}

		return e.complexity.ChangeList.OldValue(childComplexity), true

	case "ChatData.avatar":
		if e.complexity.ChatData.Avatar == nil {
			break
		}

		return e.complexity.ChatData.Avatar(childComplexity), true

	case "ChatData.description":
		if e.complexity.ChatData.Description == nil {
			break
		}

		return e.complexity.ChatData.Description(childComplexity), true

	case "ChatData.isMain":
		if e.complexity.ChatData.IsMain == nil {
			break
		}

		return e.complexity.ChatData.IsMain(childComplexity), true

	case "ChatData.name":
		if e.complexity.ChatData.Name == nil {
			break
		}

		return e.complexity.ChatData.Name(childComplexity), true

	case "ChatData.outChatId":
		if e.complexity.ChatData.OutChatID == nil {
			break
		}

		return e.complexity.ChatData.OutChatID(childComplexity), true

	case "ChatData.relationId":
		if e.complexity.ChatData.RelationID == nil {
			break
		}

		return e.complexity.ChatData.RelationID(childComplexity), true

	case "CheckIsEnableWorkHourResp.isEnable":
		if e.complexity.CheckIsEnableWorkHourResp.IsEnable == nil {
			break
		}

		return e.complexity.CheckIsEnableWorkHourResp.IsEnable(childComplexity), true

	case "CheckSpecificScopeResp.hasPower":
		if e.complexity.CheckSpecificScopeResp.HasPower == nil {
			break
		}

		return e.complexity.CheckSpecificScopeResp.HasPower(childComplexity), true

	case "CheckTokenValidityResp.id":
		if e.complexity.CheckTokenValidityResp.ID == nil {
			break
		}

		return e.complexity.CheckTokenValidityResp.ID(childComplexity), true

	case "CheckTokenValidityResp.orgId":
		if e.complexity.CheckTokenValidityResp.OrgID == nil {
			break
		}

		return e.complexity.CheckTokenValidityResp.OrgID(childComplexity), true

	case "CustomValue.fieldType":
		if e.complexity.CustomValue.FieldType == nil {
			break
		}

		return e.complexity.CustomValue.FieldType(childComplexity), true

	case "CustomValue.fieldValue":
		if e.complexity.CustomValue.FieldValue == nil {
			break
		}

		return e.complexity.CustomValue.FieldValue(childComplexity), true

	case "CustomValue.id":
		if e.complexity.CustomValue.ID == nil {
			break
		}

		return e.complexity.CustomValue.ID(childComplexity), true

	case "CustomValue.isOrgField":
		if e.complexity.CustomValue.IsOrgField == nil {
			break
		}

		return e.complexity.CustomValue.IsOrgField(childComplexity), true

	case "CustomValue.name":
		if e.complexity.CustomValue.Name == nil {
			break
		}

		return e.complexity.CustomValue.Name(childComplexity), true

	case "CustomValue.remark":
		if e.complexity.CustomValue.Remark == nil {
			break
		}

		return e.complexity.CustomValue.Remark(childComplexity), true

	case "CustomValue.status":
		if e.complexity.CustomValue.Status == nil {
			break
		}

		return e.complexity.CustomValue.Status(childComplexity), true

	case "CustomValue.title":
		if e.complexity.CustomValue.Title == nil {
			break
		}

		return e.complexity.CustomValue.Title(childComplexity), true

	case "CustomValue.value":
		if e.complexity.CustomValue.Value == nil {
			break
		}

		return e.complexity.CustomValue.Value(childComplexity), true

	case "DeleteIssueBatchResp.noAuthIssues":
		if e.complexity.DeleteIssueBatchResp.NoAuthIssues == nil {
			break
		}

		return e.complexity.DeleteIssueBatchResp.NoAuthIssues(childComplexity), true

	case "DeleteIssueBatchResp.remainChildrenIssues":
		if e.complexity.DeleteIssueBatchResp.RemainChildrenIssues == nil {
			break
		}

		return e.complexity.DeleteIssueBatchResp.RemainChildrenIssues(childComplexity), true

	case "DeleteIssueBatchResp.successIssues":
		if e.complexity.DeleteIssueBatchResp.SuccessIssues == nil {
			break
		}

		return e.complexity.DeleteIssueBatchResp.SuccessIssues(childComplexity), true

	case "DeleteProjectAttachmentResp.resourceIds":
		if e.complexity.DeleteProjectAttachmentResp.ResourceIds == nil {
			break
		}

		return e.complexity.DeleteProjectAttachmentResp.ResourceIds(childComplexity), true

	case "DeleteProjectFolderResp.folderIds":
		if e.complexity.DeleteProjectFolderResp.FolderIds == nil {
			break
		}

		return e.complexity.DeleteProjectFolderResp.FolderIds(childComplexity), true

	case "DeleteProjectResourceResp.resourceIds":
		if e.complexity.DeleteProjectResourceResp.ResourceIds == nil {
			break
		}

		return e.complexity.DeleteProjectResourceResp.ResourceIds(childComplexity), true

	case "Department.code":
		if e.complexity.Department.Code == nil {
			break
		}

		return e.complexity.Department.Code(childComplexity), true

	case "Department.createTime":
		if e.complexity.Department.CreateTime == nil {
			break
		}

		return e.complexity.Department.CreateTime(childComplexity), true

	case "Department.creator":
		if e.complexity.Department.Creator == nil {
			break
		}

		return e.complexity.Department.Creator(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.isHide":
		if e.complexity.Department.IsHide == nil {
			break
		}

		return e.complexity.Department.IsHide(childComplexity), true

	case "Department.name":
		if e.complexity.Department.Name == nil {
			break
		}

		return e.complexity.Department.Name(childComplexity), true

	case "Department.orgId":
		if e.complexity.Department.OrgID == nil {
			break
		}

		return e.complexity.Department.OrgID(childComplexity), true

	case "Department.parentId":
		if e.complexity.Department.ParentID == nil {
			break
		}

		return e.complexity.Department.ParentID(childComplexity), true

	case "Department.sort":
		if e.complexity.Department.Sort == nil {
			break
		}

		return e.complexity.Department.Sort(childComplexity), true

	case "Department.sourceChannel":
		if e.complexity.Department.SourceChannel == nil {
			break
		}

		return e.complexity.Department.SourceChannel(childComplexity), true

	case "Department.status":
		if e.complexity.Department.Status == nil {
			break
		}

		return e.complexity.Department.Status(childComplexity), true

	case "DepartmentList.list":
		if e.complexity.DepartmentList.List == nil {
			break
		}

		return e.complexity.DepartmentList.List(childComplexity), true

	case "DepartmentList.total":
		if e.complexity.DepartmentList.Total == nil {
			break
		}

		return e.complexity.DepartmentList.Total(childComplexity), true

	case "DepartmentMemberInfo.avatar":
		if e.complexity.DepartmentMemberInfo.Avatar == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.Avatar(childComplexity), true

	case "DepartmentMemberInfo.departmentId":
		if e.complexity.DepartmentMemberInfo.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.DepartmentID(childComplexity), true

	case "DepartmentMemberInfo.emplId":
		if e.complexity.DepartmentMemberInfo.EmplID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.EmplID(childComplexity), true

	case "DepartmentMemberInfo.name":
		if e.complexity.DepartmentMemberInfo.Name == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.Name(childComplexity), true

	case "DepartmentMemberInfo.namePy":
		if e.complexity.DepartmentMemberInfo.NamePy == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.NamePy(childComplexity), true

	case "DepartmentMemberInfo.orgUserStatus":
		if e.complexity.DepartmentMemberInfo.OrgUserStatus == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.OrgUserStatus(childComplexity), true

	case "DepartmentMemberInfo.unionId":
		if e.complexity.DepartmentMemberInfo.UnionID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.UnionID(childComplexity), true

	case "DepartmentMemberInfo.userId":
		if e.complexity.DepartmentMemberInfo.UserID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.UserID(childComplexity), true

	case "DepartmentMembersListResp.list":
		if e.complexity.DepartmentMembersListResp.List == nil {
			break
		}

		return e.complexity.DepartmentMembersListResp.List(childComplexity), true

	case "DepartmentMembersListResp.total":
		if e.complexity.DepartmentMembersListResp.Total == nil {
			break
		}

		return e.complexity.DepartmentMembersListResp.Total(childComplexity), true

	case "DepartmentSimpleInfo.id":
		if e.complexity.DepartmentSimpleInfo.ID == nil {
			break
		}

		return e.complexity.DepartmentSimpleInfo.ID(childComplexity), true

	case "DepartmentSimpleInfo.name":
		if e.complexity.DepartmentSimpleInfo.Name == nil {
			break
		}

		return e.complexity.DepartmentSimpleInfo.Name(childComplexity), true

	case "DepartmentSimpleInfo.userCount":
		if e.complexity.DepartmentSimpleInfo.UserCount == nil {
			break
		}

		return e.complexity.DepartmentSimpleInfo.UserCount(childComplexity), true

	case "ExportIssueTemplateResp.url":
		if e.complexity.ExportIssueTemplateResp.URL == nil {
			break
		}

		return e.complexity.ExportIssueTemplateResp.URL(childComplexity), true

	case "ExportWorkHourStatisticResp.url":
		if e.complexity.ExportWorkHourStatisticResp.URL == nil {
			break
		}

		return e.complexity.ExportWorkHourStatisticResp.URL(childComplexity), true

	case "FeiShuAuthCodeResp.accessToken":
		if e.complexity.FeiShuAuthCodeResp.AccessToken == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.AccessToken(childComplexity), true

	case "FeiShuAuthCodeResp.binding":
		if e.complexity.FeiShuAuthCodeResp.Binding == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.Binding(childComplexity), true

	case "FeiShuAuthCodeResp.codeToken":
		if e.complexity.FeiShuAuthCodeResp.CodeToken == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.CodeToken(childComplexity), true

	case "FeiShuAuthCodeResp.isAdmin":
		if e.complexity.FeiShuAuthCodeResp.IsAdmin == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.IsAdmin(childComplexity), true

	case "FeiShuAuthCodeResp.name":
		if e.complexity.FeiShuAuthCodeResp.Name == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.Name(childComplexity), true

	case "FeiShuAuthCodeResp.openId":
		if e.complexity.FeiShuAuthCodeResp.OpenID == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.OpenID(childComplexity), true

	case "FeiShuAuthCodeResp.orgCode":
		if e.complexity.FeiShuAuthCodeResp.OrgCode == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.OrgCode(childComplexity), true

	case "FeiShuAuthCodeResp.orgId":
		if e.complexity.FeiShuAuthCodeResp.OrgID == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.OrgID(childComplexity), true

	case "FeiShuAuthCodeResp.orgName":
		if e.complexity.FeiShuAuthCodeResp.OrgName == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.OrgName(childComplexity), true

	case "FeiShuAuthCodeResp.outOrgName":
		if e.complexity.FeiShuAuthCodeResp.OutOrgName == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.OutOrgName(childComplexity), true

	case "FeiShuAuthCodeResp.refreshToken":
		if e.complexity.FeiShuAuthCodeResp.RefreshToken == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.RefreshToken(childComplexity), true

	case "FeiShuAuthCodeResp.tenantKey":
		if e.complexity.FeiShuAuthCodeResp.TenantKey == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.TenantKey(childComplexity), true

	case "FeiShuAuthCodeResp.token":
		if e.complexity.FeiShuAuthCodeResp.Token == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.Token(childComplexity), true

	case "FeiShuAuthCodeResp.userId":
		if e.complexity.FeiShuAuthCodeResp.UserID == nil {
			break
		}

		return e.complexity.FeiShuAuthCodeResp.UserID(childComplexity), true

	case "FeiShuAuthResp.isAdmin":
		if e.complexity.FeiShuAuthResp.IsAdmin == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.IsAdmin(childComplexity), true

	case "FeiShuAuthResp.name":
		if e.complexity.FeiShuAuthResp.Name == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.Name(childComplexity), true

	case "FeiShuAuthResp.openId":
		if e.complexity.FeiShuAuthResp.OpenID == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OpenID(childComplexity), true

	case "FeiShuAuthResp.orgCode":
		if e.complexity.FeiShuAuthResp.OrgCode == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OrgCode(childComplexity), true

	case "FeiShuAuthResp.orgId":
		if e.complexity.FeiShuAuthResp.OrgID == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OrgID(childComplexity), true

	case "FeiShuAuthResp.orgName":
		if e.complexity.FeiShuAuthResp.OrgName == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OrgName(childComplexity), true

	case "FeiShuAuthResp.tenantKey":
		if e.complexity.FeiShuAuthResp.TenantKey == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.TenantKey(childComplexity), true

	case "FeiShuAuthResp.token":
		if e.complexity.FeiShuAuthResp.Token == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.Token(childComplexity), true

	case "FeiShuAuthResp.userId":
		if e.complexity.FeiShuAuthResp.UserID == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.UserID(childComplexity), true

	case "Folder.createTime":
		if e.complexity.Folder.CreateTime == nil {
			break
		}

		return e.complexity.Folder.CreateTime(childComplexity), true

	case "Folder.creator":
		if e.complexity.Folder.Creator == nil {
			break
		}

		return e.complexity.Folder.Creator(childComplexity), true

	case "Folder.creatorName":
		if e.complexity.Folder.CreatorName == nil {
			break
		}

		return e.complexity.Folder.CreatorName(childComplexity), true

	case "Folder.fileType":
		if e.complexity.Folder.FileType == nil {
			break
		}

		return e.complexity.Folder.FileType(childComplexity), true

	case "Folder.id":
		if e.complexity.Folder.ID == nil {
			break
		}

		return e.complexity.Folder.ID(childComplexity), true

	case "Folder.isDelete":
		if e.complexity.Folder.IsDelete == nil {
			break
		}

		return e.complexity.Folder.IsDelete(childComplexity), true

	case "Folder.name":
		if e.complexity.Folder.Name == nil {
			break
		}

		return e.complexity.Folder.Name(childComplexity), true

	case "Folder.orgId":
		if e.complexity.Folder.OrgID == nil {
			break
		}

		return e.complexity.Folder.OrgID(childComplexity), true

	case "Folder.parentId":
		if e.complexity.Folder.ParentID == nil {
			break
		}

		return e.complexity.Folder.ParentID(childComplexity), true

	case "Folder.path":
		if e.complexity.Folder.Path == nil {
			break
		}

		return e.complexity.Folder.Path(childComplexity), true

	case "Folder.projectId":
		if e.complexity.Folder.ProjectID == nil {
			break
		}

		return e.complexity.Folder.ProjectID(childComplexity), true

	case "Folder.updateTime":
		if e.complexity.Folder.UpdateTime == nil {
			break
		}

		return e.complexity.Folder.UpdateTime(childComplexity), true

	case "Folder.updator":
		if e.complexity.Folder.Updator == nil {
			break
		}

		return e.complexity.Folder.Updator(childComplexity), true

	case "Folder.version":
		if e.complexity.Folder.Version == nil {
			break
		}

		return e.complexity.Folder.Version(childComplexity), true

	case "FolderList.list":
		if e.complexity.FolderList.List == nil {
			break
		}

		return e.complexity.FolderList.List(childComplexity), true

	case "FolderList.total":
		if e.complexity.FolderList.Total == nil {
			break
		}

		return e.complexity.FolderList.Total(childComplexity), true

	case "GetAppTicketResp.appId":
		if e.complexity.GetAppTicketResp.AppID == nil {
			break
		}

		return e.complexity.GetAppTicketResp.AppID(childComplexity), true

	case "GetAppTicketResp.appSecret":
		if e.complexity.GetAppTicketResp.AppSecret == nil {
			break
		}

		return e.complexity.GetAppTicketResp.AppSecret(childComplexity), true

	case "GetExportFieldsResp.fields":
		if e.complexity.GetExportFieldsResp.Fields == nil {
			break
		}

		return e.complexity.GetExportFieldsResp.Fields(childComplexity), true

	case "GetExportFieldsRespFieldsItem.defineType":
		if e.complexity.GetExportFieldsRespFieldsItem.DefineType == nil {
			break
		}

		return e.complexity.GetExportFieldsRespFieldsItem.DefineType(childComplexity), true

	case "GetExportFieldsRespFieldsItem.fieldId":
		if e.complexity.GetExportFieldsRespFieldsItem.FieldID == nil {
			break
		}

		return e.complexity.GetExportFieldsRespFieldsItem.FieldID(childComplexity), true

	case "GetExportFieldsRespFieldsItem.isMust":
		if e.complexity.GetExportFieldsRespFieldsItem.IsMust == nil {
			break
		}

		return e.complexity.GetExportFieldsRespFieldsItem.IsMust(childComplexity), true

	case "GetExportFieldsRespFieldsItem.name":
		if e.complexity.GetExportFieldsRespFieldsItem.Name == nil {
			break
		}

		return e.complexity.GetExportFieldsRespFieldsItem.Name(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChat.createIssue":
		if e.complexity.GetFsProjectChatPushSettingsOneChat.CreateIssue == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChat.CreateIssue(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChat.createIssueComment":
		if e.complexity.GetFsProjectChatPushSettingsOneChat.CreateIssueComment == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChat.CreateIssueComment(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChat.modifyColumnsOfSend":
		if e.complexity.GetFsProjectChatPushSettingsOneChat.ModifyColumnsOfSend == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChat.ModifyColumnsOfSend(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChat.tables":
		if e.complexity.GetFsProjectChatPushSettingsOneChat.Tables == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChat.Tables(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChat.updateIssueCase":
		if e.complexity.GetFsProjectChatPushSettingsOneChat.UpdateIssueCase == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChat.UpdateIssueCase(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChatTables.projectId":
		if e.complexity.GetFsProjectChatPushSettingsOneChatTables.ProjectID == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChatTables.ProjectID(childComplexity), true

	case "GetFsProjectChatPushSettingsOneChatTables.tableId":
		if e.complexity.GetFsProjectChatPushSettingsOneChatTables.TableID == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneChatTables.TableID(childComplexity), true

	case "GetFsProjectChatPushSettingsOneProOneTable.createIssue":
		if e.complexity.GetFsProjectChatPushSettingsOneProOneTable.CreateIssue == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneProOneTable.CreateIssue(childComplexity), true

	case "GetFsProjectChatPushSettingsOneProOneTable.createIssueComment":
		if e.complexity.GetFsProjectChatPushSettingsOneProOneTable.CreateIssueComment == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneProOneTable.CreateIssueComment(childComplexity), true

	case "GetFsProjectChatPushSettingsOneProOneTable.modifyColumnsOfSend":
		if e.complexity.GetFsProjectChatPushSettingsOneProOneTable.ModifyColumnsOfSend == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneProOneTable.ModifyColumnsOfSend(childComplexity), true

	case "GetFsProjectChatPushSettingsOneProOneTable.tableIdStr":
		if e.complexity.GetFsProjectChatPushSettingsOneProOneTable.TableIDStr == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneProOneTable.TableIDStr(childComplexity), true

	case "GetFsProjectChatPushSettingsOneProOneTable.updateIssueCase":
		if e.complexity.GetFsProjectChatPushSettingsOneProOneTable.UpdateIssueCase == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsOneProOneTable.UpdateIssueCase(childComplexity), true

	case "GetFsProjectChatPushSettingsResp.outChatSettings":
		if e.complexity.GetFsProjectChatPushSettingsResp.OutChatSettings == nil {
			break
		}

		return e.complexity.GetFsProjectChatPushSettingsResp.OutChatSettings(childComplexity), true

	case "GetInviteCodeResp.expire":
		if e.complexity.GetInviteCodeResp.Expire == nil {
			break
		}

		return e.complexity.GetInviteCodeResp.Expire(childComplexity), true

	case "GetInviteCodeResp.inviteCode":
		if e.complexity.GetInviteCodeResp.InviteCode == nil {
			break
		}

		return e.complexity.GetInviteCodeResp.InviteCode(childComplexity), true

	case "GetInviteInfoResp.inviterId":
		if e.complexity.GetInviteInfoResp.InviterID == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.InviterID(childComplexity), true

	case "GetInviteInfoResp.inviterName":
		if e.complexity.GetInviteInfoResp.InviterName == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.InviterName(childComplexity), true

	case "GetInviteInfoResp.orgId":
		if e.complexity.GetInviteInfoResp.OrgID == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.OrgID(childComplexity), true

	case "GetInviteInfoResp.orgName":
		if e.complexity.GetInviteInfoResp.OrgName == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.OrgName(childComplexity), true

	case "GetIssueViewListItem.config":
		if e.complexity.GetIssueViewListItem.Config == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.Config(childComplexity), true

	case "GetIssueViewListItem.id":
		if e.complexity.GetIssueViewListItem.ID == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.ID(childComplexity), true

	case "GetIssueViewListItem.isPrivate":
		if e.complexity.GetIssueViewListItem.IsPrivate == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.IsPrivate(childComplexity), true

	case "GetIssueViewListItem.projectId":
		if e.complexity.GetIssueViewListItem.ProjectID == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.ProjectID(childComplexity), true

	case "GetIssueViewListItem.projectObjectTypeId":
		if e.complexity.GetIssueViewListItem.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.ProjectObjectTypeID(childComplexity), true

	case "GetIssueViewListItem.remark":
		if e.complexity.GetIssueViewListItem.Remark == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.Remark(childComplexity), true

	case "GetIssueViewListItem.sort":
		if e.complexity.GetIssueViewListItem.Sort == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.Sort(childComplexity), true

	case "GetIssueViewListItem.type":
		if e.complexity.GetIssueViewListItem.Type == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.Type(childComplexity), true

	case "GetIssueViewListItem.viewName":
		if e.complexity.GetIssueViewListItem.ViewName == nil {
			break
		}

		return e.complexity.GetIssueViewListItem.ViewName(childComplexity), true

	case "GetIssueWorkHoursInfoResp.actualNeedTimeTotal":
		if e.complexity.GetIssueWorkHoursInfoResp.ActualNeedTimeTotal == nil {
			break
		}

		return e.complexity.GetIssueWorkHoursInfoResp.ActualNeedTimeTotal(childComplexity), true

	case "GetIssueWorkHoursInfoResp.actualWorkHourList":
		if e.complexity.GetIssueWorkHoursInfoResp.ActualWorkHourList == nil {
			break
		}

		return e.complexity.GetIssueWorkHoursInfoResp.ActualWorkHourList(childComplexity), true

	case "GetIssueWorkHoursInfoResp.predictWorkHourList":
		if e.complexity.GetIssueWorkHoursInfoResp.PredictWorkHourList == nil {
			break
		}

		return e.complexity.GetIssueWorkHoursInfoResp.PredictWorkHourList(childComplexity), true

	case "GetIssueWorkHoursInfoResp.simplePredictWorkHour":
		if e.complexity.GetIssueWorkHoursInfoResp.SimplePredictWorkHour == nil {
			break
		}

		return e.complexity.GetIssueWorkHoursInfoResp.SimplePredictWorkHour(childComplexity), true

	case "GetJsApiTicketResp.ticket":
		if e.complexity.GetJsAPITicketResp.Ticket == nil {
			break
		}

		return e.complexity.GetJsAPITicketResp.Ticket(childComplexity), true

	case "GetMQTTChannelKeyResp.address":
		if e.complexity.GetMQTTChannelKeyResp.Address == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Address(childComplexity), true

	case "GetMQTTChannelKeyResp.channel":
		if e.complexity.GetMQTTChannelKeyResp.Channel == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Channel(childComplexity), true

	case "GetMQTTChannelKeyResp.host":
		if e.complexity.GetMQTTChannelKeyResp.Host == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Host(childComplexity), true

	case "GetMQTTChannelKeyResp.key":
		if e.complexity.GetMQTTChannelKeyResp.Key == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Key(childComplexity), true

	case "GetMQTTChannelKeyResp.port":
		if e.complexity.GetMQTTChannelKeyResp.Port == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Port(childComplexity), true

	case "GetPayRemindResp.remindPayExpireMsg":
		if e.complexity.GetPayRemindResp.RemindPayExpireMsg == nil {
			break
		}

		return e.complexity.GetPayRemindResp.RemindPayExpireMsg(childComplexity), true

	case "GetPersonalPermissionInfoResp.Data":
		if e.complexity.GetPersonalPermissionInfoResp.Data == nil {
			break
		}

		return e.complexity.GetPersonalPermissionInfoResp.Data(childComplexity), true

	case "GetProjectMainChatIdResp.chatId":
		if e.complexity.GetProjectMainChatIDResp.ChatID == nil {
			break
		}

		return e.complexity.GetProjectMainChatIDResp.ChatID(childComplexity), true

	case "GetWorkHourStatisticResp.groupStatisticList":
		if e.complexity.GetWorkHourStatisticResp.GroupStatisticList == nil {
			break
		}

		return e.complexity.GetWorkHourStatisticResp.GroupStatisticList(childComplexity), true

	case "GetWorkHourStatisticResp.summary":
		if e.complexity.GetWorkHourStatisticResp.Summary == nil {
			break
		}

		return e.complexity.GetWorkHourStatisticResp.Summary(childComplexity), true

	case "GetWorkHourStatisticResp.total":
		if e.complexity.GetWorkHourStatisticResp.Total == nil {
			break
		}

		return e.complexity.GetWorkHourStatisticResp.Total(childComplexity), true

	case "GetWorkHourStatisticSummary.actualTotal":
		if e.complexity.GetWorkHourStatisticSummary.ActualTotal == nil {
			break
		}

		return e.complexity.GetWorkHourStatisticSummary.ActualTotal(childComplexity), true

	case "GetWorkHourStatisticSummary.predictTotal":
		if e.complexity.GetWorkHourStatisticSummary.PredictTotal == nil {
			break
		}

		return e.complexity.GetWorkHourStatisticSummary.PredictTotal(childComplexity), true

	case "HomeIssueGroup.avatar":
		if e.complexity.HomeIssueGroup.Avatar == nil {
			break
		}

		return e.complexity.HomeIssueGroup.Avatar(childComplexity), true

	case "HomeIssueGroup.bgStyle":
		if e.complexity.HomeIssueGroup.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssueGroup.BgStyle(childComplexity), true

	case "HomeIssueGroup.fitTotal":
		if e.complexity.HomeIssueGroup.FitTotal == nil {
			break
		}

		return e.complexity.HomeIssueGroup.FitTotal(childComplexity), true

	case "HomeIssueGroup.fontStyle":
		if e.complexity.HomeIssueGroup.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssueGroup.FontStyle(childComplexity), true

	case "HomeIssueGroup.id":
		if e.complexity.HomeIssueGroup.ID == nil {
			break
		}

		return e.complexity.HomeIssueGroup.ID(childComplexity), true

	case "HomeIssueGroup.list":
		if e.complexity.HomeIssueGroup.List == nil {
			break
		}

		return e.complexity.HomeIssueGroup.List(childComplexity), true

	case "HomeIssueGroup.name":
		if e.complexity.HomeIssueGroup.Name == nil {
			break
		}

		return e.complexity.HomeIssueGroup.Name(childComplexity), true

	case "HomeIssueGroup.timeSpan":
		if e.complexity.HomeIssueGroup.TimeSpan == nil {
			break
		}

		return e.complexity.HomeIssueGroup.TimeSpan(childComplexity), true

	case "HomeIssueInfo.afterIssueIds":
		if e.complexity.HomeIssueInfo.AfterIssueIds == nil {
			break
		}

		return e.complexity.HomeIssueInfo.AfterIssueIds(childComplexity), true

	case "HomeIssueInfo.allStatus":
		if e.complexity.HomeIssueInfo.AllStatus == nil {
			break
		}

		return e.complexity.HomeIssueInfo.AllStatus(childComplexity), true

	case "HomeIssueInfo.auditorsInfo":
		if e.complexity.HomeIssueInfo.AuditorsInfo == nil {
			break
		}

		return e.complexity.HomeIssueInfo.AuditorsInfo(childComplexity), true

	case "HomeIssueInfo.childsFinishedNum":
		if e.complexity.HomeIssueInfo.ChildsFinishedNum == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ChildsFinishedNum(childComplexity), true

	case "HomeIssueInfo.childsNum":
		if e.complexity.HomeIssueInfo.ChildsNum == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ChildsNum(childComplexity), true

	case "HomeIssueInfo.customField":
		if e.complexity.HomeIssueInfo.CustomField == nil {
			break
		}

		return e.complexity.HomeIssueInfo.CustomField(childComplexity), true

	case "HomeIssueInfo.followerInfos":
		if e.complexity.HomeIssueInfo.FollowerInfos == nil {
			break
		}

		return e.complexity.HomeIssueInfo.FollowerInfos(childComplexity), true

	case "HomeIssueInfo.isAttach":
		if e.complexity.HomeIssueInfo.IsAttach == nil {
			break
		}

		return e.complexity.HomeIssueInfo.IsAttach(childComplexity), true

	case "HomeIssueInfo.issue":
		if e.complexity.HomeIssueInfo.Issue == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Issue(childComplexity), true

	case "HomeIssueInfo.issueId":
		if e.complexity.HomeIssueInfo.IssueID == nil {
			break
		}

		return e.complexity.HomeIssueInfo.IssueID(childComplexity), true

	case "HomeIssueInfo.iterationName":
		if e.complexity.HomeIssueInfo.IterationName == nil {
			break
		}

		return e.complexity.HomeIssueInfo.IterationName(childComplexity), true

	case "HomeIssueInfo.lessData":
		if e.complexity.HomeIssueInfo.LessData == nil {
			break
		}

		return e.complexity.HomeIssueInfo.LessData(childComplexity), true

	case "HomeIssueInfo.owner":
		if e.complexity.HomeIssueInfo.Owner == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Owner(childComplexity), true

	case "HomeIssueInfo.parentId":
		if e.complexity.HomeIssueInfo.ParentID == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ParentID(childComplexity), true

	case "HomeIssueInfo.parentInfo":
		if e.complexity.HomeIssueInfo.ParentInfo == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ParentInfo(childComplexity), true

	case "HomeIssueInfo.parentIsMeetCondition":
		if e.complexity.HomeIssueInfo.ParentIsMeetCondition == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ParentIsMeetCondition(childComplexity), true

	case "HomeIssueInfo.priority":
		if e.complexity.HomeIssueInfo.Priority == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Priority(childComplexity), true

	case "HomeIssueInfo.project":
		if e.complexity.HomeIssueInfo.Project == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Project(childComplexity), true

	case "HomeIssueInfo.projectObjectTypeName":
		if e.complexity.HomeIssueInfo.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ProjectObjectTypeName(childComplexity), true

	case "HomeIssueInfo.propertyInfo":
		if e.complexity.HomeIssueInfo.PropertyInfo == nil {
			break
		}

		return e.complexity.HomeIssueInfo.PropertyInfo(childComplexity), true

	case "HomeIssueInfo.relateCommentCount":
		if e.complexity.HomeIssueInfo.RelateCommentCount == nil {
			break
		}

		return e.complexity.HomeIssueInfo.RelateCommentCount(childComplexity), true

	case "HomeIssueInfo.relateIssueCount":
		if e.complexity.HomeIssueInfo.RelateIssueCount == nil {
			break
		}

		return e.complexity.HomeIssueInfo.RelateIssueCount(childComplexity), true

	case "HomeIssueInfo.relateResourceCount":
		if e.complexity.HomeIssueInfo.RelateResourceCount == nil {
			break
		}

		return e.complexity.HomeIssueInfo.RelateResourceCount(childComplexity), true

	case "HomeIssueInfo.sourceInfo":
		if e.complexity.HomeIssueInfo.SourceInfo == nil {
			break
		}

		return e.complexity.HomeIssueInfo.SourceInfo(childComplexity), true

	case "HomeIssueInfo.status":
		if e.complexity.HomeIssueInfo.Status == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Status(childComplexity), true

	case "HomeIssueInfo.tags":
		if e.complexity.HomeIssueInfo.Tags == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Tags(childComplexity), true

	case "HomeIssueInfo.title":
		if e.complexity.HomeIssueInfo.Title == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Title(childComplexity), true

	case "HomeIssueInfo.typeInfo":
		if e.complexity.HomeIssueInfo.TypeInfo == nil {
			break
		}

		return e.complexity.HomeIssueInfo.TypeInfo(childComplexity), true

	case "HomeIssueInfo.workHourInfo":
		if e.complexity.HomeIssueInfo.WorkHourInfo == nil {
			break
		}

		return e.complexity.HomeIssueInfo.WorkHourInfo(childComplexity), true

	case "HomeIssueInfoGroupResp.actualTotal":
		if e.complexity.HomeIssueInfoGroupResp.ActualTotal == nil {
			break
		}

		return e.complexity.HomeIssueInfoGroupResp.ActualTotal(childComplexity), true

	case "HomeIssueInfoGroupResp.group":
		if e.complexity.HomeIssueInfoGroupResp.Group == nil {
			break
		}

		return e.complexity.HomeIssueInfoGroupResp.Group(childComplexity), true

	case "HomeIssueInfoGroupResp.timeSpan":
		if e.complexity.HomeIssueInfoGroupResp.TimeSpan == nil {
			break
		}

		return e.complexity.HomeIssueInfoGroupResp.TimeSpan(childComplexity), true

	case "HomeIssueInfoGroupResp.total":
		if e.complexity.HomeIssueInfoGroupResp.Total == nil {
			break
		}

		return e.complexity.HomeIssueInfoGroupResp.Total(childComplexity), true

	case "HomeIssueInfoResp.actualTotal":
		if e.complexity.HomeIssueInfoResp.ActualTotal == nil {
			break
		}

		return e.complexity.HomeIssueInfoResp.ActualTotal(childComplexity), true

	case "HomeIssueInfoResp.list":
		if e.complexity.HomeIssueInfoResp.List == nil {
			break
		}

		return e.complexity.HomeIssueInfoResp.List(childComplexity), true

	case "HomeIssueInfoResp.total":
		if e.complexity.HomeIssueInfoResp.Total == nil {
			break
		}

		return e.complexity.HomeIssueInfoResp.Total(childComplexity), true

	case "HomeIssueOwnerInfo.avatar":
		if e.complexity.HomeIssueOwnerInfo.Avatar == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.Avatar(childComplexity), true

	case "HomeIssueOwnerInfo.id":
		if e.complexity.HomeIssueOwnerInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.ID(childComplexity), true

	case "HomeIssueOwnerInfo.isDeleted":
		if e.complexity.HomeIssueOwnerInfo.IsDeleted == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.IsDeleted(childComplexity), true

	case "HomeIssueOwnerInfo.isDisabled":
		if e.complexity.HomeIssueOwnerInfo.IsDisabled == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.IsDisabled(childComplexity), true

	case "HomeIssueOwnerInfo.name":
		if e.complexity.HomeIssueOwnerInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.Name(childComplexity), true

	case "HomeIssueOwnerInfo.userId":
		if e.complexity.HomeIssueOwnerInfo.UserID == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.UserID(childComplexity), true

	case "HomeIssuePriorityInfo.bgStyle":
		if e.complexity.HomeIssuePriorityInfo.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.BgStyle(childComplexity), true

	case "HomeIssuePriorityInfo.fontStyle":
		if e.complexity.HomeIssuePriorityInfo.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.FontStyle(childComplexity), true

	case "HomeIssuePriorityInfo.id":
		if e.complexity.HomeIssuePriorityInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.ID(childComplexity), true

	case "HomeIssuePriorityInfo.name":
		if e.complexity.HomeIssuePriorityInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.Name(childComplexity), true

	case "HomeIssueProjectInfo.appId":
		if e.complexity.HomeIssueProjectInfo.AppID == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.AppID(childComplexity), true

	case "HomeIssueProjectInfo.id":
		if e.complexity.HomeIssueProjectInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.ID(childComplexity), true

	case "HomeIssueProjectInfo.isFilling":
		if e.complexity.HomeIssueProjectInfo.IsFilling == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.IsFilling(childComplexity), true

	case "HomeIssueProjectInfo.name":
		if e.complexity.HomeIssueProjectInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.Name(childComplexity), true

	case "HomeIssueProjectInfo.privacyStatus":
		if e.complexity.HomeIssueProjectInfo.PrivacyStatus == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.PrivacyStatus(childComplexity), true

	case "HomeIssueProjectInfo.projectTypeId":
		if e.complexity.HomeIssueProjectInfo.ProjectTypeID == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.ProjectTypeID(childComplexity), true

	case "HomeIssueStatusInfo.bgStyle":
		if e.complexity.HomeIssueStatusInfo.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.BgStyle(childComplexity), true

	case "HomeIssueStatusInfo.displayName":
		if e.complexity.HomeIssueStatusInfo.DisplayName == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.DisplayName(childComplexity), true

	case "HomeIssueStatusInfo.fontStyle":
		if e.complexity.HomeIssueStatusInfo.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.FontStyle(childComplexity), true

	case "HomeIssueStatusInfo.id":
		if e.complexity.HomeIssueStatusInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.ID(childComplexity), true

	case "HomeIssueStatusInfo.name":
		if e.complexity.HomeIssueStatusInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.Name(childComplexity), true

	case "HomeIssueStatusInfo.sort":
		if e.complexity.HomeIssueStatusInfo.Sort == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.Sort(childComplexity), true

	case "HomeIssueStatusInfo.type":
		if e.complexity.HomeIssueStatusInfo.Type == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.Type(childComplexity), true

	case "HomeIssueTagInfo.bgStyle":
		if e.complexity.HomeIssueTagInfo.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.BgStyle(childComplexity), true

	case "HomeIssueTagInfo.fontStyle":
		if e.complexity.HomeIssueTagInfo.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.FontStyle(childComplexity), true

	case "HomeIssueTagInfo.id":
		if e.complexity.HomeIssueTagInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.ID(childComplexity), true

	case "HomeIssueTagInfo.name":
		if e.complexity.HomeIssueTagInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.Name(childComplexity), true

	case "HomeIssueWorkHourInfo.actualList":
		if e.complexity.HomeIssueWorkHourInfo.ActualList == nil {
			break
		}

		return e.complexity.HomeIssueWorkHourInfo.ActualList(childComplexity), true

	case "HomeIssueWorkHourInfo.actualWorkHour":
		if e.complexity.HomeIssueWorkHourInfo.ActualWorkHour == nil {
			break
		}

		return e.complexity.HomeIssueWorkHourInfo.ActualWorkHour(childComplexity), true

	case "HomeIssueWorkHourInfo.predictList":
		if e.complexity.HomeIssueWorkHourInfo.PredictList == nil {
			break
		}

		return e.complexity.HomeIssueWorkHourInfo.PredictList(childComplexity), true

	case "HomeIssueWorkHourInfo.predictWorkHour":
		if e.complexity.HomeIssueWorkHourInfo.PredictWorkHour == nil {
			break
		}

		return e.complexity.HomeIssueWorkHourInfo.PredictWorkHour(childComplexity), true

	case "IndustryListResp.list":
		if e.complexity.IndustryListResp.List == nil {
			break
		}

		return e.complexity.IndustryListResp.List(childComplexity), true

	case "IndustryResp.cname":
		if e.complexity.IndustryResp.Cname == nil {
			break
		}

		return e.complexity.IndustryResp.Cname(childComplexity), true

	case "IndustryResp.id":
		if e.complexity.IndustryResp.ID == nil {
			break
		}

		return e.complexity.IndustryResp.ID(childComplexity), true

	case "IndustryResp.name":
		if e.complexity.IndustryResp.Name == nil {
			break
		}

		return e.complexity.IndustryResp.Name(childComplexity), true

	case "InternalAuthResp.hasPermission":
		if e.complexity.InternalAuthResp.HasPermission == nil {
			break
		}

		return e.complexity.InternalAuthResp.HasPermission(childComplexity), true

	case "InviteUserInfo.email":
		if e.complexity.InviteUserInfo.Email == nil {
			break
		}

		return e.complexity.InviteUserInfo.Email(childComplexity), true

	case "InviteUserInfo.id":
		if e.complexity.InviteUserInfo.ID == nil {
			break
		}

		return e.complexity.InviteUserInfo.ID(childComplexity), true

	case "InviteUserInfo.inviteTime":
		if e.complexity.InviteUserInfo.InviteTime == nil {
			break
		}

		return e.complexity.InviteUserInfo.InviteTime(childComplexity), true

	case "InviteUserInfo.isInvitedRecent":
		if e.complexity.InviteUserInfo.IsInvitedRecent == nil {
			break
		}

		return e.complexity.InviteUserInfo.IsInvitedRecent(childComplexity), true

	case "InviteUserInfo.name":
		if e.complexity.InviteUserInfo.Name == nil {
			break
		}

		return e.complexity.InviteUserInfo.Name(childComplexity), true

	case "InviteUserResp.invalidEmail":
		if e.complexity.InviteUserResp.InvalidEmail == nil {
			break
		}

		return e.complexity.InviteUserResp.InvalidEmail(childComplexity), true

	case "InviteUserResp.invitedEmail":
		if e.complexity.InviteUserResp.InvitedEmail == nil {
			break
		}

		return e.complexity.InviteUserResp.InvitedEmail(childComplexity), true

	case "InviteUserResp.isUserEmail":
		if e.complexity.InviteUserResp.IsUserEmail == nil {
			break
		}

		return e.complexity.InviteUserResp.IsUserEmail(childComplexity), true

	case "InviteUserResp.successEmail":
		if e.complexity.InviteUserResp.SuccessEmail == nil {
			break
		}

		return e.complexity.InviteUserResp.SuccessEmail(childComplexity), true

	case "Issue.auditStatus":
		if e.complexity.Issue.AuditStatus == nil {
			break
		}

		return e.complexity.Issue.AuditStatus(childComplexity), true

	case "Issue.code":
		if e.complexity.Issue.Code == nil {
			break
		}

		return e.complexity.Issue.Code(childComplexity), true

	case "Issue.createTime":
		if e.complexity.Issue.CreateTime == nil {
			break
		}

		return e.complexity.Issue.CreateTime(childComplexity), true

	case "Issue.creator":
		if e.complexity.Issue.Creator == nil {
			break
		}

		return e.complexity.Issue.Creator(childComplexity), true

	case "Issue.dataId":
		if e.complexity.Issue.DataID == nil {
			break
		}

		return e.complexity.Issue.DataID(childComplexity), true

	case "Issue.endTime":
		if e.complexity.Issue.EndTime == nil {
			break
		}

		return e.complexity.Issue.EndTime(childComplexity), true

	case "Issue.id":
		if e.complexity.Issue.ID == nil {
			break
		}

		return e.complexity.Issue.ID(childComplexity), true

	case "Issue.isDelete":
		if e.complexity.Issue.IsDelete == nil {
			break
		}

		return e.complexity.Issue.IsDelete(childComplexity), true

	case "Issue.isFiling":
		if e.complexity.Issue.IsFiling == nil {
			break
		}

		return e.complexity.Issue.IsFiling(childComplexity), true

	case "Issue.issueIds":
		if e.complexity.Issue.IssueIds == nil {
			break
		}

		return e.complexity.Issue.IssueIds(childComplexity), true

	case "Issue.issueObjectTypeId":
		if e.complexity.Issue.IssueObjectTypeID == nil {
			break
		}

		return e.complexity.Issue.IssueObjectTypeID(childComplexity), true

	case "Issue.iterationId":
		if e.complexity.Issue.IterationID == nil {
			break
		}

		return e.complexity.Issue.IterationID(childComplexity), true

	case "Issue.moduleId":
		if e.complexity.Issue.ModuleID == nil {
			break
		}

		return e.complexity.Issue.ModuleID(childComplexity), true

	case "Issue.orgId":
		if e.complexity.Issue.OrgID == nil {
			break
		}

		return e.complexity.Issue.OrgID(childComplexity), true

	case "Issue.owner":
		if e.complexity.Issue.Owner == nil {
			break
		}

		return e.complexity.Issue.Owner(childComplexity), true

	case "Issue.owners":
		if e.complexity.Issue.Owners == nil {
			break
		}

		return e.complexity.Issue.Owners(childComplexity), true

	case "Issue.parentId":
		if e.complexity.Issue.ParentID == nil {
			break
		}

		return e.complexity.Issue.ParentID(childComplexity), true

	case "Issue.parentInfo":
		if e.complexity.Issue.ParentInfo == nil {
			break
		}

		return e.complexity.Issue.ParentInfo(childComplexity), true

	case "Issue.parentTitle":
		if e.complexity.Issue.ParentTitle == nil {
			break
		}

		return e.complexity.Issue.ParentTitle(childComplexity), true

	case "Issue.planEndTime":
		if e.complexity.Issue.PlanEndTime == nil {
			break
		}

		return e.complexity.Issue.PlanEndTime(childComplexity), true

	case "Issue.planStartTime":
		if e.complexity.Issue.PlanStartTime == nil {
			break
		}

		return e.complexity.Issue.PlanStartTime(childComplexity), true

	case "Issue.planWorkHour":
		if e.complexity.Issue.PlanWorkHour == nil {
			break
		}

		return e.complexity.Issue.PlanWorkHour(childComplexity), true

	case "Issue.priorityId":
		if e.complexity.Issue.PriorityID == nil {
			break
		}

		return e.complexity.Issue.PriorityID(childComplexity), true

	case "Issue.projectId":
		if e.complexity.Issue.ProjectID == nil {
			break
		}

		return e.complexity.Issue.ProjectID(childComplexity), true

	case "Issue.projectObjectTypeId":
		if e.complexity.Issue.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.Issue.ProjectObjectTypeID(childComplexity), true

	case "Issue.propertyId":
		if e.complexity.Issue.PropertyID == nil {
			break
		}

		return e.complexity.Issue.PropertyID(childComplexity), true

	case "Issue.remark":
		if e.complexity.Issue.Remark == nil {
			break
		}

		return e.complexity.Issue.Remark(childComplexity), true

	case "Issue.remarkDetail":
		if e.complexity.Issue.RemarkDetail == nil {
			break
		}

		return e.complexity.Issue.RemarkDetail(childComplexity), true

	case "Issue.sort":
		if e.complexity.Issue.Sort == nil {
			break
		}

		return e.complexity.Issue.Sort(childComplexity), true

	case "Issue.sourceId":
		if e.complexity.Issue.SourceID == nil {
			break
		}

		return e.complexity.Issue.SourceID(childComplexity), true

	case "Issue.startTime":
		if e.complexity.Issue.StartTime == nil {
			break
		}

		return e.complexity.Issue.StartTime(childComplexity), true

	case "Issue.status":
		if e.complexity.Issue.Status == nil {
			break
		}

		return e.complexity.Issue.Status(childComplexity), true

	case "Issue.tableId":
		if e.complexity.Issue.TableID == nil {
			break
		}

		return e.complexity.Issue.TableID(childComplexity), true

	case "Issue.title":
		if e.complexity.Issue.Title == nil {
			break
		}

		return e.complexity.Issue.Title(childComplexity), true

	case "Issue.updateTime":
		if e.complexity.Issue.UpdateTime == nil {
			break
		}

		return e.complexity.Issue.UpdateTime(childComplexity), true

	case "Issue.updator":
		if e.complexity.Issue.Updator == nil {
			break
		}

		return e.complexity.Issue.Updator(childComplexity), true

	case "Issue.versionId":
		if e.complexity.Issue.VersionID == nil {
			break
		}

		return e.complexity.Issue.VersionID(childComplexity), true

	case "IssueAssignRankInfo.avatar":
		if e.complexity.IssueAssignRankInfo.Avatar == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.Avatar(childComplexity), true

	case "IssueAssignRankInfo.emplId":
		if e.complexity.IssueAssignRankInfo.EmplID == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.EmplID(childComplexity), true

	case "IssueAssignRankInfo.incompleteissueCount":
		if e.complexity.IssueAssignRankInfo.IncompleteissueCount == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.IncompleteissueCount(childComplexity), true

	case "IssueAssignRankInfo.name":
		if e.complexity.IssueAssignRankInfo.Name == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.Name(childComplexity), true

	case "IssueDailyPersonalWorkCompletionStatData.completedCount":
		if e.complexity.IssueDailyPersonalWorkCompletionStatData.CompletedCount == nil {
			break
		}

		return e.complexity.IssueDailyPersonalWorkCompletionStatData.CompletedCount(childComplexity), true

	case "IssueDailyPersonalWorkCompletionStatData.statDate":
		if e.complexity.IssueDailyPersonalWorkCompletionStatData.StatDate == nil {
			break
		}

		return e.complexity.IssueDailyPersonalWorkCompletionStatData.StatDate(childComplexity), true

	case "IssueInfo.allStatus":
		if e.complexity.IssueInfo.AllStatus == nil {
			break
		}

		return e.complexity.IssueInfo.AllStatus(childComplexity), true

	case "IssueInfo.auditorsInfo":
		if e.complexity.IssueInfo.AuditorsInfo == nil {
			break
		}

		return e.complexity.IssueInfo.AuditorsInfo(childComplexity), true

	case "IssueInfo.childsFinishedNum":
		if e.complexity.IssueInfo.ChildsFinishedNum == nil {
			break
		}

		return e.complexity.IssueInfo.ChildsFinishedNum(childComplexity), true

	case "IssueInfo.childsNum":
		if e.complexity.IssueInfo.ChildsNum == nil {
			break
		}

		return e.complexity.IssueInfo.ChildsNum(childComplexity), true

	case "IssueInfo.creatorInfo":
		if e.complexity.IssueInfo.CreatorInfo == nil {
			break
		}

		return e.complexity.IssueInfo.CreatorInfo(childComplexity), true

	case "IssueInfo.customField":
		if e.complexity.IssueInfo.CustomField == nil {
			break
		}

		return e.complexity.IssueInfo.CustomField(childComplexity), true

	case "IssueInfo.followerInfos":
		if e.complexity.IssueInfo.FollowerInfos == nil {
			break
		}

		return e.complexity.IssueInfo.FollowerInfos(childComplexity), true

	case "IssueInfo.issue":
		if e.complexity.IssueInfo.Issue == nil {
			break
		}

		return e.complexity.IssueInfo.Issue(childComplexity), true

	case "IssueInfo.iterationName":
		if e.complexity.IssueInfo.IterationName == nil {
			break
		}

		return e.complexity.IssueInfo.IterationName(childComplexity), true

	case "IssueInfo.lastUrgeTime":
		if e.complexity.IssueInfo.LastUrgeTime == nil {
			break
		}

		return e.complexity.IssueInfo.LastUrgeTime(childComplexity), true

	case "IssueInfo.lastUrgeTimeForIssue":
		if e.complexity.IssueInfo.LastUrgeTimeForIssue == nil {
			break
		}

		return e.complexity.IssueInfo.LastUrgeTimeForIssue(childComplexity), true

	case "IssueInfo.lessData":
		if e.complexity.IssueInfo.LessData == nil {
			break
		}

		return e.complexity.IssueInfo.LessData(childComplexity), true

	case "IssueInfo.nextStatus":
		if e.complexity.IssueInfo.NextStatus == nil {
			break
		}

		return e.complexity.IssueInfo.NextStatus(childComplexity), true

	case "IssueInfo.owner":
		if e.complexity.IssueInfo.Owner == nil {
			break
		}

		return e.complexity.IssueInfo.Owner(childComplexity), true

	case "IssueInfo.participantInfos":
		if e.complexity.IssueInfo.ParticipantInfos == nil {
			break
		}

		return e.complexity.IssueInfo.ParticipantInfos(childComplexity), true

	case "IssueInfo.priority":
		if e.complexity.IssueInfo.Priority == nil {
			break
		}

		return e.complexity.IssueInfo.Priority(childComplexity), true

	case "IssueInfo.project":
		if e.complexity.IssueInfo.Project == nil {
			break
		}

		return e.complexity.IssueInfo.Project(childComplexity), true

	case "IssueInfo.projectObjectTypeName":
		if e.complexity.IssueInfo.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.IssueInfo.ProjectObjectTypeName(childComplexity), true

	case "IssueInfo.propertyInfo":
		if e.complexity.IssueInfo.PropertyInfo == nil {
			break
		}

		return e.complexity.IssueInfo.PropertyInfo(childComplexity), true

	case "IssueInfo.relateCommentCount":
		if e.complexity.IssueInfo.RelateCommentCount == nil {
			break
		}

		return e.complexity.IssueInfo.RelateCommentCount(childComplexity), true

	case "IssueInfo.relateIssueCount":
		if e.complexity.IssueInfo.RelateIssueCount == nil {
			break
		}

		return e.complexity.IssueInfo.RelateIssueCount(childComplexity), true

	case "IssueInfo.relateResourceCount":
		if e.complexity.IssueInfo.RelateResourceCount == nil {
			break
		}

		return e.complexity.IssueInfo.RelateResourceCount(childComplexity), true

	case "IssueInfo.sourceInfo":
		if e.complexity.IssueInfo.SourceInfo == nil {
			break
		}

		return e.complexity.IssueInfo.SourceInfo(childComplexity), true

	case "IssueInfo.status":
		if e.complexity.IssueInfo.Status == nil {
			break
		}

		return e.complexity.IssueInfo.Status(childComplexity), true

	case "IssueInfo.tableName":
		if e.complexity.IssueInfo.TableName == nil {
			break
		}

		return e.complexity.IssueInfo.TableName(childComplexity), true

	case "IssueInfo.tags":
		if e.complexity.IssueInfo.Tags == nil {
			break
		}

		return e.complexity.IssueInfo.Tags(childComplexity), true

	case "IssueInfo.typeInfo":
		if e.complexity.IssueInfo.TypeInfo == nil {
			break
		}

		return e.complexity.IssueInfo.TypeInfo(childComplexity), true

	case "IssueInfo.workHourInfo":
		if e.complexity.IssueInfo.WorkHourInfo == nil {
			break
		}

		return e.complexity.IssueInfo.WorkHourInfo(childComplexity), true

	case "IssueList.list":
		if e.complexity.IssueList.List == nil {
			break
		}

		return e.complexity.IssueList.List(childComplexity), true

	case "IssueList.total":
		if e.complexity.IssueList.Total == nil {
			break
		}

		return e.complexity.IssueList.Total(childComplexity), true

	case "IssueObjectTypeInfo.id":
		if e.complexity.IssueObjectTypeInfo.ID == nil {
			break
		}

		return e.complexity.IssueObjectTypeInfo.ID(childComplexity), true

	case "IssueObjectTypeInfo.name":
		if e.complexity.IssueObjectTypeInfo.Name == nil {
			break
		}

		return e.complexity.IssueObjectTypeInfo.Name(childComplexity), true

	case "IssueProperty.createTime":
		if e.complexity.IssueProperty.CreateTime == nil {
			break
		}

		return e.complexity.IssueProperty.CreateTime(childComplexity), true

	case "IssueProperty.creator":
		if e.complexity.IssueProperty.Creator == nil {
			break
		}

		return e.complexity.IssueProperty.Creator(childComplexity), true

	case "IssueProperty.id":
		if e.complexity.IssueProperty.ID == nil {
			break
		}

		return e.complexity.IssueProperty.ID(childComplexity), true

	case "IssueProperty.langCode":
		if e.complexity.IssueProperty.LangCode == nil {
			break
		}

		return e.complexity.IssueProperty.LangCode(childComplexity), true

	case "IssueProperty.name":
		if e.complexity.IssueProperty.Name == nil {
			break
		}

		return e.complexity.IssueProperty.Name(childComplexity), true

	case "IssueProperty.orgId":
		if e.complexity.IssueProperty.OrgID == nil {
			break
		}

		return e.complexity.IssueProperty.OrgID(childComplexity), true

	case "IssueProperty.projectId":
		if e.complexity.IssueProperty.ProjectID == nil {
			break
		}

		return e.complexity.IssueProperty.ProjectID(childComplexity), true

	case "IssueProperty.projectObjectTypeId":
		if e.complexity.IssueProperty.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueProperty.ProjectObjectTypeID(childComplexity), true

	case "IssueProperty.remark":
		if e.complexity.IssueProperty.Remark == nil {
			break
		}

		return e.complexity.IssueProperty.Remark(childComplexity), true

	case "IssueProperty.sort":
		if e.complexity.IssueProperty.Sort == nil {
			break
		}

		return e.complexity.IssueProperty.Sort(childComplexity), true

	case "IssueProperty.status":
		if e.complexity.IssueProperty.Status == nil {
			break
		}

		return e.complexity.IssueProperty.Status(childComplexity), true

	case "IssueProperty.updateTime":
		if e.complexity.IssueProperty.UpdateTime == nil {
			break
		}

		return e.complexity.IssueProperty.UpdateTime(childComplexity), true

	case "IssueProperty.updator":
		if e.complexity.IssueProperty.Updator == nil {
			break
		}

		return e.complexity.IssueProperty.Updator(childComplexity), true

	case "IssuePropertyInfo.id":
		if e.complexity.IssuePropertyInfo.ID == nil {
			break
		}

		return e.complexity.IssuePropertyInfo.ID(childComplexity), true

	case "IssuePropertyInfo.name":
		if e.complexity.IssuePropertyInfo.Name == nil {
			break
		}

		return e.complexity.IssuePropertyInfo.Name(childComplexity), true

	case "IssueRestInfo.allStatus":
		if e.complexity.IssueRestInfo.AllStatus == nil {
			break
		}

		return e.complexity.IssueRestInfo.AllStatus(childComplexity), true

	case "IssueRestInfo.auditStatus":
		if e.complexity.IssueRestInfo.AuditStatus == nil {
			break
		}

		return e.complexity.IssueRestInfo.AuditStatus(childComplexity), true

	case "IssueRestInfo.endTime":
		if e.complexity.IssueRestInfo.EndTime == nil {
			break
		}

		return e.complexity.IssueRestInfo.EndTime(childComplexity), true

	case "IssueRestInfo.finished":
		if e.complexity.IssueRestInfo.Finished == nil {
			break
		}

		return e.complexity.IssueRestInfo.Finished(childComplexity), true

	case "IssueRestInfo.id":
		if e.complexity.IssueRestInfo.ID == nil {
			break
		}

		return e.complexity.IssueRestInfo.ID(childComplexity), true

	case "IssueRestInfo.iterationId":
		if e.complexity.IssueRestInfo.IterationID == nil {
			break
		}

		return e.complexity.IssueRestInfo.IterationID(childComplexity), true

	case "IssueRestInfo.iterationName":
		if e.complexity.IssueRestInfo.IterationName == nil {
			break
		}

		return e.complexity.IssueRestInfo.IterationName(childComplexity), true

	case "IssueRestInfo.ownerAvatar":
		if e.complexity.IssueRestInfo.OwnerAvatar == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerAvatar(childComplexity), true

	case "IssueRestInfo.ownerId":
		if e.complexity.IssueRestInfo.OwnerID == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerID(childComplexity), true

	case "IssueRestInfo.ownerIsDeleted":
		if e.complexity.IssueRestInfo.OwnerIsDeleted == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerIsDeleted(childComplexity), true

	case "IssueRestInfo.ownerIsDisabled":
		if e.complexity.IssueRestInfo.OwnerIsDisabled == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerIsDisabled(childComplexity), true

	case "IssueRestInfo.ownerName":
		if e.complexity.IssueRestInfo.OwnerName == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerName(childComplexity), true

	case "IssueRestInfo.planEndTime":
		if e.complexity.IssueRestInfo.PlanEndTime == nil {
			break
		}

		return e.complexity.IssueRestInfo.PlanEndTime(childComplexity), true

	case "IssueRestInfo.planStartTime":
		if e.complexity.IssueRestInfo.PlanStartTime == nil {
			break
		}

		return e.complexity.IssueRestInfo.PlanStartTime(childComplexity), true

	case "IssueRestInfo.priorityInfo":
		if e.complexity.IssueRestInfo.PriorityInfo == nil {
			break
		}

		return e.complexity.IssueRestInfo.PriorityInfo(childComplexity), true

	case "IssueRestInfo.projectObjectTypeId":
		if e.complexity.IssueRestInfo.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueRestInfo.ProjectObjectTypeID(childComplexity), true

	case "IssueRestInfo.projectObjectTypeName":
		if e.complexity.IssueRestInfo.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.IssueRestInfo.ProjectObjectTypeName(childComplexity), true

	case "IssueRestInfo.projectTypeId":
		if e.complexity.IssueRestInfo.ProjectTypeID == nil {
			break
		}

		return e.complexity.IssueRestInfo.ProjectTypeID(childComplexity), true

	case "IssueRestInfo.statusId":
		if e.complexity.IssueRestInfo.StatusID == nil {
			break
		}

		return e.complexity.IssueRestInfo.StatusID(childComplexity), true

	case "IssueRestInfo.statusInfo":
		if e.complexity.IssueRestInfo.StatusInfo == nil {
			break
		}

		return e.complexity.IssueRestInfo.StatusInfo(childComplexity), true

	case "IssueRestInfo.statusName":
		if e.complexity.IssueRestInfo.StatusName == nil {
			break
		}

		return e.complexity.IssueRestInfo.StatusName(childComplexity), true

	case "IssueRestInfo.title":
		if e.complexity.IssueRestInfo.Title == nil {
			break
		}

		return e.complexity.IssueRestInfo.Title(childComplexity), true

	case "IssueRestInfo.type":
		if e.complexity.IssueRestInfo.Type == nil {
			break
		}

		return e.complexity.IssueRestInfo.Type(childComplexity), true

	case "IssueSource.createTime":
		if e.complexity.IssueSource.CreateTime == nil {
			break
		}

		return e.complexity.IssueSource.CreateTime(childComplexity), true

	case "IssueSource.creator":
		if e.complexity.IssueSource.Creator == nil {
			break
		}

		return e.complexity.IssueSource.Creator(childComplexity), true

	case "IssueSource.id":
		if e.complexity.IssueSource.ID == nil {
			break
		}

		return e.complexity.IssueSource.ID(childComplexity), true

	case "IssueSource.langCode":
		if e.complexity.IssueSource.LangCode == nil {
			break
		}

		return e.complexity.IssueSource.LangCode(childComplexity), true

	case "IssueSource.name":
		if e.complexity.IssueSource.Name == nil {
			break
		}

		return e.complexity.IssueSource.Name(childComplexity), true

	case "IssueSource.orgId":
		if e.complexity.IssueSource.OrgID == nil {
			break
		}

		return e.complexity.IssueSource.OrgID(childComplexity), true

	case "IssueSource.projectId":
		if e.complexity.IssueSource.ProjectID == nil {
			break
		}

		return e.complexity.IssueSource.ProjectID(childComplexity), true

	case "IssueSource.projectObjectTypeId":
		if e.complexity.IssueSource.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueSource.ProjectObjectTypeID(childComplexity), true

	case "IssueSource.remark":
		if e.complexity.IssueSource.Remark == nil {
			break
		}

		return e.complexity.IssueSource.Remark(childComplexity), true

	case "IssueSource.sort":
		if e.complexity.IssueSource.Sort == nil {
			break
		}

		return e.complexity.IssueSource.Sort(childComplexity), true

	case "IssueSource.status":
		if e.complexity.IssueSource.Status == nil {
			break
		}

		return e.complexity.IssueSource.Status(childComplexity), true

	case "IssueSource.updateTime":
		if e.complexity.IssueSource.UpdateTime == nil {
			break
		}

		return e.complexity.IssueSource.UpdateTime(childComplexity), true

	case "IssueSource.updator":
		if e.complexity.IssueSource.Updator == nil {
			break
		}

		return e.complexity.IssueSource.Updator(childComplexity), true

	case "IssueSourceInfo.id":
		if e.complexity.IssueSourceInfo.ID == nil {
			break
		}

		return e.complexity.IssueSourceInfo.ID(childComplexity), true

	case "IssueSourceInfo.name":
		if e.complexity.IssueSourceInfo.Name == nil {
			break
		}

		return e.complexity.IssueSourceInfo.Name(childComplexity), true

	case "IssueStatByObjectType.projectObjectTypeId":
		if e.complexity.IssueStatByObjectType.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueStatByObjectType.ProjectObjectTypeID(childComplexity), true

	case "IssueStatByObjectType.projectObjectTypeName":
		if e.complexity.IssueStatByObjectType.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.IssueStatByObjectType.ProjectObjectTypeName(childComplexity), true

	case "IssueStatByObjectType.total":
		if e.complexity.IssueStatByObjectType.Total == nil {
			break
		}

		return e.complexity.IssueStatByObjectType.Total(childComplexity), true

	case "IssueStatusTypeStatDetailResp.completed":
		if e.complexity.IssueStatusTypeStatDetailResp.Completed == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatDetailResp.Completed(childComplexity), true

	case "IssueStatusTypeStatDetailResp.notStart":
		if e.complexity.IssueStatusTypeStatDetailResp.NotStart == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatDetailResp.NotStart(childComplexity), true

	case "IssueStatusTypeStatDetailResp.processing":
		if e.complexity.IssueStatusTypeStatDetailResp.Processing == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatDetailResp.Processing(childComplexity), true

	case "IssueStatusTypeStatResp.beAboutToOverdueSum":
		if e.complexity.IssueStatusTypeStatResp.BeAboutToOverdueSum == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.BeAboutToOverdueSum(childComplexity), true

	case "IssueStatusTypeStatResp.callMeTotal":
		if e.complexity.IssueStatusTypeStatResp.CallMeTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.CallMeTotal(childComplexity), true

	case "IssueStatusTypeStatResp.completedTodayTotal":
		if e.complexity.IssueStatusTypeStatResp.CompletedTodayTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.CompletedTodayTotal(childComplexity), true

	case "IssueStatusTypeStatResp.completedTotal":
		if e.complexity.IssueStatusTypeStatResp.CompletedTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.CompletedTotal(childComplexity), true

	case "IssueStatusTypeStatResp.list":
		if e.complexity.IssueStatusTypeStatResp.List == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.List(childComplexity), true

	case "IssueStatusTypeStatResp.notStartTotal":
		if e.complexity.IssueStatusTypeStatResp.NotStartTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.NotStartTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueCompletedTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueCompletedTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueCompletedTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueTodayTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueTodayTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueTodayTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueTomorrowTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueTomorrowTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueTomorrowTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueTotal(childComplexity), true

	case "IssueStatusTypeStatResp.processingTotal":
		if e.complexity.IssueStatusTypeStatResp.ProcessingTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.ProcessingTotal(childComplexity), true

	case "IssueStatusTypeStatResp.todayCount":
		if e.complexity.IssueStatusTypeStatResp.TodayCount == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.TodayCount(childComplexity), true

	case "IssueStatusTypeStatResp.todayCreateCount":
		if e.complexity.IssueStatusTypeStatResp.TodayCreateCount == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.TodayCreateCount(childComplexity), true

	case "IssueStatusTypeStatResp.total":
		if e.complexity.IssueStatusTypeStatResp.Total == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.Total(childComplexity), true

	case "IssueStatusTypeStatResp.waitConfirmedTotal":
		if e.complexity.IssueStatusTypeStatResp.WaitConfirmedTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.WaitConfirmedTotal(childComplexity), true

	case "IssueWorkHours.desc":
		if e.complexity.IssueWorkHours.Desc == nil {
			break
		}

		return e.complexity.IssueWorkHours.Desc(childComplexity), true

	case "IssueWorkHours.endTime":
		if e.complexity.IssueWorkHours.EndTime == nil {
			break
		}

		return e.complexity.IssueWorkHours.EndTime(childComplexity), true

	case "IssueWorkHours.id":
		if e.complexity.IssueWorkHours.ID == nil {
			break
		}

		return e.complexity.IssueWorkHours.ID(childComplexity), true

	case "IssueWorkHours.needTime":
		if e.complexity.IssueWorkHours.NeedTime == nil {
			break
		}

		return e.complexity.IssueWorkHours.NeedTime(childComplexity), true

	case "IssueWorkHours.startTime":
		if e.complexity.IssueWorkHours.StartTime == nil {
			break
		}

		return e.complexity.IssueWorkHours.StartTime(childComplexity), true

	case "IssueWorkHours.type":
		if e.complexity.IssueWorkHours.Type == nil {
			break
		}

		return e.complexity.IssueWorkHours.Type(childComplexity), true

	case "IssueWorkHours.workerId":
		if e.complexity.IssueWorkHours.WorkerID == nil {
			break
		}

		return e.complexity.IssueWorkHours.WorkerID(childComplexity), true

	case "Iteration.allIssueCount":
		if e.complexity.Iteration.AllIssueCount == nil {
			break
		}

		return e.complexity.Iteration.AllIssueCount(childComplexity), true

	case "Iteration.createTime":
		if e.complexity.Iteration.CreateTime == nil {
			break
		}

		return e.complexity.Iteration.CreateTime(childComplexity), true

	case "Iteration.creator":
		if e.complexity.Iteration.Creator == nil {
			break
		}

		return e.complexity.Iteration.Creator(childComplexity), true

	case "Iteration.finishedIssueCount":
		if e.complexity.Iteration.FinishedIssueCount == nil {
			break
		}

		return e.complexity.Iteration.FinishedIssueCount(childComplexity), true

	case "Iteration.id":
		if e.complexity.Iteration.ID == nil {
			break
		}

		return e.complexity.Iteration.ID(childComplexity), true

	case "Iteration.name":
		if e.complexity.Iteration.Name == nil {
			break
		}

		return e.complexity.Iteration.Name(childComplexity), true

	case "Iteration.orgId":
		if e.complexity.Iteration.OrgID == nil {
			break
		}

		return e.complexity.Iteration.OrgID(childComplexity), true

	case "Iteration.owner":
		if e.complexity.Iteration.Owner == nil {
			break
		}

		return e.complexity.Iteration.Owner(childComplexity), true

	case "Iteration.ownerInfo":
		if e.complexity.Iteration.OwnerInfo == nil {
			break
		}

		return e.complexity.Iteration.OwnerInfo(childComplexity), true

	case "Iteration.planEndTime":
		if e.complexity.Iteration.PlanEndTime == nil {
			break
		}

		return e.complexity.Iteration.PlanEndTime(childComplexity), true

	case "Iteration.planStartTime":
		if e.complexity.Iteration.PlanStartTime == nil {
			break
		}

		return e.complexity.Iteration.PlanStartTime(childComplexity), true

	case "Iteration.planWorkHour":
		if e.complexity.Iteration.PlanWorkHour == nil {
			break
		}

		return e.complexity.Iteration.PlanWorkHour(childComplexity), true

	case "Iteration.projectId":
		if e.complexity.Iteration.ProjectID == nil {
			break
		}

		return e.complexity.Iteration.ProjectID(childComplexity), true

	case "Iteration.remark":
		if e.complexity.Iteration.Remark == nil {
			break
		}

		return e.complexity.Iteration.Remark(childComplexity), true

	case "Iteration.sort":
		if e.complexity.Iteration.Sort == nil {
			break
		}

		return e.complexity.Iteration.Sort(childComplexity), true

	case "Iteration.status":
		if e.complexity.Iteration.Status == nil {
			break
		}

		return e.complexity.Iteration.Status(childComplexity), true

	case "Iteration.statusInfo":
		if e.complexity.Iteration.StatusInfo == nil {
			break
		}

		return e.complexity.Iteration.StatusInfo(childComplexity), true

	case "Iteration.storyPoint":
		if e.complexity.Iteration.StoryPoint == nil {
			break
		}

		return e.complexity.Iteration.StoryPoint(childComplexity), true

	case "Iteration.updateTime":
		if e.complexity.Iteration.UpdateTime == nil {
			break
		}

		return e.complexity.Iteration.UpdateTime(childComplexity), true

	case "Iteration.updator":
		if e.complexity.Iteration.Updator == nil {
			break
		}

		return e.complexity.Iteration.Updator(childComplexity), true

	case "Iteration.versionId":
		if e.complexity.Iteration.VersionID == nil {
			break
		}

		return e.complexity.Iteration.VersionID(childComplexity), true

	case "IterationInfoResp.iterStatusList":
		if e.complexity.IterationInfoResp.IterStatusList == nil {
			break
		}

		return e.complexity.IterationInfoResp.IterStatusList(childComplexity), true

	case "IterationInfoResp.iteration":
		if e.complexity.IterationInfoResp.Iteration == nil {
			break
		}

		return e.complexity.IterationInfoResp.Iteration(childComplexity), true

	case "IterationInfoResp.nextStatus":
		if e.complexity.IterationInfoResp.NextStatus == nil {
			break
		}

		return e.complexity.IterationInfoResp.NextStatus(childComplexity), true

	case "IterationInfoResp.owner":
		if e.complexity.IterationInfoResp.Owner == nil {
			break
		}

		return e.complexity.IterationInfoResp.Owner(childComplexity), true

	case "IterationInfoResp.project":
		if e.complexity.IterationInfoResp.Project == nil {
			break
		}

		return e.complexity.IterationInfoResp.Project(childComplexity), true

	case "IterationInfoResp.status":
		if e.complexity.IterationInfoResp.Status == nil {
			break
		}

		return e.complexity.IterationInfoResp.Status(childComplexity), true

	case "IterationInfoResp.statusTimeInfo":
		if e.complexity.IterationInfoResp.StatusTimeInfo == nil {
			break
		}

		return e.complexity.IterationInfoResp.StatusTimeInfo(childComplexity), true

	case "IterationList.list":
		if e.complexity.IterationList.List == nil {
			break
		}

		return e.complexity.IterationList.List(childComplexity), true

	case "IterationList.total":
		if e.complexity.IterationList.Total == nil {
			break
		}

		return e.complexity.IterationList.Total(childComplexity), true

	case "IterationStat.bugCount":
		if e.complexity.IterationStat.BugCount == nil {
			break
		}

		return e.complexity.IterationStat.BugCount(childComplexity), true

	case "IterationStat.bugEndCount":
		if e.complexity.IterationStat.BugEndCount == nil {
			break
		}

		return e.complexity.IterationStat.BugEndCount(childComplexity), true

	case "IterationStat.bugOverdueCount":
		if e.complexity.IterationStat.BugOverdueCount == nil {
			break
		}

		return e.complexity.IterationStat.BugOverdueCount(childComplexity), true

	case "IterationStat.bugRunningCount":
		if e.complexity.IterationStat.BugRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.BugRunningCount(childComplexity), true

	case "IterationStat.bugWaitCount":
		if e.complexity.IterationStat.BugWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.BugWaitCount(childComplexity), true

	case "IterationStat.createTime":
		if e.complexity.IterationStat.CreateTime == nil {
			break
		}

		return e.complexity.IterationStat.CreateTime(childComplexity), true

	case "IterationStat.creator":
		if e.complexity.IterationStat.Creator == nil {
			break
		}

		return e.complexity.IterationStat.Creator(childComplexity), true

	case "IterationStat.demandCount":
		if e.complexity.IterationStat.DemandCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandCount(childComplexity), true

	case "IterationStat.demandEndCount":
		if e.complexity.IterationStat.DemandEndCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandEndCount(childComplexity), true

	case "IterationStat.demandOverdueCount":
		if e.complexity.IterationStat.DemandOverdueCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandOverdueCount(childComplexity), true

	case "IterationStat.demandRunningCount":
		if e.complexity.IterationStat.DemandRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandRunningCount(childComplexity), true

	case "IterationStat.demandWaitCount":
		if e.complexity.IterationStat.DemandWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandWaitCount(childComplexity), true

	case "IterationStat.ext":
		if e.complexity.IterationStat.Ext == nil {
			break
		}

		return e.complexity.IterationStat.Ext(childComplexity), true

	case "IterationStat.id":
		if e.complexity.IterationStat.ID == nil {
			break
		}

		return e.complexity.IterationStat.ID(childComplexity), true

	case "IterationStat.issueCount":
		if e.complexity.IterationStat.IssueCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueCount(childComplexity), true

	case "IterationStat.issueEndCount":
		if e.complexity.IterationStat.IssueEndCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueEndCount(childComplexity), true

	case "IterationStat.issueOverdueCount":
		if e.complexity.IterationStat.IssueOverdueCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueOverdueCount(childComplexity), true

	case "IterationStat.issueRunningCount":
		if e.complexity.IterationStat.IssueRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueRunningCount(childComplexity), true

	case "IterationStat.issueWaitCount":
		if e.complexity.IterationStat.IssueWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueWaitCount(childComplexity), true

	case "IterationStat.iterationId":
		if e.complexity.IterationStat.IterationID == nil {
			break
		}

		return e.complexity.IterationStat.IterationID(childComplexity), true

	case "IterationStat.orgId":
		if e.complexity.IterationStat.OrgID == nil {
			break
		}

		return e.complexity.IterationStat.OrgID(childComplexity), true

	case "IterationStat.projectId":
		if e.complexity.IterationStat.ProjectID == nil {
			break
		}

		return e.complexity.IterationStat.ProjectID(childComplexity), true

	case "IterationStat.statDate":
		if e.complexity.IterationStat.StatDate == nil {
			break
		}

		return e.complexity.IterationStat.StatDate(childComplexity), true

	case "IterationStat.status":
		if e.complexity.IterationStat.Status == nil {
			break
		}

		return e.complexity.IterationStat.Status(childComplexity), true

	case "IterationStat.storyPointCount":
		if e.complexity.IterationStat.StoryPointCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointCount(childComplexity), true

	case "IterationStat.storyPointEndCount":
		if e.complexity.IterationStat.StoryPointEndCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointEndCount(childComplexity), true

	case "IterationStat.storyPointOverdueCount":
		if e.complexity.IterationStat.StoryPointOverdueCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointOverdueCount(childComplexity), true

	case "IterationStat.storyPointRunningCount":
		if e.complexity.IterationStat.StoryPointRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointRunningCount(childComplexity), true

	case "IterationStat.storyPointWaitCount":
		if e.complexity.IterationStat.StoryPointWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointWaitCount(childComplexity), true

	case "IterationStat.taskCount":
		if e.complexity.IterationStat.TaskCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskCount(childComplexity), true

	case "IterationStat.taskEndCount":
		if e.complexity.IterationStat.TaskEndCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskEndCount(childComplexity), true

	case "IterationStat.taskOverdueCount":
		if e.complexity.IterationStat.TaskOverdueCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskOverdueCount(childComplexity), true

	case "IterationStat.taskRunningCount":
		if e.complexity.IterationStat.TaskRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskRunningCount(childComplexity), true

	case "IterationStat.taskWaitCount":
		if e.complexity.IterationStat.TaskWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskWaitCount(childComplexity), true

	case "IterationStat.testtaskCount":
		if e.complexity.IterationStat.TesttaskCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskCount(childComplexity), true

	case "IterationStat.testtaskEndCount":
		if e.complexity.IterationStat.TesttaskEndCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskEndCount(childComplexity), true

	case "IterationStat.testtaskOverdueCount":
		if e.complexity.IterationStat.TesttaskOverdueCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskOverdueCount(childComplexity), true

	case "IterationStat.testtaskRunningCount":
		if e.complexity.IterationStat.TesttaskRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskRunningCount(childComplexity), true

	case "IterationStat.testtaskWaitCount":
		if e.complexity.IterationStat.TesttaskWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskWaitCount(childComplexity), true

	case "IterationStatList.list":
		if e.complexity.IterationStatList.List == nil {
			break
		}

		return e.complexity.IterationStatList.List(childComplexity), true

	case "IterationStatList.total":
		if e.complexity.IterationStatList.Total == nil {
			break
		}

		return e.complexity.IterationStatList.Total(childComplexity), true

	case "IterationStatSimple.allIssues":
		if e.complexity.IterationStatSimple.AllIssues == nil {
			break
		}

		return e.complexity.IterationStatSimple.AllIssues(childComplexity), true

	case "IterationStatSimple.finishIssues":
		if e.complexity.IterationStatSimple.FinishIssues == nil {
			break
		}

		return e.complexity.IterationStatSimple.FinishIssues(childComplexity), true

	case "IterationStatSimple.id":
		if e.complexity.IterationStatSimple.ID == nil {
			break
		}

		return e.complexity.IterationStatSimple.ID(childComplexity), true

	case "IterationStatSimple.name":
		if e.complexity.IterationStatSimple.Name == nil {
			break
		}

		return e.complexity.IterationStatSimple.Name(childComplexity), true

	case "IterationStatSimple.overdueIssues":
		if e.complexity.IterationStatSimple.OverdueIssues == nil {
			break
		}

		return e.complexity.IterationStatSimple.OverdueIssues(childComplexity), true

	case "JsApiSignResp.agentId":
		if e.complexity.JsAPISignResp.AgentID == nil {
			break
		}

		return e.complexity.JsAPISignResp.AgentID(childComplexity), true

	case "JsApiSignResp.noceStr":
		if e.complexity.JsAPISignResp.NoceStr == nil {
			break
		}

		return e.complexity.JsAPISignResp.NoceStr(childComplexity), true

	case "JsApiSignResp.signature":
		if e.complexity.JsAPISignResp.Signature == nil {
			break
		}

		return e.complexity.JsAPISignResp.Signature(childComplexity), true

	case "JsApiSignResp.timeStamp":
		if e.complexity.JsAPISignResp.TimeStamp == nil {
			break
		}

		return e.complexity.JsAPISignResp.TimeStamp(childComplexity), true

	case "MemberInfo.avatar":
		if e.complexity.MemberInfo.Avatar == nil {
			break
		}

		return e.complexity.MemberInfo.Avatar(childComplexity), true

	case "MemberInfo.id":
		if e.complexity.MemberInfo.ID == nil {
			break
		}

		return e.complexity.MemberInfo.ID(childComplexity), true

	case "MemberInfo.name":
		if e.complexity.MemberInfo.Name == nil {
			break
		}

		return e.complexity.MemberInfo.Name(childComplexity), true

	case "MoveIssueBatchResp.childrenIssues":
		if e.complexity.MoveIssueBatchResp.ChildrenIssues == nil {
			break
		}

		return e.complexity.MoveIssueBatchResp.ChildrenIssues(childComplexity), true

	case "MoveIssueBatchResp.noAuthIssues":
		if e.complexity.MoveIssueBatchResp.NoAuthIssues == nil {
			break
		}

		return e.complexity.MoveIssueBatchResp.NoAuthIssues(childComplexity), true

	case "MoveIssueBatchResp.remainChildrenIssues":
		if e.complexity.MoveIssueBatchResp.RemainChildrenIssues == nil {
			break
		}

		return e.complexity.MoveIssueBatchResp.RemainChildrenIssues(childComplexity), true

	case "MoveIssueBatchResp.successIssues":
		if e.complexity.MoveIssueBatchResp.SuccessIssues == nil {
			break
		}

		return e.complexity.MoveIssueBatchResp.SuccessIssues(childComplexity), true

	case "Mutation.addIssueAttachmentFs":
		if e.complexity.Mutation.AddIssueAttachmentFs == nil {
			break
		}

		args, err := ec.field_Mutation_addIssueAttachmentFs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIssueAttachmentFs(childComplexity, args["input"].(vo.AddIssueAttachmentFsReq)), true

	case "Mutation.applyScopes":
		if e.complexity.Mutation.ApplyScopes == nil {
			break
		}

		return e.complexity.Mutation.ApplyScopes(childComplexity), true

	case "Mutation.archiveProject":
		if e.complexity.Mutation.ArchiveProject == nil {
			break
		}

		args, err := ec.field_Mutation_archiveProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchiveProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.auditIssue":
		if e.complexity.Mutation.AuditIssue == nil {
			break
		}

		args, err := ec.field_Mutation_auditIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuditIssue(childComplexity, args["params"].(vo.AuditIssueReq)), true

	case "Mutation.authFs":
		if e.complexity.Mutation.AuthFs == nil {
			break
		}

		args, err := ec.field_Mutation_authFs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthFs(childComplexity, args["input"].(vo.FeiShuAuthReq)), true

	case "Mutation.authFsCode":
		if e.complexity.Mutation.AuthFsCode == nil {
			break
		}

		args, err := ec.field_Mutation_authFsCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthFsCode(childComplexity, args["input"].(vo.FeiShuAuthReq)), true

	case "Mutation.bindLoginName":
		if e.complexity.Mutation.BindLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_bindLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BindLoginName(childComplexity, args["input"].(vo.BindLoginNameReq)), true

	case "Mutation.boundFs":
		if e.complexity.Mutation.BoundFs == nil {
			break
		}

		args, err := ec.field_Mutation_boundFs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BoundFs(childComplexity, args["input"].(vo.BoundFeiShuReq)), true

	case "Mutation.boundFsAccount":
		if e.complexity.Mutation.BoundFsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_boundFsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BoundFsAccount(childComplexity, args["input"].(vo.BoundFeiShuAccountReq)), true

	case "Mutation.cancelArchivedProject":
		if e.complexity.Mutation.CancelArchivedProject == nil {
			break
		}

		args, err := ec.field_Mutation_cancelArchivedProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelArchivedProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.changeLoginName":
		if e.complexity.Mutation.ChangeLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_changeLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeLoginName(childComplexity, args["input"].(vo.BindLoginNameReq)), true

	case "Mutation.changeParentIssue":
		if e.complexity.Mutation.ChangeParentIssue == nil {
			break
		}

		args, err := ec.field_Mutation_changeParentIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeParentIssue(childComplexity, args["input"].(vo.ChangeParentIssueReq)), true

	case "Mutation.checkLoginName":
		if e.complexity.Mutation.CheckLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_checkLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckLoginName(childComplexity, args["input"].(vo.CheckLoginNameReq)), true

	case "Mutation.completeDelete":
		if e.complexity.Mutation.CompleteDelete == nil {
			break
		}

		args, err := ec.field_Mutation_completeDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompleteDelete(childComplexity, args["input"].(vo.RecoverRecycleBinRecordReq)), true

	case "Mutation.convertIssueToParent":
		if e.complexity.Mutation.ConvertIssueToParent == nil {
			break
		}

		args, err := ec.field_Mutation_convertIssueToParent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConvertIssueToParent(childComplexity, args["input"].(vo.ConvertIssueToParentReq)), true

	case "Mutation.createIssueComment":
		if e.complexity.Mutation.CreateIssueComment == nil {
			break
		}

		args, err := ec.field_Mutation_createIssueComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssueComment(childComplexity, args["input"].(vo.CreateIssueCommentReq)), true

	case "Mutation.createIssueWorkHours":
		if e.complexity.Mutation.CreateIssueWorkHours == nil {
			break
		}

		args, err := ec.field_Mutation_createIssueWorkHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssueWorkHours(childComplexity, args["params"].(*vo.CreateIssueWorkHoursReq)), true

	case "Mutation.createIteration":
		if e.complexity.Mutation.CreateIteration == nil {
			break
		}

		args, err := ec.field_Mutation_createIteration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIteration(childComplexity, args["input"].(vo.CreateIterationReq)), true

	case "Mutation.createMultiIssueWorkHours":
		if e.complexity.Mutation.CreateMultiIssueWorkHours == nil {
			break
		}

		args, err := ec.field_Mutation_createMultiIssueWorkHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMultiIssueWorkHours(childComplexity, args["params"].(*vo.CreateMultiIssueWorkHoursReq)), true

	case "Mutation.createOrg":
		if e.complexity.Mutation.CreateOrg == nil {
			break
		}

		args, err := ec.field_Mutation_createOrg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrg(childComplexity, args["input"].(vo.CreateOrgReq)), true

	case "Mutation.createProject":
		if e.complexity.Mutation.CreateProject == nil {
			break
		}

		args, err := ec.field_Mutation_createProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProject(childComplexity, args["input"].(vo.CreateProjectReq)), true

	case "Mutation.createProjectFolder":
		if e.complexity.Mutation.CreateProjectFolder == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectFolder(childComplexity, args["input"].(vo.CreateProjectFolderReq)), true

	case "Mutation.deleteIssue":
		if e.complexity.Mutation.DeleteIssue == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssue(childComplexity, args["input"].(vo.DeleteIssueReq)), true

	case "Mutation.deleteIssueBatch":
		if e.complexity.Mutation.DeleteIssueBatch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssueBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssueBatch(childComplexity, args["input"].(vo.DeleteIssueBatchReq)), true

	case "Mutation.deleteIssueWorkHours":
		if e.complexity.Mutation.DeleteIssueWorkHours == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssueWorkHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssueWorkHours(childComplexity, args["params"].(*vo.DeleteIssueWorkHoursReq)), true

	case "Mutation.deleteIteration":
		if e.complexity.Mutation.DeleteIteration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIteration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIteration(childComplexity, args["input"].(vo.DeleteIterationReq)), true

	case "Mutation.deleteProject":
		if e.complexity.Mutation.DeleteProject == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.deleteProjectAttachment":
		if e.complexity.Mutation.DeleteProjectAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectAttachment(childComplexity, args["input"].(vo.DeleteProjectAttachmentReq)), true

	case "Mutation.deleteProjectFolder":
		if e.complexity.Mutation.DeleteProjectFolder == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectFolder(childComplexity, args["input"].(vo.DeleteProjectFolderReq)), true

	case "Mutation.deleteProjectResource":
		if e.complexity.Mutation.DeleteProjectResource == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectResource(childComplexity, args["input"].(vo.DeleteProjectResourceReq)), true

	case "Mutation.initFsAccount":
		if e.complexity.Mutation.InitFsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_initFsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InitFsAccount(childComplexity, args["input"].(vo.InitFeiShuAccountReq)), true

	case "Mutation.joinOrgByInviteCode":
		if e.complexity.Mutation.JoinOrgByInviteCode == nil {
			break
		}

		args, err := ec.field_Mutation_joinOrgByInviteCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JoinOrgByInviteCode(childComplexity, args["params"].(vo.JoinOrgByInviteCodeReq)), true

	case "Mutation.recoverRecycleBinRecord":
		if e.complexity.Mutation.RecoverRecycleBinRecord == nil {
			break
		}

		args, err := ec.field_Mutation_recoverRecycleBinRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecoverRecycleBinRecord(childComplexity, args["input"].(vo.RecoverRecycleBinRecordReq)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["input"].(vo.ResetPasswordReq)), true

	case "Mutation.retrievePassword":
		if e.complexity.Mutation.RetrievePassword == nil {
			break
		}

		args, err := ec.field_Mutation_retrievePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RetrievePassword(childComplexity, args["input"].(vo.RetrievePasswordReq)), true

	case "Mutation.sendAuthCode":
		if e.complexity.Mutation.SendAuthCode == nil {
			break
		}

		args, err := ec.field_Mutation_sendAuthCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendAuthCode(childComplexity, args["input"].(vo.SendAuthCodeReq)), true

	case "Mutation.sendSmsLoginCode":
		if e.complexity.Mutation.SendSmsLoginCode == nil {
			break
		}

		args, err := ec.field_Mutation_sendSmsLoginCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendSmsLoginCode(childComplexity, args["input"].(vo.SendSmsLoginCodeReq)), true

	case "Mutation.setPassword":
		if e.complexity.Mutation.SetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_setPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPassword(childComplexity, args["input"].(vo.SetPasswordReq)), true

	case "Mutation.setUserJoinIssue":
		if e.complexity.Mutation.SetUserJoinIssue == nil {
			break
		}

		args, err := ec.field_Mutation_setUserJoinIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUserJoinIssue(childComplexity, args["params"].(vo.SetUserJoinIssueReq)), true

	case "Mutation.switchUserOrganization":
		if e.complexity.Mutation.SwitchUserOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_switchUserOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SwitchUserOrganization(childComplexity, args["input"].(vo.SwitchUserOrganizationReq)), true

	case "Mutation.unbindLoginName":
		if e.complexity.Mutation.UnbindLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_unbindLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnbindLoginName(childComplexity, args["input"].(vo.UnbindLoginNameReq)), true

	case "Mutation.updateFsProjectChatPushSettings":
		if e.complexity.Mutation.UpdateFsProjectChatPushSettings == nil {
			break
		}

		args, err := ec.field_Mutation_updateFsProjectChatPushSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFsProjectChatPushSettings(childComplexity, args["params"].(vo.UpdateFsProjectChatPushSettingsReq)), true

	case "Mutation.updateIssueWorkHours":
		if e.complexity.Mutation.UpdateIssueWorkHours == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueWorkHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueWorkHours(childComplexity, args["params"].(*vo.UpdateIssueWorkHoursReq)), true

	case "Mutation.updateIteration":
		if e.complexity.Mutation.UpdateIteration == nil {
			break
		}

		args, err := ec.field_Mutation_updateIteration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIteration(childComplexity, args["input"].(vo.UpdateIterationReq)), true

	case "Mutation.updateIterationSort":
		if e.complexity.Mutation.UpdateIterationSort == nil {
			break
		}

		args, err := ec.field_Mutation_updateIterationSort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIterationSort(childComplexity, args["input"].(vo.UpdateIterationSortReq)), true

	case "Mutation.updateIterationStatus":
		if e.complexity.Mutation.UpdateIterationStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateIterationStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIterationStatus(childComplexity, args["input"].(vo.UpdateIterationStatusReq)), true

	case "Mutation.updateIterationStatusTime":
		if e.complexity.Mutation.UpdateIterationStatusTime == nil {
			break
		}

		args, err := ec.field_Mutation_updateIterationStatusTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIterationStatusTime(childComplexity, args["input"].(vo.UpdateIterationStatusTimeReq)), true

	case "Mutation.updateMultiIssueWorkHours":
		if e.complexity.Mutation.UpdateMultiIssueWorkHours == nil {
			break
		}

		args, err := ec.field_Mutation_updateMultiIssueWorkHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMultiIssueWorkHours(childComplexity, args["params"].(*vo.UpdateMultiIssueWorkHoursReq)), true

	case "Mutation.updateOrgMemberCheckStatus":
		if e.complexity.Mutation.UpdateOrgMemberCheckStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgMemberCheckStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgMemberCheckStatus(childComplexity, args["input"].(vo.UpdateOrgMemberCheckStatusReq)), true

	case "Mutation.updateOrgMemberStatus":
		if e.complexity.Mutation.UpdateOrgMemberStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgMemberStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgMemberStatus(childComplexity, args["input"].(vo.UpdateOrgMemberStatusReq)), true

	case "Mutation.updateOrganizationSetting":
		if e.complexity.Mutation.UpdateOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationSetting(childComplexity, args["input"].(vo.UpdateOrganizationSettingsReq)), true

	case "Mutation.updateProject":
		if e.complexity.Mutation.UpdateProject == nil {
			break
		}

		args, err := ec.field_Mutation_updateProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProject(childComplexity, args["input"].(vo.UpdateProjectReq)), true

	case "Mutation.updateProjectDetail":
		if e.complexity.Mutation.UpdateProjectDetail == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectDetail(childComplexity, args["input"].(vo.UpdateProjectDetailReq)), true

	case "Mutation.updateProjectFileResource":
		if e.complexity.Mutation.UpdateProjectFileResource == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectFileResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectFileResource(childComplexity, args["input"].(vo.UpdateProjectFileResourceReq)), true

	case "Mutation.updateProjectFolder":
		if e.complexity.Mutation.UpdateProjectFolder == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectFolder(childComplexity, args["input"].(vo.UpdateProjectFolderReq)), true

	case "Mutation.updateProjectResourceFolder":
		if e.complexity.Mutation.UpdateProjectResourceFolder == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectResourceFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectResourceFolder(childComplexity, args["input"].(vo.UpdateProjectResourceFolderReq)), true

	case "Mutation.updateProjectResourceName":
		if e.complexity.Mutation.UpdateProjectResourceName == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectResourceName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectResourceName(childComplexity, args["input"].(vo.UpdateProjectResourceNameReq)), true

	case "Mutation.updateProjectStatus":
		if e.complexity.Mutation.UpdateProjectStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectStatus(childComplexity, args["input"].(vo.UpdateProjectStatusReq)), true

	case "Mutation.updateUserConfig":
		if e.complexity.Mutation.UpdateUserConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserConfig(childComplexity, args["input"].(vo.UpdateUserConfigReq)), true

	case "Mutation.updateUserInfo":
		if e.complexity.Mutation.UpdateUserInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserInfo(childComplexity, args["input"].(vo.UpdateUserInfoReq)), true

	case "Mutation.updateUserPcConfig":
		if e.complexity.Mutation.UpdateUserPcConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPcConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPcConfig(childComplexity, args["input"].(vo.UpdateUserPcConfigReq)), true

	case "Mutation.urgeAuditIssue":
		if e.complexity.Mutation.UrgeAuditIssue == nil {
			break
		}

		args, err := ec.field_Mutation_urgeAuditIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UrgeAuditIssue(childComplexity, args["params"].(vo.UrgeAuditIssueReq)), true

	case "Mutation.urgeIssue":
		if e.complexity.Mutation.UrgeIssue == nil {
			break
		}

		args, err := ec.field_Mutation_urgeIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UrgeIssue(childComplexity, args["params"].(vo.UrgeIssueReq)), true

	case "Mutation.userLogin":
		if e.complexity.Mutation.UserLogin == nil {
			break
		}

		args, err := ec.field_Mutation_userLogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserLogin(childComplexity, args["input"].(vo.UserLoginReq)), true

	case "Mutation.userQuit":
		if e.complexity.Mutation.UserQuit == nil {
			break
		}

		return e.complexity.Mutation.UserQuit(childComplexity), true

	case "Mutation.userRegister":
		if e.complexity.Mutation.UserRegister == nil {
			break
		}

		args, err := ec.field_Mutation_userRegister_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserRegister(childComplexity, args["input"].(vo.UserRegisterReq)), true

	case "Mutation.verifyOldName":
		if e.complexity.Mutation.VerifyOldName == nil {
			break
		}

		args, err := ec.field_Mutation_verifyOldName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyOldName(childComplexity, args["input"].(vo.UnbindLoginNameReq)), true

	case "Mutation.viewAuditIssue":
		if e.complexity.Mutation.ViewAuditIssue == nil {
			break
		}

		args, err := ec.field_Mutation_viewAuditIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ViewAuditIssue(childComplexity, args["params"].(vo.ViewAuditIssueReq)), true

	case "Mutation.withdrawIssue":
		if e.complexity.Mutation.WithdrawIssue == nil {
			break
		}

		args, err := ec.field_Mutation_withdrawIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.WithdrawIssue(childComplexity, args["params"].(vo.WithdrawIssueReq)), true

	case "Notice.content":
		if e.complexity.Notice.Content == nil {
			break
		}

		return e.complexity.Notice.Content(childComplexity), true

	case "Notice.createTime":
		if e.complexity.Notice.CreateTime == nil {
			break
		}

		return e.complexity.Notice.CreateTime(childComplexity), true

	case "Notice.creator":
		if e.complexity.Notice.Creator == nil {
			break
		}

		return e.complexity.Notice.Creator(childComplexity), true

	case "Notice.creatorInfo":
		if e.complexity.Notice.CreatorInfo == nil {
			break
		}

		return e.complexity.Notice.CreatorInfo(childComplexity), true

	case "Notice.ext":
		if e.complexity.Notice.Ext == nil {
			break
		}

		return e.complexity.Notice.Ext(childComplexity), true

	case "Notice.id":
		if e.complexity.Notice.ID == nil {
			break
		}

		return e.complexity.Notice.ID(childComplexity), true

	case "Notice.issueId":
		if e.complexity.Notice.IssueID == nil {
			break
		}

		return e.complexity.Notice.IssueID(childComplexity), true

	case "Notice.issueName":
		if e.complexity.Notice.IssueName == nil {
			break
		}

		return e.complexity.Notice.IssueName(childComplexity), true

	case "Notice.noticer":
		if e.complexity.Notice.Noticer == nil {
			break
		}

		return e.complexity.Notice.Noticer(childComplexity), true

	case "Notice.orgId":
		if e.complexity.Notice.OrgID == nil {
			break
		}

		return e.complexity.Notice.OrgID(childComplexity), true

	case "Notice.parentIssueId":
		if e.complexity.Notice.ParentIssueID == nil {
			break
		}

		return e.complexity.Notice.ParentIssueID(childComplexity), true

	case "Notice.projectId":
		if e.complexity.Notice.ProjectID == nil {
			break
		}

		return e.complexity.Notice.ProjectID(childComplexity), true

	case "Notice.projectName":
		if e.complexity.Notice.ProjectName == nil {
			break
		}

		return e.complexity.Notice.ProjectName(childComplexity), true

	case "Notice.relationType":
		if e.complexity.Notice.RelationType == nil {
			break
		}

		return e.complexity.Notice.RelationType(childComplexity), true

	case "Notice.status":
		if e.complexity.Notice.Status == nil {
			break
		}

		return e.complexity.Notice.Status(childComplexity), true

	case "Notice.trendsId":
		if e.complexity.Notice.TrendsID == nil {
			break
		}

		return e.complexity.Notice.TrendsID(childComplexity), true

	case "Notice.type":
		if e.complexity.Notice.Type == nil {
			break
		}

		return e.complexity.Notice.Type(childComplexity), true

	case "OneActualWorkHourRecord.createTime":
		if e.complexity.OneActualWorkHourRecord.CreateTime == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.CreateTime(childComplexity), true

	case "OneActualWorkHourRecord.creatorName":
		if e.complexity.OneActualWorkHourRecord.CreatorName == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.CreatorName(childComplexity), true

	case "OneActualWorkHourRecord.desc":
		if e.complexity.OneActualWorkHourRecord.Desc == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.Desc(childComplexity), true

	case "OneActualWorkHourRecord.endTime":
		if e.complexity.OneActualWorkHourRecord.EndTime == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.EndTime(childComplexity), true

	case "OneActualWorkHourRecord.id":
		if e.complexity.OneActualWorkHourRecord.ID == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.ID(childComplexity), true

	case "OneActualWorkHourRecord.isEnable":
		if e.complexity.OneActualWorkHourRecord.IsEnable == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.IsEnable(childComplexity), true

	case "OneActualWorkHourRecord.needTime":
		if e.complexity.OneActualWorkHourRecord.NeedTime == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.NeedTime(childComplexity), true

	case "OneActualWorkHourRecord.startTime":
		if e.complexity.OneActualWorkHourRecord.StartTime == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.StartTime(childComplexity), true

	case "OneActualWorkHourRecord.type":
		if e.complexity.OneActualWorkHourRecord.Type == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.Type(childComplexity), true

	case "OneActualWorkHourRecord.worker":
		if e.complexity.OneActualWorkHourRecord.Worker == nil {
			break
		}

		return e.complexity.OneActualWorkHourRecord.Worker(childComplexity), true

	case "OneDateWorkHour.date":
		if e.complexity.OneDateWorkHour.Date == nil {
			break
		}

		return e.complexity.OneDateWorkHour.Date(childComplexity), true

	case "OneDateWorkHour.time":
		if e.complexity.OneDateWorkHour.Time == nil {
			break
		}

		return e.complexity.OneDateWorkHour.Time(childComplexity), true

	case "OneDateWorkHour.weekDay":
		if e.complexity.OneDateWorkHour.WeekDay == nil {
			break
		}

		return e.complexity.OneDateWorkHour.WeekDay(childComplexity), true

	case "OnePersonWorkHourStatisticInfo.actualHourTotal":
		if e.complexity.OnePersonWorkHourStatisticInfo.ActualHourTotal == nil {
			break
		}

		return e.complexity.OnePersonWorkHourStatisticInfo.ActualHourTotal(childComplexity), true

	case "OnePersonWorkHourStatisticInfo.dateWorkHourList":
		if e.complexity.OnePersonWorkHourStatisticInfo.DateWorkHourList == nil {
			break
		}

		return e.complexity.OnePersonWorkHourStatisticInfo.DateWorkHourList(childComplexity), true

	case "OnePersonWorkHourStatisticInfo.name":
		if e.complexity.OnePersonWorkHourStatisticInfo.Name == nil {
			break
		}

		return e.complexity.OnePersonWorkHourStatisticInfo.Name(childComplexity), true

	case "OnePersonWorkHourStatisticInfo.predictHourTotal":
		if e.complexity.OnePersonWorkHourStatisticInfo.PredictHourTotal == nil {
			break
		}

		return e.complexity.OnePersonWorkHourStatisticInfo.PredictHourTotal(childComplexity), true

	case "OnePersonWorkHourStatisticInfo.workerId":
		if e.complexity.OnePersonWorkHourStatisticInfo.WorkerID == nil {
			break
		}

		return e.complexity.OnePersonWorkHourStatisticInfo.WorkerID(childComplexity), true

	case "OneWorkHourRecord.desc":
		if e.complexity.OneWorkHourRecord.Desc == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.Desc(childComplexity), true

	case "OneWorkHourRecord.endTime":
		if e.complexity.OneWorkHourRecord.EndTime == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.EndTime(childComplexity), true

	case "OneWorkHourRecord.id":
		if e.complexity.OneWorkHourRecord.ID == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.ID(childComplexity), true

	case "OneWorkHourRecord.isEnable":
		if e.complexity.OneWorkHourRecord.IsEnable == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.IsEnable(childComplexity), true

	case "OneWorkHourRecord.needTime":
		if e.complexity.OneWorkHourRecord.NeedTime == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.NeedTime(childComplexity), true

	case "OneWorkHourRecord.startTime":
		if e.complexity.OneWorkHourRecord.StartTime == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.StartTime(childComplexity), true

	case "OneWorkHourRecord.type":
		if e.complexity.OneWorkHourRecord.Type == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.Type(childComplexity), true

	case "OneWorkHourRecord.worker":
		if e.complexity.OneWorkHourRecord.Worker == nil {
			break
		}

		return e.complexity.OneWorkHourRecord.Worker(childComplexity), true

	case "OrgConfig.basicShowSetting":
		if e.complexity.OrgConfig.BasicShowSetting == nil {
			break
		}

		return e.complexity.OrgConfig.BasicShowSetting(childComplexity), true

	case "OrgConfig.createTime":
		if e.complexity.OrgConfig.CreateTime == nil {
			break
		}

		return e.complexity.OrgConfig.CreateTime(childComplexity), true

	case "OrgConfig.id":
		if e.complexity.OrgConfig.ID == nil {
			break
		}

		return e.complexity.OrgConfig.ID(childComplexity), true

	case "OrgConfig.isGrayLevel":
		if e.complexity.OrgConfig.IsGrayLevel == nil {
			break
		}

		return e.complexity.OrgConfig.IsGrayLevel(childComplexity), true

	case "OrgConfig.logo":
		if e.complexity.OrgConfig.Logo == nil {
			break
		}

		return e.complexity.OrgConfig.Logo(childComplexity), true

	case "OrgConfig.orgId":
		if e.complexity.OrgConfig.OrgID == nil {
			break
		}

		return e.complexity.OrgConfig.OrgID(childComplexity), true

	case "OrgConfig.orgMemberNumber":
		if e.complexity.OrgConfig.OrgMemberNumber == nil {
			break
		}

		return e.complexity.OrgConfig.OrgMemberNumber(childComplexity), true

	case "OrgConfig.payEndTime":
		if e.complexity.OrgConfig.PayEndTime == nil {
			break
		}

		return e.complexity.OrgConfig.PayEndTime(childComplexity), true

	case "OrgConfig.payLevel":
		if e.complexity.OrgConfig.PayLevel == nil {
			break
		}

		return e.complexity.OrgConfig.PayLevel(childComplexity), true

	case "OrgConfig.payLevelTrue":
		if e.complexity.OrgConfig.PayLevelTrue == nil {
			break
		}

		return e.complexity.OrgConfig.PayLevelTrue(childComplexity), true

	case "OrgConfig.payStartTime":
		if e.complexity.OrgConfig.PayStartTime == nil {
			break
		}

		return e.complexity.OrgConfig.PayStartTime(childComplexity), true

	case "OrgConfig.summaryAppId":
		if e.complexity.OrgConfig.SummaryAppID == nil {
			break
		}

		return e.complexity.OrgConfig.SummaryAppID(childComplexity), true

	case "OrgProjectMemberInfoResp.avatar":
		if e.complexity.OrgProjectMemberInfoResp.Avatar == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.Avatar(childComplexity), true

	case "OrgProjectMemberInfoResp.hasOrgOutInfo":
		if e.complexity.OrgProjectMemberInfoResp.HasOrgOutInfo == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.HasOrgOutInfo(childComplexity), true

	case "OrgProjectMemberInfoResp.hasOutInfo":
		if e.complexity.OrgProjectMemberInfoResp.HasOutInfo == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.HasOutInfo(childComplexity), true

	case "OrgProjectMemberInfoResp.name":
		if e.complexity.OrgProjectMemberInfoResp.Name == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.Name(childComplexity), true

	case "OrgProjectMemberInfoResp.namePy":
		if e.complexity.OrgProjectMemberInfoResp.NamePy == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.NamePy(childComplexity), true

	case "OrgProjectMemberInfoResp.orgId":
		if e.complexity.OrgProjectMemberInfoResp.OrgID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgID(childComplexity), true

	case "OrgProjectMemberInfoResp.orgUserCheckStatus":
		if e.complexity.OrgProjectMemberInfoResp.OrgUserCheckStatus == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgUserCheckStatus(childComplexity), true

	case "OrgProjectMemberInfoResp.orgUserIsDelete":
		if e.complexity.OrgProjectMemberInfoResp.OrgUserIsDelete == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgUserIsDelete(childComplexity), true

	case "OrgProjectMemberInfoResp.orgUserStatus":
		if e.complexity.OrgProjectMemberInfoResp.OrgUserStatus == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgUserStatus(childComplexity), true

	case "OrgProjectMemberInfoResp.outOrgId":
		if e.complexity.OrgProjectMemberInfoResp.OutOrgID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OutOrgID(childComplexity), true

	case "OrgProjectMemberInfoResp.outUserId":
		if e.complexity.OrgProjectMemberInfoResp.OutUserID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OutUserID(childComplexity), true

	case "OrgProjectMemberInfoResp.userId":
		if e.complexity.OrgProjectMemberInfoResp.UserID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.UserID(childComplexity), true

	case "OrganizationInfoResp.address":
		if e.complexity.OrganizationInfoResp.Address == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Address(childComplexity), true

	case "OrganizationInfoResp.cityCname":
		if e.complexity.OrganizationInfoResp.CityCname == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CityCname(childComplexity), true

	case "OrganizationInfoResp.cityId":
		if e.complexity.OrganizationInfoResp.CityID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CityID(childComplexity), true

	case "OrganizationInfoResp.code":
		if e.complexity.OrganizationInfoResp.Code == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Code(childComplexity), true

	case "OrganizationInfoResp.countryCname":
		if e.complexity.OrganizationInfoResp.CountryCname == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CountryCname(childComplexity), true

	case "OrganizationInfoResp.countryId":
		if e.complexity.OrganizationInfoResp.CountryID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CountryID(childComplexity), true

	case "OrganizationInfoResp.industryId":
		if e.complexity.OrganizationInfoResp.IndustryID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.IndustryID(childComplexity), true

	case "OrganizationInfoResp.industryName":
		if e.complexity.OrganizationInfoResp.IndustryName == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.IndustryName(childComplexity), true

	case "OrganizationInfoResp.logoUrl":
		if e.complexity.OrganizationInfoResp.LogoURL == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.LogoURL(childComplexity), true

	case "OrganizationInfoResp.orgId":
		if e.complexity.OrganizationInfoResp.OrgID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.OrgID(childComplexity), true

	case "OrganizationInfoResp.orgName":
		if e.complexity.OrganizationInfoResp.OrgName == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.OrgName(childComplexity), true

	case "OrganizationInfoResp.owner":
		if e.complexity.OrganizationInfoResp.Owner == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Owner(childComplexity), true

	case "OrganizationInfoResp.ownerInfo":
		if e.complexity.OrganizationInfoResp.OwnerInfo == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.OwnerInfo(childComplexity), true

	case "OrganizationInfoResp.provinceCname":
		if e.complexity.OrganizationInfoResp.ProvinceCname == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.ProvinceCname(childComplexity), true

	case "OrganizationInfoResp.provinceId":
		if e.complexity.OrganizationInfoResp.ProvinceID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.ProvinceID(childComplexity), true

	case "OrganizationInfoResp.remark":
		if e.complexity.OrganizationInfoResp.Remark == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Remark(childComplexity), true

	case "OrganizationInfoResp.scale":
		if e.complexity.OrganizationInfoResp.Scale == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Scale(childComplexity), true

	case "OrganizationInfoResp.thirdCode":
		if e.complexity.OrganizationInfoResp.ThirdCode == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.ThirdCode(childComplexity), true

	case "OrganizationInfoResp.webSite":
		if e.complexity.OrganizationInfoResp.WebSite == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.WebSite(childComplexity), true

	case "OrganizationUser.auditTime":
		if e.complexity.OrganizationUser.AuditTime == nil {
			break
		}

		return e.complexity.OrganizationUser.AuditTime(childComplexity), true

	case "OrganizationUser.auditorId":
		if e.complexity.OrganizationUser.AuditorID == nil {
			break
		}

		return e.complexity.OrganizationUser.AuditorID(childComplexity), true

	case "OrganizationUser.auditorInfo":
		if e.complexity.OrganizationUser.AuditorInfo == nil {
			break
		}

		return e.complexity.OrganizationUser.AuditorInfo(childComplexity), true

	case "OrganizationUser.checkStatus":
		if e.complexity.OrganizationUser.CheckStatus == nil {
			break
		}

		return e.complexity.OrganizationUser.CheckStatus(childComplexity), true

	case "OrganizationUser.createTime":
		if e.complexity.OrganizationUser.CreateTime == nil {
			break
		}

		return e.complexity.OrganizationUser.CreateTime(childComplexity), true

	case "OrganizationUser.creator":
		if e.complexity.OrganizationUser.Creator == nil {
			break
		}

		return e.complexity.OrganizationUser.Creator(childComplexity), true

	case "OrganizationUser.id":
		if e.complexity.OrganizationUser.ID == nil {
			break
		}

		return e.complexity.OrganizationUser.ID(childComplexity), true

	case "OrganizationUser.orgId":
		if e.complexity.OrganizationUser.OrgID == nil {
			break
		}

		return e.complexity.OrganizationUser.OrgID(childComplexity), true

	case "OrganizationUser.status":
		if e.complexity.OrganizationUser.Status == nil {
			break
		}

		return e.complexity.OrganizationUser.Status(childComplexity), true

	case "OrganizationUser.statusChangeTime":
		if e.complexity.OrganizationUser.StatusChangeTime == nil {
			break
		}

		return e.complexity.OrganizationUser.StatusChangeTime(childComplexity), true

	case "OrganizationUser.statusChangerId":
		if e.complexity.OrganizationUser.StatusChangerID == nil {
			break
		}

		return e.complexity.OrganizationUser.StatusChangerID(childComplexity), true

	case "OrganizationUser.updateTime":
		if e.complexity.OrganizationUser.UpdateTime == nil {
			break
		}

		return e.complexity.OrganizationUser.UpdateTime(childComplexity), true

	case "OrganizationUser.updator":
		if e.complexity.OrganizationUser.Updator == nil {
			break
		}

		return e.complexity.OrganizationUser.Updator(childComplexity), true

	case "OrganizationUser.useStatus":
		if e.complexity.OrganizationUser.UseStatus == nil {
			break
		}

		return e.complexity.OrganizationUser.UseStatus(childComplexity), true

	case "OrganizationUser.userId":
		if e.complexity.OrganizationUser.UserID == nil {
			break
		}

		return e.complexity.OrganizationUser.UserID(childComplexity), true

	case "OrganizationUser.userInfo":
		if e.complexity.OrganizationUser.UserInfo == nil {
			break
		}

		return e.complexity.OrganizationUser.UserInfo(childComplexity), true

	case "OrganizationUser.userRole":
		if e.complexity.OrganizationUser.UserRole == nil {
			break
		}

		return e.complexity.OrganizationUser.UserRole(childComplexity), true

	case "OssPostPolicyResp.accessId":
		if e.complexity.OssPostPolicyResp.AccessID == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.AccessID(childComplexity), true

	case "OssPostPolicyResp.bucket":
		if e.complexity.OssPostPolicyResp.Bucket == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Bucket(childComplexity), true

	case "OssPostPolicyResp.callback":
		if e.complexity.OssPostPolicyResp.Callback == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Callback(childComplexity), true

	case "OssPostPolicyResp.dir":
		if e.complexity.OssPostPolicyResp.Dir == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Dir(childComplexity), true

	case "OssPostPolicyResp.expire":
		if e.complexity.OssPostPolicyResp.Expire == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Expire(childComplexity), true

	case "OssPostPolicyResp.fileName":
		if e.complexity.OssPostPolicyResp.FileName == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.FileName(childComplexity), true

	case "OssPostPolicyResp.host":
		if e.complexity.OssPostPolicyResp.Host == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Host(childComplexity), true

	case "OssPostPolicyResp.maxFileSize":
		if e.complexity.OssPostPolicyResp.MaxFileSize == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.MaxFileSize(childComplexity), true

	case "OssPostPolicyResp.policy":
		if e.complexity.OssPostPolicyResp.Policy == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Policy(childComplexity), true

	case "OssPostPolicyResp.region":
		if e.complexity.OssPostPolicyResp.Region == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Region(childComplexity), true

	case "OssPostPolicyResp.signature":
		if e.complexity.OssPostPolicyResp.Signature == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Signature(childComplexity), true

	case "ParentInfo.code":
		if e.complexity.ParentInfo.Code == nil {
			break
		}

		return e.complexity.ParentInfo.Code(childComplexity), true

	case "ParentInfo.id":
		if e.complexity.ParentInfo.ID == nil {
			break
		}

		return e.complexity.ParentInfo.ID(childComplexity), true

	case "ParentInfo.title":
		if e.complexity.ParentInfo.Title == nil {
			break
		}

		return e.complexity.ParentInfo.Title(childComplexity), true

	case "PayLimitNumResp.fileSize":
		if e.complexity.PayLimitNumResp.FileSize == nil {
			break
		}

		return e.complexity.PayLimitNumResp.FileSize(childComplexity), true

	case "PayLimitNumResp.issueNum":
		if e.complexity.PayLimitNumResp.IssueNum == nil {
			break
		}

		return e.complexity.PayLimitNumResp.IssueNum(childComplexity), true

	case "PayLimitNumResp.projectNum":
		if e.complexity.PayLimitNumResp.ProjectNum == nil {
			break
		}

		return e.complexity.PayLimitNumResp.ProjectNum(childComplexity), true

	case "Permission.code":
		if e.complexity.Permission.Code == nil {
			break
		}

		return e.complexity.Permission.Code(childComplexity), true

	case "Permission.createTime":
		if e.complexity.Permission.CreateTime == nil {
			break
		}

		return e.complexity.Permission.CreateTime(childComplexity), true

	case "Permission.creator":
		if e.complexity.Permission.Creator == nil {
			break
		}

		return e.complexity.Permission.Creator(childComplexity), true

	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true

	case "Permission.isShow":
		if e.complexity.Permission.IsShow == nil {
			break
		}

		return e.complexity.Permission.IsShow(childComplexity), true

	case "Permission.langCode":
		if e.complexity.Permission.LangCode == nil {
			break
		}

		return e.complexity.Permission.LangCode(childComplexity), true

	case "Permission.name":
		if e.complexity.Permission.Name == nil {
			break
		}

		return e.complexity.Permission.Name(childComplexity), true

	case "Permission.orgId":
		if e.complexity.Permission.OrgID == nil {
			break
		}

		return e.complexity.Permission.OrgID(childComplexity), true

	case "Permission.parentId":
		if e.complexity.Permission.ParentID == nil {
			break
		}

		return e.complexity.Permission.ParentID(childComplexity), true

	case "Permission.path":
		if e.complexity.Permission.Path == nil {
			break
		}

		return e.complexity.Permission.Path(childComplexity), true

	case "Permission.remark":
		if e.complexity.Permission.Remark == nil {
			break
		}

		return e.complexity.Permission.Remark(childComplexity), true

	case "Permission.status":
		if e.complexity.Permission.Status == nil {
			break
		}

		return e.complexity.Permission.Status(childComplexity), true

	case "Permission.type":
		if e.complexity.Permission.Type == nil {
			break
		}

		return e.complexity.Permission.Type(childComplexity), true

	case "Permission.updateTime":
		if e.complexity.Permission.UpdateTime == nil {
			break
		}

		return e.complexity.Permission.UpdateTime(childComplexity), true

	case "Permission.updator":
		if e.complexity.Permission.Updator == nil {
			break
		}

		return e.complexity.Permission.Updator(childComplexity), true

	case "PermissionList.list":
		if e.complexity.PermissionList.List == nil {
			break
		}

		return e.complexity.PermissionList.List(childComplexity), true

	case "PermissionList.total":
		if e.complexity.PermissionList.Total == nil {
			break
		}

		return e.complexity.PermissionList.Total(childComplexity), true

	case "PermissionOperation.createTime":
		if e.complexity.PermissionOperation.CreateTime == nil {
			break
		}

		return e.complexity.PermissionOperation.CreateTime(childComplexity), true

	case "PermissionOperation.creator":
		if e.complexity.PermissionOperation.Creator == nil {
			break
		}

		return e.complexity.PermissionOperation.Creator(childComplexity), true

	case "PermissionOperation.id":
		if e.complexity.PermissionOperation.ID == nil {
			break
		}

		return e.complexity.PermissionOperation.ID(childComplexity), true

	case "PermissionOperation.isShow":
		if e.complexity.PermissionOperation.IsShow == nil {
			break
		}

		return e.complexity.PermissionOperation.IsShow(childComplexity), true

	case "PermissionOperation.langCode":
		if e.complexity.PermissionOperation.LangCode == nil {
			break
		}

		return e.complexity.PermissionOperation.LangCode(childComplexity), true

	case "PermissionOperation.name":
		if e.complexity.PermissionOperation.Name == nil {
			break
		}

		return e.complexity.PermissionOperation.Name(childComplexity), true

	case "PermissionOperation.operationCodes":
		if e.complexity.PermissionOperation.OperationCodes == nil {
			break
		}

		return e.complexity.PermissionOperation.OperationCodes(childComplexity), true

	case "PermissionOperation.orgId":
		if e.complexity.PermissionOperation.OrgID == nil {
			break
		}

		return e.complexity.PermissionOperation.OrgID(childComplexity), true

	case "PermissionOperation.permissionId":
		if e.complexity.PermissionOperation.PermissionID == nil {
			break
		}

		return e.complexity.PermissionOperation.PermissionID(childComplexity), true

	case "PermissionOperation.remark":
		if e.complexity.PermissionOperation.Remark == nil {
			break
		}

		return e.complexity.PermissionOperation.Remark(childComplexity), true

	case "PermissionOperation.status":
		if e.complexity.PermissionOperation.Status == nil {
			break
		}

		return e.complexity.PermissionOperation.Status(childComplexity), true

	case "PermissionOperation.updateTime":
		if e.complexity.PermissionOperation.UpdateTime == nil {
			break
		}

		return e.complexity.PermissionOperation.UpdateTime(childComplexity), true

	case "PermissionOperation.updator":
		if e.complexity.PermissionOperation.Updator == nil {
			break
		}

		return e.complexity.PermissionOperation.Updator(childComplexity), true

	case "PermissionOperationListResp.operationList":
		if e.complexity.PermissionOperationListResp.OperationList == nil {
			break
		}

		return e.complexity.PermissionOperationListResp.OperationList(childComplexity), true

	case "PermissionOperationListResp.permissionHave":
		if e.complexity.PermissionOperationListResp.PermissionHave == nil {
			break
		}

		return e.complexity.PermissionOperationListResp.PermissionHave(childComplexity), true

	case "PermissionOperationListResp.permissionInfo":
		if e.complexity.PermissionOperationListResp.PermissionInfo == nil {
			break
		}

		return e.complexity.PermissionOperationListResp.PermissionInfo(childComplexity), true

	case "PersonalInfo.avatar":
		if e.complexity.PersonalInfo.Avatar == nil {
			break
		}

		return e.complexity.PersonalInfo.Avatar(childComplexity), true

	case "PersonalInfo.birthday":
		if e.complexity.PersonalInfo.Birthday == nil {
			break
		}

		return e.complexity.PersonalInfo.Birthday(childComplexity), true

	case "PersonalInfo.createTime":
		if e.complexity.PersonalInfo.CreateTime == nil {
			break
		}

		return e.complexity.PersonalInfo.CreateTime(childComplexity), true

	case "PersonalInfo.email":
		if e.complexity.PersonalInfo.Email == nil {
			break
		}

		return e.complexity.PersonalInfo.Email(childComplexity), true

	case "PersonalInfo.emplId":
		if e.complexity.PersonalInfo.EmplID == nil {
			break
		}

		return e.complexity.PersonalInfo.EmplID(childComplexity), true

	case "PersonalInfo.extraDataMap":
		if e.complexity.PersonalInfo.ExtraDataMap == nil {
			break
		}

		return e.complexity.PersonalInfo.ExtraDataMap(childComplexity), true

	case "PersonalInfo.functions":
		if e.complexity.PersonalInfo.Functions == nil {
			break
		}

		return e.complexity.PersonalInfo.Functions(childComplexity), true

	case "PersonalInfo.id":
		if e.complexity.PersonalInfo.ID == nil {
			break
		}

		return e.complexity.PersonalInfo.ID(childComplexity), true

	case "PersonalInfo.isAdmin":
		if e.complexity.PersonalInfo.IsAdmin == nil {
			break
		}

		return e.complexity.PersonalInfo.IsAdmin(childComplexity), true

	case "PersonalInfo.isManager":
		if e.complexity.PersonalInfo.IsManager == nil {
			break
		}

		return e.complexity.PersonalInfo.IsManager(childComplexity), true

	case "PersonalInfo.language":
		if e.complexity.PersonalInfo.Language == nil {
			break
		}

		return e.complexity.PersonalInfo.Language(childComplexity), true

	case "PersonalInfo.lastLoginIp":
		if e.complexity.PersonalInfo.LastLoginIP == nil {
			break
		}

		return e.complexity.PersonalInfo.LastLoginIP(childComplexity), true

	case "PersonalInfo.lastLoginTime":
		if e.complexity.PersonalInfo.LastLoginTime == nil {
			break
		}

		return e.complexity.PersonalInfo.LastLoginTime(childComplexity), true

	case "PersonalInfo.level":
		if e.complexity.PersonalInfo.Level == nil {
			break
		}

		return e.complexity.PersonalInfo.Level(childComplexity), true

	case "PersonalInfo.levelName":
		if e.complexity.PersonalInfo.LevelName == nil {
			break
		}

		return e.complexity.PersonalInfo.LevelName(childComplexity), true

	case "PersonalInfo.loginFailCount":
		if e.complexity.PersonalInfo.LoginFailCount == nil {
			break
		}

		return e.complexity.PersonalInfo.LoginFailCount(childComplexity), true

	case "PersonalInfo.loginName":
		if e.complexity.PersonalInfo.LoginName == nil {
			break
		}

		return e.complexity.PersonalInfo.LoginName(childComplexity), true

	case "PersonalInfo.loginNameEditCount":
		if e.complexity.PersonalInfo.LoginNameEditCount == nil {
			break
		}

		return e.complexity.PersonalInfo.LoginNameEditCount(childComplexity), true

	case "PersonalInfo.mobile":
		if e.complexity.PersonalInfo.Mobile == nil {
			break
		}

		return e.complexity.PersonalInfo.Mobile(childComplexity), true

	case "PersonalInfo.motto":
		if e.complexity.PersonalInfo.Motto == nil {
			break
		}

		return e.complexity.PersonalInfo.Motto(childComplexity), true

	case "PersonalInfo.name":
		if e.complexity.PersonalInfo.Name == nil {
			break
		}

		return e.complexity.PersonalInfo.Name(childComplexity), true

	case "PersonalInfo.orgCode":
		if e.complexity.PersonalInfo.OrgCode == nil {
			break
		}

		return e.complexity.PersonalInfo.OrgCode(childComplexity), true

	case "PersonalInfo.orgId":
		if e.complexity.PersonalInfo.OrgID == nil {
			break
		}

		return e.complexity.PersonalInfo.OrgID(childComplexity), true

	case "PersonalInfo.orgName":
		if e.complexity.PersonalInfo.OrgName == nil {
			break
		}

		return e.complexity.PersonalInfo.OrgName(childComplexity), true

	case "PersonalInfo.passwordSet":
		if e.complexity.PersonalInfo.PasswordSet == nil {
			break
		}

		return e.complexity.PersonalInfo.PasswordSet(childComplexity), true

	case "PersonalInfo.remindBindPhone":
		if e.complexity.PersonalInfo.RemindBindPhone == nil {
			break
		}

		return e.complexity.PersonalInfo.RemindBindPhone(childComplexity), true

	case "PersonalInfo.rimanente":
		if e.complexity.PersonalInfo.Rimanente == nil {
			break
		}

		return e.complexity.PersonalInfo.Rimanente(childComplexity), true

	case "PersonalInfo.sex":
		if e.complexity.PersonalInfo.Sex == nil {
			break
		}

		return e.complexity.PersonalInfo.Sex(childComplexity), true

	case "PersonalInfo.sourceChannel":
		if e.complexity.PersonalInfo.SourceChannel == nil {
			break
		}

		return e.complexity.PersonalInfo.SourceChannel(childComplexity), true

	case "PersonalInfo.thirdName":
		if e.complexity.PersonalInfo.ThirdName == nil {
			break
		}

		return e.complexity.PersonalInfo.ThirdName(childComplexity), true

	case "PersonalInfo.updateTime":
		if e.complexity.PersonalInfo.UpdateTime == nil {
			break
		}

		return e.complexity.PersonalInfo.UpdateTime(childComplexity), true

	case "PredictListItem.name":
		if e.complexity.PredictListItem.Name == nil {
			break
		}

		return e.complexity.PredictListItem.Name(childComplexity), true

	case "PredictListItem.workHour":
		if e.complexity.PredictListItem.WorkHour == nil {
			break
		}

		return e.complexity.PredictListItem.WorkHour(childComplexity), true

	case "Priority.bgStyle":
		if e.complexity.Priority.BgStyle == nil {
			break
		}

		return e.complexity.Priority.BgStyle(childComplexity), true

	case "Priority.createTime":
		if e.complexity.Priority.CreateTime == nil {
			break
		}

		return e.complexity.Priority.CreateTime(childComplexity), true

	case "Priority.creator":
		if e.complexity.Priority.Creator == nil {
			break
		}

		return e.complexity.Priority.Creator(childComplexity), true

	case "Priority.fontStyle":
		if e.complexity.Priority.FontStyle == nil {
			break
		}

		return e.complexity.Priority.FontStyle(childComplexity), true

	case "Priority.id":
		if e.complexity.Priority.ID == nil {
			break
		}

		return e.complexity.Priority.ID(childComplexity), true

	case "Priority.isDefault":
		if e.complexity.Priority.IsDefault == nil {
			break
		}

		return e.complexity.Priority.IsDefault(childComplexity), true

	case "Priority.isDelete":
		if e.complexity.Priority.IsDelete == nil {
			break
		}

		return e.complexity.Priority.IsDelete(childComplexity), true

	case "Priority.langCode":
		if e.complexity.Priority.LangCode == nil {
			break
		}

		return e.complexity.Priority.LangCode(childComplexity), true

	case "Priority.name":
		if e.complexity.Priority.Name == nil {
			break
		}

		return e.complexity.Priority.Name(childComplexity), true

	case "Priority.orgId":
		if e.complexity.Priority.OrgID == nil {
			break
		}

		return e.complexity.Priority.OrgID(childComplexity), true

	case "Priority.remark":
		if e.complexity.Priority.Remark == nil {
			break
		}

		return e.complexity.Priority.Remark(childComplexity), true

	case "Priority.sort":
		if e.complexity.Priority.Sort == nil {
			break
		}

		return e.complexity.Priority.Sort(childComplexity), true

	case "Priority.status":
		if e.complexity.Priority.Status == nil {
			break
		}

		return e.complexity.Priority.Status(childComplexity), true

	case "Priority.type":
		if e.complexity.Priority.Type == nil {
			break
		}

		return e.complexity.Priority.Type(childComplexity), true

	case "Priority.updateTime":
		if e.complexity.Priority.UpdateTime == nil {
			break
		}

		return e.complexity.Priority.UpdateTime(childComplexity), true

	case "Priority.updator":
		if e.complexity.Priority.Updator == nil {
			break
		}

		return e.complexity.Priority.Updator(childComplexity), true

	case "Priority.version":
		if e.complexity.Priority.Version == nil {
			break
		}

		return e.complexity.Priority.Version(childComplexity), true

	case "PriorityList.list":
		if e.complexity.PriorityList.List == nil {
			break
		}

		return e.complexity.PriorityList.List(childComplexity), true

	case "PriorityList.total":
		if e.complexity.PriorityList.Total == nil {
			break
		}

		return e.complexity.PriorityList.Total(childComplexity), true

	case "Project.allIssues":
		if e.complexity.Project.AllIssues == nil {
			break
		}

		return e.complexity.Project.AllIssues(childComplexity), true

	case "Project.allStatus":
		if e.complexity.Project.AllStatus == nil {
			break
		}

		return e.complexity.Project.AllStatus(childComplexity), true

	case "Project.appId":
		if e.complexity.Project.AppID == nil {
			break
		}

		return e.complexity.Project.AppID(childComplexity), true

	case "Project.code":
		if e.complexity.Project.Code == nil {
			break
		}

		return e.complexity.Project.Code(childComplexity), true

	case "Project.createTime":
		if e.complexity.Project.CreateTime == nil {
			break
		}

		return e.complexity.Project.CreateTime(childComplexity), true

	case "Project.creator":
		if e.complexity.Project.Creator == nil {
			break
		}

		return e.complexity.Project.Creator(childComplexity), true

	case "Project.creatorInfo":
		if e.complexity.Project.CreatorInfo == nil {
			break
		}

		return e.complexity.Project.CreatorInfo(childComplexity), true

	case "Project.finishIssues":
		if e.complexity.Project.FinishIssues == nil {
			break
		}

		return e.complexity.Project.FinishIssues(childComplexity), true

	case "Project.followerInfo":
		if e.complexity.Project.FollowerInfo == nil {
			break
		}

		return e.complexity.Project.FollowerInfo(childComplexity), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.icon":
		if e.complexity.Project.Icon == nil {
			break
		}

		return e.complexity.Project.Icon(childComplexity), true

	case "Project.isDelete":
		if e.complexity.Project.IsDelete == nil {
			break
		}

		return e.complexity.Project.IsDelete(childComplexity), true

	case "Project.isFiling":
		if e.complexity.Project.IsFiling == nil {
			break
		}

		return e.complexity.Project.IsFiling(childComplexity), true

	case "Project.isStar":
		if e.complexity.Project.IsStar == nil {
			break
		}

		return e.complexity.Project.IsStar(childComplexity), true

	case "Project.isSyncOutCalendar":
		if e.complexity.Project.IsSyncOutCalendar == nil {
			break
		}

		return e.complexity.Project.IsSyncOutCalendar(childComplexity), true

	case "Project.iterationStat":
		if e.complexity.Project.IterationStat == nil {
			break
		}

		return e.complexity.Project.IterationStat(childComplexity), true

	case "Project.memberInfo":
		if e.complexity.Project.MemberInfo == nil {
			break
		}

		return e.complexity.Project.MemberInfo(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.orgId":
		if e.complexity.Project.OrgID == nil {
			break
		}

		return e.complexity.Project.OrgID(childComplexity), true

	case "Project.overdueIssues":
		if e.complexity.Project.OverdueIssues == nil {
			break
		}

		return e.complexity.Project.OverdueIssues(childComplexity), true

	case "Project.owner":
		if e.complexity.Project.Owner == nil {
			break
		}

		return e.complexity.Project.Owner(childComplexity), true

	case "Project.ownerInfo":
		if e.complexity.Project.OwnerInfo == nil {
			break
		}

		return e.complexity.Project.OwnerInfo(childComplexity), true

	case "Project.ownersInfo":
		if e.complexity.Project.OwnersInfo == nil {
			break
		}

		return e.complexity.Project.OwnersInfo(childComplexity), true

	case "Project.planEndTime":
		if e.complexity.Project.PlanEndTime == nil {
			break
		}

		return e.complexity.Project.PlanEndTime(childComplexity), true

	case "Project.planStartTime":
		if e.complexity.Project.PlanStartTime == nil {
			break
		}

		return e.complexity.Project.PlanStartTime(childComplexity), true

	case "Project.preCode":
		if e.complexity.Project.PreCode == nil {
			break
		}

		return e.complexity.Project.PreCode(childComplexity), true

	case "Project.priorityId":
		if e.complexity.Project.PriorityID == nil {
			break
		}

		return e.complexity.Project.PriorityID(childComplexity), true

	case "Project.projectTypeId":
		if e.complexity.Project.ProjectTypeID == nil {
			break
		}

		return e.complexity.Project.ProjectTypeID(childComplexity), true

	case "Project.projectTypeLangCode":
		if e.complexity.Project.ProjectTypeLangCode == nil {
			break
		}

		return e.complexity.Project.ProjectTypeLangCode(childComplexity), true

	case "Project.projectTypeName":
		if e.complexity.Project.ProjectTypeName == nil {
			break
		}

		return e.complexity.Project.ProjectTypeName(childComplexity), true

	case "Project.publicStatus":
		if e.complexity.Project.PublicStatus == nil {
			break
		}

		return e.complexity.Project.PublicStatus(childComplexity), true

	case "Project.relateUnfinish":
		if e.complexity.Project.RelateUnfinish == nil {
			break
		}

		return e.complexity.Project.RelateUnfinish(childComplexity), true

	case "Project.remark":
		if e.complexity.Project.Remark == nil {
			break
		}

		return e.complexity.Project.Remark(childComplexity), true

	case "Project.resourceCompressedPath":
		if e.complexity.Project.ResourceCompressedPath == nil {
			break
		}

		return e.complexity.Project.ResourceCompressedPath(childComplexity), true

	case "Project.resourceId":
		if e.complexity.Project.ResourceID == nil {
			break
		}

		return e.complexity.Project.ResourceID(childComplexity), true

	case "Project.resourcePath":
		if e.complexity.Project.ResourcePath == nil {
			break
		}

		return e.complexity.Project.ResourcePath(childComplexity), true

	case "Project.status":
		if e.complexity.Project.Status == nil {
			break
		}

		return e.complexity.Project.Status(childComplexity), true

	case "Project.statusType":
		if e.complexity.Project.StatusType == nil {
			break
		}

		return e.complexity.Project.StatusType(childComplexity), true

	case "Project.updateTime":
		if e.complexity.Project.UpdateTime == nil {
			break
		}

		return e.complexity.Project.UpdateTime(childComplexity), true

	case "Project.updator":
		if e.complexity.Project.Updator == nil {
			break
		}

		return e.complexity.Project.Updator(childComplexity), true

	case "Project.version":
		if e.complexity.Project.Version == nil {
			break
		}

		return e.complexity.Project.Version(childComplexity), true

	case "ProjectDayStat.bugCount":
		if e.complexity.ProjectDayStat.BugCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugCount(childComplexity), true

	case "ProjectDayStat.bugEndCount":
		if e.complexity.ProjectDayStat.BugEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugEndCount(childComplexity), true

	case "ProjectDayStat.bugOverdueCount":
		if e.complexity.ProjectDayStat.BugOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugOverdueCount(childComplexity), true

	case "ProjectDayStat.bugRunningCount":
		if e.complexity.ProjectDayStat.BugRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugRunningCount(childComplexity), true

	case "ProjectDayStat.bugWaitCount":
		if e.complexity.ProjectDayStat.BugWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugWaitCount(childComplexity), true

	case "ProjectDayStat.createTime":
		if e.complexity.ProjectDayStat.CreateTime == nil {
			break
		}

		return e.complexity.ProjectDayStat.CreateTime(childComplexity), true

	case "ProjectDayStat.creator":
		if e.complexity.ProjectDayStat.Creator == nil {
			break
		}

		return e.complexity.ProjectDayStat.Creator(childComplexity), true

	case "ProjectDayStat.demandCount":
		if e.complexity.ProjectDayStat.DemandCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandCount(childComplexity), true

	case "ProjectDayStat.demandEndCount":
		if e.complexity.ProjectDayStat.DemandEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandEndCount(childComplexity), true

	case "ProjectDayStat.demandOverdueCount":
		if e.complexity.ProjectDayStat.DemandOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandOverdueCount(childComplexity), true

	case "ProjectDayStat.demandRunningCount":
		if e.complexity.ProjectDayStat.DemandRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandRunningCount(childComplexity), true

	case "ProjectDayStat.demandWaitCount":
		if e.complexity.ProjectDayStat.DemandWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandWaitCount(childComplexity), true

	case "ProjectDayStat.ext":
		if e.complexity.ProjectDayStat.Ext == nil {
			break
		}

		return e.complexity.ProjectDayStat.Ext(childComplexity), true

	case "ProjectDayStat.id":
		if e.complexity.ProjectDayStat.ID == nil {
			break
		}

		return e.complexity.ProjectDayStat.ID(childComplexity), true

	case "ProjectDayStat.isDelete":
		if e.complexity.ProjectDayStat.IsDelete == nil {
			break
		}

		return e.complexity.ProjectDayStat.IsDelete(childComplexity), true

	case "ProjectDayStat.issueCount":
		if e.complexity.ProjectDayStat.IssueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueCount(childComplexity), true

	case "ProjectDayStat.issueEndCount":
		if e.complexity.ProjectDayStat.IssueEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueEndCount(childComplexity), true

	case "ProjectDayStat.issueOverdueCount":
		if e.complexity.ProjectDayStat.IssueOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueOverdueCount(childComplexity), true

	case "ProjectDayStat.issueRunningCount":
		if e.complexity.ProjectDayStat.IssueRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueRunningCount(childComplexity), true

	case "ProjectDayStat.issueWaitCount":
		if e.complexity.ProjectDayStat.IssueWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueWaitCount(childComplexity), true

	case "ProjectDayStat.orgId":
		if e.complexity.ProjectDayStat.OrgID == nil {
			break
		}

		return e.complexity.ProjectDayStat.OrgID(childComplexity), true

	case "ProjectDayStat.projectId":
		if e.complexity.ProjectDayStat.ProjectID == nil {
			break
		}

		return e.complexity.ProjectDayStat.ProjectID(childComplexity), true

	case "ProjectDayStat.statDate":
		if e.complexity.ProjectDayStat.StatDate == nil {
			break
		}

		return e.complexity.ProjectDayStat.StatDate(childComplexity), true

	case "ProjectDayStat.status":
		if e.complexity.ProjectDayStat.Status == nil {
			break
		}

		return e.complexity.ProjectDayStat.Status(childComplexity), true

	case "ProjectDayStat.storyPointCount":
		if e.complexity.ProjectDayStat.StoryPointCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointCount(childComplexity), true

	case "ProjectDayStat.storyPointEndCount":
		if e.complexity.ProjectDayStat.StoryPointEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointEndCount(childComplexity), true

	case "ProjectDayStat.storyPointOverdueCount":
		if e.complexity.ProjectDayStat.StoryPointOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointOverdueCount(childComplexity), true

	case "ProjectDayStat.storyPointRunningCount":
		if e.complexity.ProjectDayStat.StoryPointRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointRunningCount(childComplexity), true

	case "ProjectDayStat.storyPointWaitCount":
		if e.complexity.ProjectDayStat.StoryPointWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointWaitCount(childComplexity), true

	case "ProjectDayStat.taskCount":
		if e.complexity.ProjectDayStat.TaskCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskCount(childComplexity), true

	case "ProjectDayStat.taskEndCount":
		if e.complexity.ProjectDayStat.TaskEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskEndCount(childComplexity), true

	case "ProjectDayStat.taskOverdueCount":
		if e.complexity.ProjectDayStat.TaskOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskOverdueCount(childComplexity), true

	case "ProjectDayStat.taskRunningCount":
		if e.complexity.ProjectDayStat.TaskRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskRunningCount(childComplexity), true

	case "ProjectDayStat.taskWaitCount":
		if e.complexity.ProjectDayStat.TaskWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskWaitCount(childComplexity), true

	case "ProjectDayStat.testtaskCount":
		if e.complexity.ProjectDayStat.TesttaskCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskCount(childComplexity), true

	case "ProjectDayStat.testtaskEndCount":
		if e.complexity.ProjectDayStat.TesttaskEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskEndCount(childComplexity), true

	case "ProjectDayStat.testtaskOverdueCount":
		if e.complexity.ProjectDayStat.TesttaskOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskOverdueCount(childComplexity), true

	case "ProjectDayStat.testtaskRunningCount":
		if e.complexity.ProjectDayStat.TesttaskRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskRunningCount(childComplexity), true

	case "ProjectDayStat.testtaskWaitCount":
		if e.complexity.ProjectDayStat.TesttaskWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskWaitCount(childComplexity), true

	case "ProjectDayStat.updateTime":
		if e.complexity.ProjectDayStat.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectDayStat.UpdateTime(childComplexity), true

	case "ProjectDayStat.updator":
		if e.complexity.ProjectDayStat.Updator == nil {
			break
		}

		return e.complexity.ProjectDayStat.Updator(childComplexity), true

	case "ProjectDayStat.version":
		if e.complexity.ProjectDayStat.Version == nil {
			break
		}

		return e.complexity.ProjectDayStat.Version(childComplexity), true

	case "ProjectDayStatList.list":
		if e.complexity.ProjectDayStatList.List == nil {
			break
		}

		return e.complexity.ProjectDayStatList.List(childComplexity), true

	case "ProjectDayStatList.total":
		if e.complexity.ProjectDayStatList.Total == nil {
			break
		}

		return e.complexity.ProjectDayStatList.Total(childComplexity), true

	case "ProjectDetail.createTime":
		if e.complexity.ProjectDetail.CreateTime == nil {
			break
		}

		return e.complexity.ProjectDetail.CreateTime(childComplexity), true

	case "ProjectDetail.creator":
		if e.complexity.ProjectDetail.Creator == nil {
			break
		}

		return e.complexity.ProjectDetail.Creator(childComplexity), true

	case "ProjectDetail.id":
		if e.complexity.ProjectDetail.ID == nil {
			break
		}

		return e.complexity.ProjectDetail.ID(childComplexity), true

	case "ProjectDetail.isEnableWorkHours":
		if e.complexity.ProjectDetail.IsEnableWorkHours == nil {
			break
		}

		return e.complexity.ProjectDetail.IsEnableWorkHours(childComplexity), true

	case "ProjectDetail.isSyncOutCalendar":
		if e.complexity.ProjectDetail.IsSyncOutCalendar == nil {
			break
		}

		return e.complexity.ProjectDetail.IsSyncOutCalendar(childComplexity), true

	case "ProjectDetail.notice":
		if e.complexity.ProjectDetail.Notice == nil {
			break
		}

		return e.complexity.ProjectDetail.Notice(childComplexity), true

	case "ProjectDetail.orgId":
		if e.complexity.ProjectDetail.OrgID == nil {
			break
		}

		return e.complexity.ProjectDetail.OrgID(childComplexity), true

	case "ProjectDetail.projectId":
		if e.complexity.ProjectDetail.ProjectID == nil {
			break
		}

		return e.complexity.ProjectDetail.ProjectID(childComplexity), true

	case "ProjectDetail.updateTime":
		if e.complexity.ProjectDetail.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectDetail.UpdateTime(childComplexity), true

	case "ProjectDetail.updator":
		if e.complexity.ProjectDetail.Updator == nil {
			break
		}

		return e.complexity.ProjectDetail.Updator(childComplexity), true

	case "ProjectDetailList.list":
		if e.complexity.ProjectDetailList.List == nil {
			break
		}

		return e.complexity.ProjectDetailList.List(childComplexity), true

	case "ProjectDetailList.total":
		if e.complexity.ProjectDetailList.Total == nil {
			break
		}

		return e.complexity.ProjectDetailList.Total(childComplexity), true

	case "ProjectInfo.allStatus":
		if e.complexity.ProjectInfo.AllStatus == nil {
			break
		}

		return e.complexity.ProjectInfo.AllStatus(childComplexity), true

	case "ProjectInfo.appId":
		if e.complexity.ProjectInfo.AppID == nil {
			break
		}

		return e.complexity.ProjectInfo.AppID(childComplexity), true

	case "ProjectInfo.code":
		if e.complexity.ProjectInfo.Code == nil {
			break
		}

		return e.complexity.ProjectInfo.Code(childComplexity), true

	case "ProjectInfo.createTime":
		if e.complexity.ProjectInfo.CreateTime == nil {
			break
		}

		return e.complexity.ProjectInfo.CreateTime(childComplexity), true

	case "ProjectInfo.creator":
		if e.complexity.ProjectInfo.Creator == nil {
			break
		}

		return e.complexity.ProjectInfo.Creator(childComplexity), true

	case "ProjectInfo.creatorInfo":
		if e.complexity.ProjectInfo.CreatorInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.CreatorInfo(childComplexity), true

	case "ProjectInfo.followerInfo":
		if e.complexity.ProjectInfo.FollowerInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.FollowerInfo(childComplexity), true

	case "ProjectInfo.id":
		if e.complexity.ProjectInfo.ID == nil {
			break
		}

		return e.complexity.ProjectInfo.ID(childComplexity), true

	case "ProjectInfo.icon":
		if e.complexity.ProjectInfo.Icon == nil {
			break
		}

		return e.complexity.ProjectInfo.Icon(childComplexity), true

	case "ProjectInfo.isCreateFsChat":
		if e.complexity.ProjectInfo.IsCreateFsChat == nil {
			break
		}

		return e.complexity.ProjectInfo.IsCreateFsChat(childComplexity), true

	case "ProjectInfo.isFiling":
		if e.complexity.ProjectInfo.IsFiling == nil {
			break
		}

		return e.complexity.ProjectInfo.IsFiling(childComplexity), true

	case "ProjectInfo.isStar":
		if e.complexity.ProjectInfo.IsStar == nil {
			break
		}

		return e.complexity.ProjectInfo.IsStar(childComplexity), true

	case "ProjectInfo.isSyncOutCalendar":
		if e.complexity.ProjectInfo.IsSyncOutCalendar == nil {
			break
		}

		return e.complexity.ProjectInfo.IsSyncOutCalendar(childComplexity), true

	case "ProjectInfo.memberDepartmentInfo":
		if e.complexity.ProjectInfo.MemberDepartmentInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.MemberDepartmentInfo(childComplexity), true

	case "ProjectInfo.memberInfo":
		if e.complexity.ProjectInfo.MemberInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.MemberInfo(childComplexity), true

	case "ProjectInfo.name":
		if e.complexity.ProjectInfo.Name == nil {
			break
		}

		return e.complexity.ProjectInfo.Name(childComplexity), true

	case "ProjectInfo.orgId":
		if e.complexity.ProjectInfo.OrgID == nil {
			break
		}

		return e.complexity.ProjectInfo.OrgID(childComplexity), true

	case "ProjectInfo.owner":
		if e.complexity.ProjectInfo.Owner == nil {
			break
		}

		return e.complexity.ProjectInfo.Owner(childComplexity), true

	case "ProjectInfo.ownerInfo":
		if e.complexity.ProjectInfo.OwnerInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.OwnerInfo(childComplexity), true

	case "ProjectInfo.ownersInfo":
		if e.complexity.ProjectInfo.OwnersInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.OwnersInfo(childComplexity), true

	case "ProjectInfo.parentId":
		if e.complexity.ProjectInfo.ParentID == nil {
			break
		}

		return e.complexity.ProjectInfo.ParentID(childComplexity), true

	case "ProjectInfo.planEndTime":
		if e.complexity.ProjectInfo.PlanEndTime == nil {
			break
		}

		return e.complexity.ProjectInfo.PlanEndTime(childComplexity), true

	case "ProjectInfo.planStartTime":
		if e.complexity.ProjectInfo.PlanStartTime == nil {
			break
		}

		return e.complexity.ProjectInfo.PlanStartTime(childComplexity), true

	case "ProjectInfo.preCode":
		if e.complexity.ProjectInfo.PreCode == nil {
			break
		}

		return e.complexity.ProjectInfo.PreCode(childComplexity), true

	case "ProjectInfo.priorityId":
		if e.complexity.ProjectInfo.PriorityID == nil {
			break
		}

		return e.complexity.ProjectInfo.PriorityID(childComplexity), true

	case "ProjectInfo.privacyStatus":
		if e.complexity.ProjectInfo.PrivacyStatus == nil {
			break
		}

		return e.complexity.ProjectInfo.PrivacyStatus(childComplexity), true

	case "ProjectInfo.projectTypeId":
		if e.complexity.ProjectInfo.ProjectTypeID == nil {
			break
		}

		return e.complexity.ProjectInfo.ProjectTypeID(childComplexity), true

	case "ProjectInfo.publicStatus":
		if e.complexity.ProjectInfo.PublicStatus == nil {
			break
		}

		return e.complexity.ProjectInfo.PublicStatus(childComplexity), true

	case "ProjectInfo.remark":
		if e.complexity.ProjectInfo.Remark == nil {
			break
		}

		return e.complexity.ProjectInfo.Remark(childComplexity), true

	case "ProjectInfo.resourceId":
		if e.complexity.ProjectInfo.ResourceID == nil {
			break
		}

		return e.complexity.ProjectInfo.ResourceID(childComplexity), true

	case "ProjectInfo.resourcePath":
		if e.complexity.ProjectInfo.ResourcePath == nil {
			break
		}

		return e.complexity.ProjectInfo.ResourcePath(childComplexity), true

	case "ProjectInfo.status":
		if e.complexity.ProjectInfo.Status == nil {
			break
		}

		return e.complexity.ProjectInfo.Status(childComplexity), true

	case "ProjectInfo.syncCalendarStatusList":
		if e.complexity.ProjectInfo.SyncCalendarStatusList == nil {
			break
		}

		return e.complexity.ProjectInfo.SyncCalendarStatusList(childComplexity), true

	case "ProjectInfo.updateTime":
		if e.complexity.ProjectInfo.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectInfo.UpdateTime(childComplexity), true

	case "ProjectInfo.updator":
		if e.complexity.ProjectInfo.Updator == nil {
			break
		}

		return e.complexity.ProjectInfo.Updator(childComplexity), true

	case "ProjectList.list":
		if e.complexity.ProjectList.List == nil {
			break
		}

		return e.complexity.ProjectList.List(childComplexity), true

	case "ProjectList.total":
		if e.complexity.ProjectList.Total == nil {
			break
		}

		return e.complexity.ProjectList.Total(childComplexity), true

	case "ProjectMemberIdListResp.departmentIds":
		if e.complexity.ProjectMemberIDListResp.DepartmentIds == nil {
			break
		}

		return e.complexity.ProjectMemberIDListResp.DepartmentIds(childComplexity), true

	case "ProjectMemberIdListResp.userIds":
		if e.complexity.ProjectMemberIDListResp.UserIds == nil {
			break
		}

		return e.complexity.ProjectMemberIDListResp.UserIds(childComplexity), true

	case "ProjectType.cover":
		if e.complexity.ProjectType.Cover == nil {
			break
		}

		return e.complexity.ProjectType.Cover(childComplexity), true

	case "ProjectType.createTime":
		if e.complexity.ProjectType.CreateTime == nil {
			break
		}

		return e.complexity.ProjectType.CreateTime(childComplexity), true

	case "ProjectType.creator":
		if e.complexity.ProjectType.Creator == nil {
			break
		}

		return e.complexity.ProjectType.Creator(childComplexity), true

	case "ProjectType.defaultProcessId":
		if e.complexity.ProjectType.DefaultProcessID == nil {
			break
		}

		return e.complexity.ProjectType.DefaultProcessID(childComplexity), true

	case "ProjectType.id":
		if e.complexity.ProjectType.ID == nil {
			break
		}

		return e.complexity.ProjectType.ID(childComplexity), true

	case "ProjectType.isReadonly":
		if e.complexity.ProjectType.IsReadonly == nil {
			break
		}

		return e.complexity.ProjectType.IsReadonly(childComplexity), true

	case "ProjectType.langCode":
		if e.complexity.ProjectType.LangCode == nil {
			break
		}

		return e.complexity.ProjectType.LangCode(childComplexity), true

	case "ProjectType.name":
		if e.complexity.ProjectType.Name == nil {
			break
		}

		return e.complexity.ProjectType.Name(childComplexity), true

	case "ProjectType.orgId":
		if e.complexity.ProjectType.OrgID == nil {
			break
		}

		return e.complexity.ProjectType.OrgID(childComplexity), true

	case "ProjectType.remark":
		if e.complexity.ProjectType.Remark == nil {
			break
		}

		return e.complexity.ProjectType.Remark(childComplexity), true

	case "ProjectType.sort":
		if e.complexity.ProjectType.Sort == nil {
			break
		}

		return e.complexity.ProjectType.Sort(childComplexity), true

	case "ProjectType.status":
		if e.complexity.ProjectType.Status == nil {
			break
		}

		return e.complexity.ProjectType.Status(childComplexity), true

	case "ProjectType.updateTime":
		if e.complexity.ProjectType.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectType.UpdateTime(childComplexity), true

	case "ProjectType.updator":
		if e.complexity.ProjectType.Updator == nil {
			break
		}

		return e.complexity.ProjectType.Updator(childComplexity), true

	case "ProjectTypeList.list":
		if e.complexity.ProjectTypeList.List == nil {
			break
		}

		return e.complexity.ProjectTypeList.List(childComplexity), true

	case "ProjectTypeList.total":
		if e.complexity.ProjectTypeList.Total == nil {
			break
		}

		return e.complexity.ProjectTypeList.Total(childComplexity), true

	case "Query.areaLinkageList":
		if e.complexity.Query.AreaLinkageList == nil {
			break
		}

		args, err := ec.field_Query_areaLinkageList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AreaLinkageList(childComplexity, args["input"].(vo.AreaLinkageListReq)), true

	case "Query.checkIsEnableWorkHour":
		if e.complexity.Query.CheckIsEnableWorkHour == nil {
			break
		}

		args, err := ec.field_Query_checkIsEnableWorkHour_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckIsEnableWorkHour(childComplexity, args["params"].(vo.CheckIsEnableWorkHourReq)), true

	case "Query.checkIsIssueMember":
		if e.complexity.Query.CheckIsIssueMember == nil {
			break
		}

		args, err := ec.field_Query_checkIsIssueMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckIsIssueMember(childComplexity, args["params"].(vo.CheckIsIssueMemberReq)), true

	case "Query.checkSpecificScope":
		if e.complexity.Query.CheckSpecificScope == nil {
			break
		}

		args, err := ec.field_Query_checkSpecificScope_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckSpecificScope(childComplexity, args["params"].(vo.CheckSpecificScopeReq)), true

	case "Query.checkTokenValidity":
		if e.complexity.Query.CheckTokenValidity == nil {
			break
		}

		return e.complexity.Query.CheckTokenValidity(childComplexity), true

	case "Query.departmentMembers":
		if e.complexity.Query.DepartmentMembers == nil {
			break
		}

		args, err := ec.field_Query_departmentMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentMembers(childComplexity, args["params"].(vo.DepartmentMemberListReq)), true

	case "Query.departmentMembersList":
		if e.complexity.Query.DepartmentMembersList == nil {
			break
		}

		args, err := ec.field_Query_departmentMembersList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentMembersList(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.DepartmentMembersListReq)), true

	case "Query.departments":
		if e.complexity.Query.Departments == nil {
			break
		}

		args, err := ec.field_Query_departments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Departments(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.DepartmentListReq)), true

	case "Query.exportData":
		if e.complexity.Query.ExportData == nil {
			break
		}

		args, err := ec.field_Query_exportData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExportData(childComplexity, args["projectId"].(int64), args["iterationId"].(*int64), args["tableId"].(string), args["isNeedDocument"].(*bool)), true

	case "Query.exportIssueTemplate":
		if e.complexity.Query.ExportIssueTemplate == nil {
			break
		}

		args, err := ec.field_Query_exportIssueTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExportIssueTemplate(childComplexity, args["projectId"].(int64), args["tableId"].(string)), true

	case "Query.exportWorkHourStatistic":
		if e.complexity.Query.ExportWorkHourStatistic == nil {
			break
		}

		args, err := ec.field_Query_exportWorkHourStatistic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExportWorkHourStatistic(childComplexity, args["params"].(vo.GetWorkHourStatisticReq)), true

	case "Query.fsDocumentList":
		if e.complexity.Query.FsDocumentList == nil {
			break
		}

		args, err := ec.field_Query_fsDocumentList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FsDocumentList(childComplexity, args["page"].(*int), args["size"].(*int), args["input"].(vo.FsDocumentListReq)), true

	case "Query.getAppTicket":
		if e.complexity.Query.GetAppTicket == nil {
			break
		}

		return e.complexity.Query.GetAppTicket(childComplexity), true

	case "Query.getFsProjectChatPushSettings":
		if e.complexity.Query.GetFsProjectChatPushSettings == nil {
			break
		}

		args, err := ec.field_Query_getFsProjectChatPushSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFsProjectChatPushSettings(childComplexity, args["params"].(vo.GetFsProjectChatPushSettingsReq)), true

	case "Query.getInviteCode":
		if e.complexity.Query.GetInviteCode == nil {
			break
		}

		args, err := ec.field_Query_getInviteCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetInviteCode(childComplexity, args["input"].(*vo.GetInviteCodeReq)), true

	case "Query.getInviteInfo":
		if e.complexity.Query.GetInviteInfo == nil {
			break
		}

		args, err := ec.field_Query_getInviteInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetInviteInfo(childComplexity, args["input"].(vo.GetInviteInfoReq)), true

	case "Query.getIssueViewList":
		if e.complexity.Query.GetIssueViewList == nil {
			break
		}

		args, err := ec.field_Query_getIssueViewList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetIssueViewList(childComplexity, args["params"].(vo.GetIssueViewListReq)), true

	case "Query.getIssueWorkHoursInfo":
		if e.complexity.Query.GetIssueWorkHoursInfo == nil {
			break
		}

		args, err := ec.field_Query_getIssueWorkHoursInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetIssueWorkHoursInfo(childComplexity, args["params"].(vo.GetIssueWorkHoursInfoReq)), true

	case "Query.getJsApiTicket":
		if e.complexity.Query.GetJsAPITicket == nil {
			break
		}

		return e.complexity.Query.GetJsAPITicket(childComplexity), true

	case "Query.getMQTTChannelKey":
		if e.complexity.Query.GetMQTTChannelKey == nil {
			break
		}

		args, err := ec.field_Query_getMQTTChannelKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMQTTChannelKey(childComplexity, args["input"].(vo.GetMQTTChannelKeyReq)), true

	case "Query.getOrgConfig":
		if e.complexity.Query.GetOrgConfig == nil {
			break
		}

		return e.complexity.Query.GetOrgConfig(childComplexity), true

	case "Query.getOssPostPolicy":
		if e.complexity.Query.GetOssPostPolicy == nil {
			break
		}

		args, err := ec.field_Query_getOssPostPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOssPostPolicy(childComplexity, args["input"].(vo.OssPostPolicyReq)), true

	case "Query.getPayRemind":
		if e.complexity.Query.GetPayRemind == nil {
			break
		}

		return e.complexity.Query.GetPayRemind(childComplexity), true

	case "Query.getPersonalPermissionInfo":
		if e.complexity.Query.GetPersonalPermissionInfo == nil {
			break
		}

		args, err := ec.field_Query_getPersonalPermissionInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPersonalPermissionInfo(childComplexity, args["projectId"].(*int64), args["issueId"].(*int64)), true

	case "Query.getProjectMainChatId":
		if e.complexity.Query.GetProjectMainChatID == nil {
			break
		}

		args, err := ec.field_Query_getProjectMainChatId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProjectMainChatID(childComplexity, args["params"].(vo.GetProjectMainChatIDReq)), true

	case "Query.getWorkHourStatistic":
		if e.complexity.Query.GetWorkHourStatistic == nil {
			break
		}

		args, err := ec.field_Query_getWorkHourStatistic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWorkHourStatistic(childComplexity, args["params"].(vo.GetWorkHourStatisticReq)), true

	case "Query.industryList":
		if e.complexity.Query.IndustryList == nil {
			break
		}

		return e.complexity.Query.IndustryList(childComplexity), true

	case "Query.issueAssignRank":
		if e.complexity.Query.IssueAssignRank == nil {
			break
		}

		args, err := ec.field_Query_issueAssignRank_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueAssignRank(childComplexity, args["input"].(vo.IssueAssignRankReq)), true

	case "Query.issueInfoNotDelete":
		if e.complexity.Query.IssueInfoNotDelete == nil {
			break
		}

		args, err := ec.field_Query_issueInfoNotDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueInfoNotDelete(childComplexity, args["param"].(vo.IssueInfoNotDeleteReq)), true

	case "Query.issueStatusTypeStat":
		if e.complexity.Query.IssueStatusTypeStat == nil {
			break
		}

		args, err := ec.field_Query_issueStatusTypeStat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueStatusTypeStat(childComplexity, args["input"].(*vo.IssueStatusTypeStatReq)), true

	case "Query.issueStatusTypeStatDetail":
		if e.complexity.Query.IssueStatusTypeStatDetail == nil {
			break
		}

		args, err := ec.field_Query_issueStatusTypeStatDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueStatusTypeStatDetail(childComplexity, args["input"].(*vo.IssueStatusTypeStatReq)), true

	case "Query.iterationInfo":
		if e.complexity.Query.IterationInfo == nil {
			break
		}

		args, err := ec.field_Query_iterationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IterationInfo(childComplexity, args["input"].(vo.IterationInfoReq)), true

	case "Query.iterationStats":
		if e.complexity.Query.IterationStats == nil {
			break
		}

		args, err := ec.field_Query_iterationStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IterationStats(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.IterationStatReq)), true

	case "Query.iterations":
		if e.complexity.Query.Iterations == nil {
			break
		}

		args, err := ec.field_Query_iterations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Iterations(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IterationListReq)), true

	case "Query.orgUserList":
		if e.complexity.Query.OrgUserList == nil {
			break
		}

		args, err := ec.field_Query_orgUserList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgUserList(childComplexity, args["page"].(*int), args["size"].(*int), args["input"].(vo.OrgUserListReq)), true

	case "Query.organizationInfo":
		if e.complexity.Query.OrganizationInfo == nil {
			break
		}

		args, err := ec.field_Query_organizationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationInfo(childComplexity, args["input"].(vo.OrganizationInfoReq)), true

	case "Query.payLimitNum":
		if e.complexity.Query.PayLimitNum == nil {
			break
		}

		return e.complexity.Query.PayLimitNum(childComplexity), true

	case "Query.personalInfo":
		if e.complexity.Query.PersonalInfo == nil {
			break
		}

		return e.complexity.Query.PersonalInfo(childComplexity), true

	case "Query.projectAttachment":
		if e.complexity.Query.ProjectAttachment == nil {
			break
		}

		args, err := ec.field_Query_projectAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectAttachment(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectAttachmentReq)), true

	case "Query.projectAttachmentInfo":
		if e.complexity.Query.ProjectAttachmentInfo == nil {
			break
		}

		args, err := ec.field_Query_projectAttachmentInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectAttachmentInfo(childComplexity, args["input"].(vo.ProjectAttachmentInfoReq)), true

	case "Query.projectDayStats":
		if e.complexity.Query.ProjectDayStats == nil {
			break
		}

		args, err := ec.field_Query_projectDayStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectDayStats(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.ProjectDayStatReq)), true

	case "Query.projectDetail":
		if e.complexity.Query.ProjectDetail == nil {
			break
		}

		args, err := ec.field_Query_projectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectDetail(childComplexity, args["projectId"].(int64)), true

	case "Query.projectFolder":
		if e.complexity.Query.ProjectFolder == nil {
			break
		}

		args, err := ec.field_Query_projectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectFolder(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectFolderReq)), true

	case "Query.projectInfo":
		if e.complexity.Query.ProjectInfo == nil {
			break
		}

		args, err := ec.field_Query_projectInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectInfo(childComplexity, args["input"].(vo.ProjectInfoReq)), true

	case "Query.projectMemberIdList":
		if e.complexity.Query.ProjectMemberIDList == nil {
			break
		}

		args, err := ec.field_Query_projectMemberIdList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectMemberIDList(childComplexity, args["params"].(vo.ProjectMemberIDListReq)), true

	case "Query.projectResource":
		if e.complexity.Query.ProjectResource == nil {
			break
		}

		args, err := ec.field_Query_projectResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectResource(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectResourceReq)), true

	case "Query.projects":
		if e.complexity.Query.Projects == nil {
			break
		}

		args, err := ec.field_Query_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Projects(childComplexity, args["page"].(int), args["size"].(int), args["params"].(map[string]interface{}), args["order"].([]*string), args["input"].(*vo.ProjectsReq)), true

	case "Query.recycleBinList":
		if e.complexity.Query.RecycleBinList == nil {
			break
		}

		args, err := ec.field_Query_recycleBinList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecycleBinList(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.RecycleBinListReq)), true

	case "Query.trendList":
		if e.complexity.Query.TrendList == nil {
			break
		}

		args, err := ec.field_Query_trendList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrendList(childComplexity, args["input"].(*vo.TrendReq)), true

	case "Query.userConfigInfo":
		if e.complexity.Query.UserConfigInfo == nil {
			break
		}

		return e.complexity.Query.UserConfigInfo(childComplexity), true

	case "Query.userOrganizationList":
		if e.complexity.Query.UserOrganizationList == nil {
			break
		}

		return e.complexity.Query.UserOrganizationList(childComplexity), true

	case "RecycleBin.createTime":
		if e.complexity.RecycleBin.CreateTime == nil {
			break
		}

		return e.complexity.RecycleBin.CreateTime(childComplexity), true

	case "RecycleBin.creator":
		if e.complexity.RecycleBin.Creator == nil {
			break
		}

		return e.complexity.RecycleBin.Creator(childComplexity), true

	case "RecycleBin.creatorInfo":
		if e.complexity.RecycleBin.CreatorInfo == nil {
			break
		}

		return e.complexity.RecycleBin.CreatorInfo(childComplexity), true

	case "RecycleBin.id":
		if e.complexity.RecycleBin.ID == nil {
			break
		}

		return e.complexity.RecycleBin.ID(childComplexity), true

	case "RecycleBin.isCanDo":
		if e.complexity.RecycleBin.IsCanDo == nil {
			break
		}

		return e.complexity.RecycleBin.IsCanDo(childComplexity), true

	case "RecycleBin.name":
		if e.complexity.RecycleBin.Name == nil {
			break
		}

		return e.complexity.RecycleBin.Name(childComplexity), true

	case "RecycleBin.orgId":
		if e.complexity.RecycleBin.OrgID == nil {
			break
		}

		return e.complexity.RecycleBin.OrgID(childComplexity), true

	case "RecycleBin.projectId":
		if e.complexity.RecycleBin.ProjectID == nil {
			break
		}

		return e.complexity.RecycleBin.ProjectID(childComplexity), true

	case "RecycleBin.relationId":
		if e.complexity.RecycleBin.RelationID == nil {
			break
		}

		return e.complexity.RecycleBin.RelationID(childComplexity), true

	case "RecycleBin.relationType":
		if e.complexity.RecycleBin.RelationType == nil {
			break
		}

		return e.complexity.RecycleBin.RelationType(childComplexity), true

	case "RecycleBin.resourceInfo":
		if e.complexity.RecycleBin.ResourceInfo == nil {
			break
		}

		return e.complexity.RecycleBin.ResourceInfo(childComplexity), true

	case "RecycleBin.tagInfo":
		if e.complexity.RecycleBin.TagInfo == nil {
			break
		}

		return e.complexity.RecycleBin.TagInfo(childComplexity), true

	case "RecycleBin.updateTime":
		if e.complexity.RecycleBin.UpdateTime == nil {
			break
		}

		return e.complexity.RecycleBin.UpdateTime(childComplexity), true

	case "RecycleBin.updator":
		if e.complexity.RecycleBin.Updator == nil {
			break
		}

		return e.complexity.RecycleBin.Updator(childComplexity), true

	case "RecycleBinList.list":
		if e.complexity.RecycleBinList.List == nil {
			break
		}

		return e.complexity.RecycleBinList.List(childComplexity), true

	case "RecycleBinList.total":
		if e.complexity.RecycleBinList.Total == nil {
			break
		}

		return e.complexity.RecycleBinList.Total(childComplexity), true

	case "RelationIssue.id":
		if e.complexity.RelationIssue.ID == nil {
			break
		}

		return e.complexity.RelationIssue.ID(childComplexity), true

	case "RelationIssue.title":
		if e.complexity.RelationIssue.Title == nil {
			break
		}

		return e.complexity.RelationIssue.Title(childComplexity), true

	case "RelationType.avatar":
		if e.complexity.RelationType.Avatar == nil {
			break
		}

		return e.complexity.RelationType.Avatar(childComplexity), true

	case "RelationType.name":
		if e.complexity.RelationType.Name == nil {
			break
		}

		return e.complexity.RelationType.Name(childComplexity), true

	case "RelationType.outOrgUserId":
		if e.complexity.RelationType.OutOrgUserID == nil {
			break
		}

		return e.complexity.RelationType.OutOrgUserID(childComplexity), true

	case "RelationType.outUserId":
		if e.complexity.RelationType.OutUserID == nil {
			break
		}

		return e.complexity.RelationType.OutUserID(childComplexity), true

	case "RelationType.projectId":
		if e.complexity.RelationType.ProjectID == nil {
			break
		}

		return e.complexity.RelationType.ProjectID(childComplexity), true

	case "RelationType.relationType":
		if e.complexity.RelationType.RelationType == nil {
			break
		}

		return e.complexity.RelationType.RelationType(childComplexity), true

	case "RelationType.userId":
		if e.complexity.RelationType.UserID == nil {
			break
		}

		return e.complexity.RelationType.UserID(childComplexity), true

	case "Resource.createTime":
		if e.complexity.Resource.CreateTime == nil {
			break
		}

		return e.complexity.Resource.CreateTime(childComplexity), true

	case "Resource.creator":
		if e.complexity.Resource.Creator == nil {
			break
		}

		return e.complexity.Resource.Creator(childComplexity), true

	case "Resource.creatorName":
		if e.complexity.Resource.CreatorName == nil {
			break
		}

		return e.complexity.Resource.CreatorName(childComplexity), true

	case "Resource.fileType":
		if e.complexity.Resource.FileType == nil {
			break
		}

		return e.complexity.Resource.FileType(childComplexity), true

	case "Resource.host":
		if e.complexity.Resource.Host == nil {
			break
		}

		return e.complexity.Resource.Host(childComplexity), true

	case "Resource.id":
		if e.complexity.Resource.ID == nil {
			break
		}

		return e.complexity.Resource.ID(childComplexity), true

	case "Resource.isDelete":
		if e.complexity.Resource.IsDelete == nil {
			break
		}

		return e.complexity.Resource.IsDelete(childComplexity), true

	case "Resource.md5":
		if e.complexity.Resource.Md5 == nil {
			break
		}

		return e.complexity.Resource.Md5(childComplexity), true

	case "Resource.name":
		if e.complexity.Resource.Name == nil {
			break
		}

		return e.complexity.Resource.Name(childComplexity), true

	case "Resource.officeUrl":
		if e.complexity.Resource.OfficeURL == nil {
			break
		}

		return e.complexity.Resource.OfficeURL(childComplexity), true

	case "Resource.orgId":
		if e.complexity.Resource.OrgID == nil {
			break
		}

		return e.complexity.Resource.OrgID(childComplexity), true

	case "Resource.path":
		if e.complexity.Resource.Path == nil {
			break
		}

		return e.complexity.Resource.Path(childComplexity), true

	case "Resource.pathCompressed":
		if e.complexity.Resource.PathCompressed == nil {
			break
		}

		return e.complexity.Resource.PathCompressed(childComplexity), true

	case "Resource.size":
		if e.complexity.Resource.Size == nil {
			break
		}

		return e.complexity.Resource.Size(childComplexity), true

	case "Resource.suffix":
		if e.complexity.Resource.Suffix == nil {
			break
		}

		return e.complexity.Resource.Suffix(childComplexity), true

	case "Resource.type":
		if e.complexity.Resource.Type == nil {
			break
		}

		return e.complexity.Resource.Type(childComplexity), true

	case "Resource.updateTime":
		if e.complexity.Resource.UpdateTime == nil {
			break
		}

		return e.complexity.Resource.UpdateTime(childComplexity), true

	case "Resource.updator":
		if e.complexity.Resource.Updator == nil {
			break
		}

		return e.complexity.Resource.Updator(childComplexity), true

	case "Resource.version":
		if e.complexity.Resource.Version == nil {
			break
		}

		return e.complexity.Resource.Version(childComplexity), true

	case "ResourceInfo.creator":
		if e.complexity.ResourceInfo.Creator == nil {
			break
		}

		return e.complexity.ResourceInfo.Creator(childComplexity), true

	case "ResourceInfo.creatorName":
		if e.complexity.ResourceInfo.CreatorName == nil {
			break
		}

		return e.complexity.ResourceInfo.CreatorName(childComplexity), true

	case "ResourceInfo.name":
		if e.complexity.ResourceInfo.Name == nil {
			break
		}

		return e.complexity.ResourceInfo.Name(childComplexity), true

	case "ResourceInfo.size":
		if e.complexity.ResourceInfo.Size == nil {
			break
		}

		return e.complexity.ResourceInfo.Size(childComplexity), true

	case "ResourceInfo.suffix":
		if e.complexity.ResourceInfo.Suffix == nil {
			break
		}

		return e.complexity.ResourceInfo.Suffix(childComplexity), true

	case "ResourceInfo.url":
		if e.complexity.ResourceInfo.URL == nil {
			break
		}

		return e.complexity.ResourceInfo.URL(childComplexity), true

	case "ResourceInfo.uploadTime":
		if e.complexity.ResourceInfo.UploadTime == nil {
			break
		}

		return e.complexity.ResourceInfo.UploadTime(childComplexity), true

	case "ResourceList.list":
		if e.complexity.ResourceList.List == nil {
			break
		}

		return e.complexity.ResourceList.List(childComplexity), true

	case "ResourceList.total":
		if e.complexity.ResourceList.Total == nil {
			break
		}

		return e.complexity.ResourceList.Total(childComplexity), true

	case "Role.createTime":
		if e.complexity.Role.CreateTime == nil {
			break
		}

		return e.complexity.Role.CreateTime(childComplexity), true

	case "Role.creator":
		if e.complexity.Role.Creator == nil {
			break
		}

		return e.complexity.Role.Creator(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.isDefault":
		if e.complexity.Role.IsDefault == nil {
			break
		}

		return e.complexity.Role.IsDefault(childComplexity), true

	case "Role.isModifyPermission":
		if e.complexity.Role.IsModifyPermission == nil {
			break
		}

		return e.complexity.Role.IsModifyPermission(childComplexity), true

	case "Role.isReadonly":
		if e.complexity.Role.IsReadonly == nil {
			break
		}

		return e.complexity.Role.IsReadonly(childComplexity), true

	case "Role.langCode":
		if e.complexity.Role.LangCode == nil {
			break
		}

		return e.complexity.Role.LangCode(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.orgId":
		if e.complexity.Role.OrgID == nil {
			break
		}

		return e.complexity.Role.OrgID(childComplexity), true

	case "Role.remark":
		if e.complexity.Role.Remark == nil {
			break
		}

		return e.complexity.Role.Remark(childComplexity), true

	case "Role.roleGroupId":
		if e.complexity.Role.RoleGroupID == nil {
			break
		}

		return e.complexity.Role.RoleGroupID(childComplexity), true

	case "Role.status":
		if e.complexity.Role.Status == nil {
			break
		}

		return e.complexity.Role.Status(childComplexity), true

	case "Role.updateTime":
		if e.complexity.Role.UpdateTime == nil {
			break
		}

		return e.complexity.Role.UpdateTime(childComplexity), true

	case "Role.updator":
		if e.complexity.Role.Updator == nil {
			break
		}

		return e.complexity.Role.Updator(childComplexity), true

	case "SimpleTagInfo.id":
		if e.complexity.SimpleTagInfo.ID == nil {
			break
		}

		return e.complexity.SimpleTagInfo.ID(childComplexity), true

	case "SimpleTagInfo.name":
		if e.complexity.SimpleTagInfo.Name == nil {
			break
		}

		return e.complexity.SimpleTagInfo.Name(childComplexity), true

	case "StatCommon.count":
		if e.complexity.StatCommon.Count == nil {
			break
		}

		return e.complexity.StatCommon.Count(childComplexity), true

	case "StatCommon.name":
		if e.complexity.StatCommon.Name == nil {
			break
		}

		return e.complexity.StatCommon.Name(childComplexity), true

	case "StatData.issueCount":
		if e.complexity.StatData.IssueCount == nil {
			break
		}

		return e.complexity.StatData.IssueCount(childComplexity), true

	case "StatData.issueEndCount":
		if e.complexity.StatData.IssueEndCount == nil {
			break
		}

		return e.complexity.StatData.IssueEndCount(childComplexity), true

	case "StatData.issueRunningCount":
		if e.complexity.StatData.IssueRunningCount == nil {
			break
		}

		return e.complexity.StatData.IssueRunningCount(childComplexity), true

	case "StatData.issueWaitCount":
		if e.complexity.StatData.IssueWaitCount == nil {
			break
		}

		return e.complexity.StatData.IssueWaitCount(childComplexity), true

	case "StatData.storyPointCount":
		if e.complexity.StatData.StoryPointCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointCount(childComplexity), true

	case "StatData.storyPointEndCount":
		if e.complexity.StatData.StoryPointEndCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointEndCount(childComplexity), true

	case "StatData.storyPointRunningCount":
		if e.complexity.StatData.StoryPointRunningCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointRunningCount(childComplexity), true

	case "StatData.storyPointWaitCount":
		if e.complexity.StatData.StoryPointWaitCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointWaitCount(childComplexity), true

	case "StatExtResp.issue":
		if e.complexity.StatExtResp.Issue == nil {
			break
		}

		return e.complexity.StatExtResp.Issue(childComplexity), true

	case "StatIssueExt.data":
		if e.complexity.StatIssueExt.Data == nil {
			break
		}

		return e.complexity.StatIssueExt.Data(childComplexity), true

	case "StatusTimeInfo.endTime":
		if e.complexity.StatusTimeInfo.EndTime == nil {
			break
		}

		return e.complexity.StatusTimeInfo.EndTime(childComplexity), true

	case "StatusTimeInfo.planEndTime":
		if e.complexity.StatusTimeInfo.PlanEndTime == nil {
			break
		}

		return e.complexity.StatusTimeInfo.PlanEndTime(childComplexity), true

	case "StatusTimeInfo.planStartTime":
		if e.complexity.StatusTimeInfo.PlanStartTime == nil {
			break
		}

		return e.complexity.StatusTimeInfo.PlanStartTime(childComplexity), true

	case "StatusTimeInfo.startTime":
		if e.complexity.StatusTimeInfo.StartTime == nil {
			break
		}

		return e.complexity.StatusTimeInfo.StartTime(childComplexity), true

	case "StatusTimeInfo.statusId":
		if e.complexity.StatusTimeInfo.StatusID == nil {
			break
		}

		return e.complexity.StatusTimeInfo.StatusID(childComplexity), true

	case "StatusTimeInfo.statusName":
		if e.complexity.StatusTimeInfo.StatusName == nil {
			break
		}

		return e.complexity.StatusTimeInfo.StatusName(childComplexity), true

	case "StatusTimeInfo.statusType":
		if e.complexity.StatusTimeInfo.StatusType == nil {
			break
		}

		return e.complexity.StatusTimeInfo.StatusType(childComplexity), true

	case "Tag.bgStyle":
		if e.complexity.Tag.BgStyle == nil {
			break
		}

		return e.complexity.Tag.BgStyle(childComplexity), true

	case "Tag.createTime":
		if e.complexity.Tag.CreateTime == nil {
			break
		}

		return e.complexity.Tag.CreateTime(childComplexity), true

	case "Tag.creator":
		if e.complexity.Tag.Creator == nil {
			break
		}

		return e.complexity.Tag.Creator(childComplexity), true

	case "Tag.fontStyle":
		if e.complexity.Tag.FontStyle == nil {
			break
		}

		return e.complexity.Tag.FontStyle(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.namePinyin":
		if e.complexity.Tag.NamePinyin == nil {
			break
		}

		return e.complexity.Tag.NamePinyin(childComplexity), true

	case "Tag.orgId":
		if e.complexity.Tag.OrgID == nil {
			break
		}

		return e.complexity.Tag.OrgID(childComplexity), true

	case "Tag.projectId":
		if e.complexity.Tag.ProjectID == nil {
			break
		}

		return e.complexity.Tag.ProjectID(childComplexity), true

	case "Tag.usedNum":
		if e.complexity.Tag.UsedNum == nil {
			break
		}

		return e.complexity.Tag.UsedNum(childComplexity), true

	case "ThirdAccountBindListResp.avatar":
		if e.complexity.ThirdAccountBindListResp.Avatar == nil {
			break
		}

		return e.complexity.ThirdAccountBindListResp.Avatar(childComplexity), true

	case "ThirdAccountBindListResp.name":
		if e.complexity.ThirdAccountBindListResp.Name == nil {
			break
		}

		return e.complexity.ThirdAccountBindListResp.Name(childComplexity), true

	case "ThirdAccountBindListResp.sourceChannel":
		if e.complexity.ThirdAccountBindListResp.SourceChannel == nil {
			break
		}

		return e.complexity.ThirdAccountBindListResp.SourceChannel(childComplexity), true

	case "Trend.comment":
		if e.complexity.Trend.Comment == nil {
			break
		}

		return e.complexity.Trend.Comment(childComplexity), true

	case "Trend.createTime":
		if e.complexity.Trend.CreateTime == nil {
			break
		}

		return e.complexity.Trend.CreateTime(childComplexity), true

	case "Trend.creator":
		if e.complexity.Trend.Creator == nil {
			break
		}

		return e.complexity.Trend.Creator(childComplexity), true

	case "Trend.creatorInfo":
		if e.complexity.Trend.CreatorInfo == nil {
			break
		}

		return e.complexity.Trend.CreatorInfo(childComplexity), true

	case "Trend.ext":
		if e.complexity.Trend.Ext == nil {
			break
		}

		return e.complexity.Trend.Ext(childComplexity), true

	case "Trend.extension":
		if e.complexity.Trend.Extension == nil {
			break
		}

		return e.complexity.Trend.Extension(childComplexity), true

	case "Trend.id":
		if e.complexity.Trend.ID == nil {
			break
		}

		return e.complexity.Trend.ID(childComplexity), true

	case "Trend.module1":
		if e.complexity.Trend.Module1 == nil {
			break
		}

		return e.complexity.Trend.Module1(childComplexity), true

	case "Trend.module2":
		if e.complexity.Trend.Module2 == nil {
			break
		}

		return e.complexity.Trend.Module2(childComplexity), true

	case "Trend.module2Id":
		if e.complexity.Trend.Module2Id == nil {
			break
		}

		return e.complexity.Trend.Module2Id(childComplexity), true

	case "Trend.module3":
		if e.complexity.Trend.Module3 == nil {
			break
		}

		return e.complexity.Trend.Module3(childComplexity), true

	case "Trend.module3Id":
		if e.complexity.Trend.Module3Id == nil {
			break
		}

		return e.complexity.Trend.Module3Id(childComplexity), true

	case "Trend.newValue":
		if e.complexity.Trend.NewValue == nil {
			break
		}

		return e.complexity.Trend.NewValue(childComplexity), true

	case "Trend.objIsDelete":
		if e.complexity.Trend.ObjIsDelete == nil {
			break
		}

		return e.complexity.Trend.ObjIsDelete(childComplexity), true

	case "Trend.oldValue":
		if e.complexity.Trend.OldValue == nil {
			break
		}

		return e.complexity.Trend.OldValue(childComplexity), true

	case "Trend.operCode":
		if e.complexity.Trend.OperCode == nil {
			break
		}

		return e.complexity.Trend.OperCode(childComplexity), true

	case "Trend.operObjId":
		if e.complexity.Trend.OperObjID == nil {
			break
		}

		return e.complexity.Trend.OperObjID(childComplexity), true

	case "Trend.operObjName":
		if e.complexity.Trend.OperObjName == nil {
			break
		}

		return e.complexity.Trend.OperObjName(childComplexity), true

	case "Trend.operObjProperty":
		if e.complexity.Trend.OperObjProperty == nil {
			break
		}

		return e.complexity.Trend.OperObjProperty(childComplexity), true

	case "Trend.operObjType":
		if e.complexity.Trend.OperObjType == nil {
			break
		}

		return e.complexity.Trend.OperObjType(childComplexity), true

	case "Trend.orgId":
		if e.complexity.Trend.OrgID == nil {
			break
		}

		return e.complexity.Trend.OrgID(childComplexity), true

	case "Trend.relationObjId":
		if e.complexity.Trend.RelationObjID == nil {
			break
		}

		return e.complexity.Trend.RelationObjID(childComplexity), true

	case "Trend.relationObjType":
		if e.complexity.Trend.RelationObjType == nil {
			break
		}

		return e.complexity.Trend.RelationObjType(childComplexity), true

	case "Trend.relationType":
		if e.complexity.Trend.RelationType == nil {
			break
		}

		return e.complexity.Trend.RelationType(childComplexity), true

	case "TrendAuditInfo.attachments":
		if e.complexity.TrendAuditInfo.Attachments == nil {
			break
		}

		return e.complexity.TrendAuditInfo.Attachments(childComplexity), true

	case "TrendAuditInfo.remark":
		if e.complexity.TrendAuditInfo.Remark == nil {
			break
		}

		return e.complexity.TrendAuditInfo.Remark(childComplexity), true

	case "TrendAuditInfo.status":
		if e.complexity.TrendAuditInfo.Status == nil {
			break
		}

		return e.complexity.TrendAuditInfo.Status(childComplexity), true

	case "TrendExtension.addedFormFields":
		if e.complexity.TrendExtension.AddedFormFields == nil {
			break
		}

		return e.complexity.TrendExtension.AddedFormFields(childComplexity), true

	case "TrendExtension.auditInfo":
		if e.complexity.TrendExtension.AuditInfo == nil {
			break
		}

		return e.complexity.TrendExtension.AuditInfo(childComplexity), true

	case "TrendExtension.changeList":
		if e.complexity.TrendExtension.ChangeList == nil {
			break
		}

		return e.complexity.TrendExtension.ChangeList(childComplexity), true

	case "TrendExtension.commonChange":
		if e.complexity.TrendExtension.CommonChange == nil {
			break
		}

		return e.complexity.TrendExtension.CommonChange(childComplexity), true

	case "TrendExtension.deletedFormFields":
		if e.complexity.TrendExtension.DeletedFormFields == nil {
			break
		}

		return e.complexity.TrendExtension.DeletedFormFields(childComplexity), true

	case "TrendExtension.fieldIds":
		if e.complexity.TrendExtension.FieldIds == nil {
			break
		}

		return e.complexity.TrendExtension.FieldIds(childComplexity), true

	case "TrendExtension.folderId":
		if e.complexity.TrendExtension.FolderID == nil {
			break
		}

		return e.complexity.TrendExtension.FolderID(childComplexity), true

	case "TrendExtension.issueType":
		if e.complexity.TrendExtension.IssueType == nil {
			break
		}

		return e.complexity.TrendExtension.IssueType(childComplexity), true

	case "TrendExtension.memberInfo":
		if e.complexity.TrendExtension.MemberInfo == nil {
			break
		}

		return e.complexity.TrendExtension.MemberInfo(childComplexity), true

	case "TrendExtension.ObjName":
		if e.complexity.TrendExtension.ObjName == nil {
			break
		}

		return e.complexity.TrendExtension.ObjName(childComplexity), true

	case "TrendExtension.relationIssue":
		if e.complexity.TrendExtension.RelationIssue == nil {
			break
		}

		return e.complexity.TrendExtension.RelationIssue(childComplexity), true

	case "TrendExtension.resourceInfo":
		if e.complexity.TrendExtension.ResourceInfo == nil {
			break
		}

		return e.complexity.TrendExtension.ResourceInfo(childComplexity), true

	case "TrendExtension.tagInfo":
		if e.complexity.TrendExtension.TagInfo == nil {
			break
		}

		return e.complexity.TrendExtension.TagInfo(childComplexity), true

	case "TrendExtension.updatedFormFields":
		if e.complexity.TrendExtension.UpdatedFormFields == nil {
			break
		}

		return e.complexity.TrendExtension.UpdatedFormFields(childComplexity), true

	case "TrendsList.lastTrendId":
		if e.complexity.TrendsList.LastTrendID == nil {
			break
		}

		return e.complexity.TrendsList.LastTrendID(childComplexity), true

	case "TrendsList.list":
		if e.complexity.TrendsList.List == nil {
			break
		}

		return e.complexity.TrendsList.List(childComplexity), true

	case "TrendsList.page":
		if e.complexity.TrendsList.Page == nil {
			break
		}

		return e.complexity.TrendsList.Page(childComplexity), true

	case "TrendsList.size":
		if e.complexity.TrendsList.Size == nil {
			break
		}

		return e.complexity.TrendsList.Size(childComplexity), true

	case "TrendsList.total":
		if e.complexity.TrendsList.Total == nil {
			break
		}

		return e.complexity.TrendsList.Total(childComplexity), true

	case "UpdateProjectFolderResp.folderId":
		if e.complexity.UpdateProjectFolderResp.FolderID == nil {
			break
		}

		return e.complexity.UpdateProjectFolderResp.FolderID(childComplexity), true

	case "UpdateProjectResourceFolderResp.resourceIds":
		if e.complexity.UpdateProjectResourceFolderResp.ResourceIds == nil {
			break
		}

		return e.complexity.UpdateProjectResourceFolderResp.ResourceIds(childComplexity), true

	case "UpdateUserConfigResp.id":
		if e.complexity.UpdateUserConfigResp.ID == nil {
			break
		}

		return e.complexity.UpdateUserConfigResp.ID(childComplexity), true

	case "UserConfig.attentionRangeStatus":
		if e.complexity.UserConfig.AttentionRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.AttentionRangeStatus(childComplexity), true

	case "UserConfig.collaborateMessageStatus":
		if e.complexity.UserConfig.CollaborateMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.CollaborateMessageStatus(childComplexity), true

	case "UserConfig.commentAtMessageStatus":
		if e.complexity.UserConfig.CommentAtMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.CommentAtMessageStatus(childComplexity), true

	case "UserConfig.createRangeStatus":
		if e.complexity.UserConfig.CreateRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.CreateRangeStatus(childComplexity), true

	case "UserConfig.dailyProjectReportMessageStatus":
		if e.complexity.UserConfig.DailyProjectReportMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.DailyProjectReportMessageStatus(childComplexity), true

	case "UserConfig.dailyReportMessageStatus":
		if e.complexity.UserConfig.DailyReportMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.DailyReportMessageStatus(childComplexity), true

	case "UserConfig.defaultProjectId":
		if e.complexity.UserConfig.DefaultProjectID == nil {
			break
		}

		return e.complexity.UserConfig.DefaultProjectID(childComplexity), true

	case "UserConfig.defaultProjectObjectTypeId":
		if e.complexity.UserConfig.DefaultProjectObjectTypeID == nil {
			break
		}

		return e.complexity.UserConfig.DefaultProjectObjectTypeID(childComplexity), true

	case "UserConfig.id":
		if e.complexity.UserConfig.ID == nil {
			break
		}

		return e.complexity.UserConfig.ID(childComplexity), true

	case "UserConfig.modifyMessageStatus":
		if e.complexity.UserConfig.ModifyMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.ModifyMessageStatus(childComplexity), true

	case "UserConfig.ownerRangeStatus":
		if e.complexity.UserConfig.OwnerRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.OwnerRangeStatus(childComplexity), true

	case "UserConfig.participantRangeStatus":
		if e.complexity.UserConfig.ParticipantRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.ParticipantRangeStatus(childComplexity), true

	case "UserConfig.pcCommentAtMessageStatus":
		if e.complexity.UserConfig.PcCommentAtMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcCommentAtMessageStatus(childComplexity), true

	case "UserConfig.pcIssueRemindMessageStatus":
		if e.complexity.UserConfig.PcIssueRemindMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcIssueRemindMessageStatus(childComplexity), true

	case "UserConfig.pcNoticeOpenStatus":
		if e.complexity.UserConfig.PcNoticeOpenStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcNoticeOpenStatus(childComplexity), true

	case "UserConfig.pcOrgMessageStatus":
		if e.complexity.UserConfig.PcOrgMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcOrgMessageStatus(childComplexity), true

	case "UserConfig.pcProjectMessageStatus":
		if e.complexity.UserConfig.PcProjectMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcProjectMessageStatus(childComplexity), true

	case "UserConfig.relationMessageStatus":
		if e.complexity.UserConfig.RelationMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.RelationMessageStatus(childComplexity), true

	case "UserConfig.remindExpiring":
		if e.complexity.UserConfig.RemindExpiring == nil {
			break
		}

		return e.complexity.UserConfig.RemindExpiring(childComplexity), true

	case "UserConfig.remindMessageStatus":
		if e.complexity.UserConfig.RemindMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.RemindMessageStatus(childComplexity), true

	case "UserDepartmentData.deparmentName":
		if e.complexity.UserDepartmentData.DeparmentName == nil {
			break
		}

		return e.complexity.UserDepartmentData.DeparmentName(childComplexity), true

	case "UserDepartmentData.departmentId":
		if e.complexity.UserDepartmentData.DepartmentID == nil {
			break
		}

		return e.complexity.UserDepartmentData.DepartmentID(childComplexity), true

	case "UserDepartmentData.isLeader":
		if e.complexity.UserDepartmentData.IsLeader == nil {
			break
		}

		return e.complexity.UserDepartmentData.IsLeader(childComplexity), true

	case "UserIdInfo.avatar":
		if e.complexity.UserIDInfo.Avatar == nil {
			break
		}

		return e.complexity.UserIDInfo.Avatar(childComplexity), true

	case "UserIdInfo.emplId":
		if e.complexity.UserIDInfo.EmplID == nil {
			break
		}

		return e.complexity.UserIDInfo.EmplID(childComplexity), true

	case "UserIdInfo.id":
		if e.complexity.UserIDInfo.ID == nil {
			break
		}

		return e.complexity.UserIDInfo.ID(childComplexity), true

	case "UserIdInfo.isDeleted":
		if e.complexity.UserIDInfo.IsDeleted == nil {
			break
		}

		return e.complexity.UserIDInfo.IsDeleted(childComplexity), true

	case "UserIdInfo.isDisabled":
		if e.complexity.UserIDInfo.IsDisabled == nil {
			break
		}

		return e.complexity.UserIDInfo.IsDisabled(childComplexity), true

	case "UserIdInfo.name":
		if e.complexity.UserIDInfo.Name == nil {
			break
		}

		return e.complexity.UserIDInfo.Name(childComplexity), true

	case "UserIdInfo.namePy":
		if e.complexity.UserIDInfo.NamePy == nil {
			break
		}

		return e.complexity.UserIDInfo.NamePy(childComplexity), true

	case "UserIdInfo.unionId":
		if e.complexity.UserIDInfo.UnionID == nil {
			break
		}

		return e.complexity.UserIDInfo.UnionID(childComplexity), true

	case "UserIdInfo.userId":
		if e.complexity.UserIDInfo.UserID == nil {
			break
		}

		return e.complexity.UserIDInfo.UserID(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.auditStatus":
		if e.complexity.UserIDInfoExtraForIssueAudit.AuditStatus == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.AuditStatus(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.avatar":
		if e.complexity.UserIDInfoExtraForIssueAudit.Avatar == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.Avatar(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.emplId":
		if e.complexity.UserIDInfoExtraForIssueAudit.EmplID == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.EmplID(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.id":
		if e.complexity.UserIDInfoExtraForIssueAudit.ID == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.ID(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.isDeleted":
		if e.complexity.UserIDInfoExtraForIssueAudit.IsDeleted == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.IsDeleted(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.isDisabled":
		if e.complexity.UserIDInfoExtraForIssueAudit.IsDisabled == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.IsDisabled(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.name":
		if e.complexity.UserIDInfoExtraForIssueAudit.Name == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.Name(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.namePy":
		if e.complexity.UserIDInfoExtraForIssueAudit.NamePy == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.NamePy(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.unionId":
		if e.complexity.UserIDInfoExtraForIssueAudit.UnionID == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.UnionID(childComplexity), true

	case "UserIdInfoExtraForIssueAudit.userId":
		if e.complexity.UserIDInfoExtraForIssueAudit.UserID == nil {
			break
		}

		return e.complexity.UserIDInfoExtraForIssueAudit.UserID(childComplexity), true

	case "UserInfo.avatar":
		if e.complexity.UserInfo.Avatar == nil {
			break
		}

		return e.complexity.UserInfo.Avatar(childComplexity), true

	case "UserInfo.createTime":
		if e.complexity.UserInfo.CreateTime == nil {
			break
		}

		return e.complexity.UserInfo.CreateTime(childComplexity), true

	case "UserInfo.departmentList":
		if e.complexity.UserInfo.DepartmentList == nil {
			break
		}

		return e.complexity.UserInfo.DepartmentList(childComplexity), true

	case "UserInfo.email":
		if e.complexity.UserInfo.Email == nil {
			break
		}

		return e.complexity.UserInfo.Email(childComplexity), true

	case "UserInfo.isCreator":
		if e.complexity.UserInfo.IsCreator == nil {
			break
		}

		return e.complexity.UserInfo.IsCreator(childComplexity), true

	case "UserInfo.name":
		if e.complexity.UserInfo.Name == nil {
			break
		}

		return e.complexity.UserInfo.Name(childComplexity), true

	case "UserInfo.namePy":
		if e.complexity.UserInfo.NamePy == nil {
			break
		}

		return e.complexity.UserInfo.NamePy(childComplexity), true

	case "UserInfo.phoneNumber":
		if e.complexity.UserInfo.PhoneNumber == nil {
			break
		}

		return e.complexity.UserInfo.PhoneNumber(childComplexity), true

	case "UserInfo.roleList":
		if e.complexity.UserInfo.RoleList == nil {
			break
		}

		return e.complexity.UserInfo.RoleList(childComplexity), true

	case "UserInfo.status":
		if e.complexity.UserInfo.Status == nil {
			break
		}

		return e.complexity.UserInfo.Status(childComplexity), true

	case "UserInfo.statusChangeTime":
		if e.complexity.UserInfo.StatusChangeTime == nil {
			break
		}

		return e.complexity.UserInfo.StatusChangeTime(childComplexity), true

	case "UserInfo.userID":
		if e.complexity.UserInfo.UserID == nil {
			break
		}

		return e.complexity.UserInfo.UserID(childComplexity), true

	case "UserLoginResp.avatar":
		if e.complexity.UserLoginResp.Avatar == nil {
			break
		}

		return e.complexity.UserLoginResp.Avatar(childComplexity), true

	case "UserLoginResp.name":
		if e.complexity.UserLoginResp.Name == nil {
			break
		}

		return e.complexity.UserLoginResp.Name(childComplexity), true

	case "UserLoginResp.needInitOrg":
		if e.complexity.UserLoginResp.NeedInitOrg == nil {
			break
		}

		return e.complexity.UserLoginResp.NeedInitOrg(childComplexity), true

	case "UserLoginResp.notFsMobile":
		if e.complexity.UserLoginResp.NotFsMobile == nil {
			break
		}

		return e.complexity.UserLoginResp.NotFsMobile(childComplexity), true

	case "UserLoginResp.orgCode":
		if e.complexity.UserLoginResp.OrgCode == nil {
			break
		}

		return e.complexity.UserLoginResp.OrgCode(childComplexity), true

	case "UserLoginResp.orgId":
		if e.complexity.UserLoginResp.OrgID == nil {
			break
		}

		return e.complexity.UserLoginResp.OrgID(childComplexity), true

	case "UserLoginResp.orgName":
		if e.complexity.UserLoginResp.OrgName == nil {
			break
		}

		return e.complexity.UserLoginResp.OrgName(childComplexity), true

	case "UserLoginResp.token":
		if e.complexity.UserLoginResp.Token == nil {
			break
		}

		return e.complexity.UserLoginResp.Token(childComplexity), true

	case "UserLoginResp.userId":
		if e.complexity.UserLoginResp.UserID == nil {
			break
		}

		return e.complexity.UserLoginResp.UserID(childComplexity), true

	case "UserOrganization.address":
		if e.complexity.UserOrganization.Address == nil {
			break
		}

		return e.complexity.UserOrganization.Address(childComplexity), true

	case "UserOrganization.cityId":
		if e.complexity.UserOrganization.CityID == nil {
			break
		}

		return e.complexity.UserOrganization.CityID(childComplexity), true

	case "UserOrganization.code":
		if e.complexity.UserOrganization.Code == nil {
			break
		}

		return e.complexity.UserOrganization.Code(childComplexity), true

	case "UserOrganization.countryId":
		if e.complexity.UserOrganization.CountryID == nil {
			break
		}

		return e.complexity.UserOrganization.CountryID(childComplexity), true

	case "UserOrganization.functions":
		if e.complexity.UserOrganization.Functions == nil {
			break
		}

		return e.complexity.UserOrganization.Functions(childComplexity), true

	case "UserOrganization.id":
		if e.complexity.UserOrganization.ID == nil {
			break
		}

		return e.complexity.UserOrganization.ID(childComplexity), true

	case "UserOrganization.industryId":
		if e.complexity.UserOrganization.IndustryID == nil {
			break
		}

		return e.complexity.UserOrganization.IndustryID(childComplexity), true

	case "UserOrganization.isAdmin":
		if e.complexity.UserOrganization.IsAdmin == nil {
			break
		}

		return e.complexity.UserOrganization.IsAdmin(childComplexity), true

	case "UserOrganization.IsAuthenticated":
		if e.complexity.UserOrganization.IsAuthenticated == nil {
			break
		}

		return e.complexity.UserOrganization.IsAuthenticated(childComplexity), true

	case "UserOrganization.isDelete":
		if e.complexity.UserOrganization.IsDelete == nil {
			break
		}

		return e.complexity.UserOrganization.IsDelete(childComplexity), true

	case "UserOrganization.isShow":
		if e.complexity.UserOrganization.IsShow == nil {
			break
		}

		return e.complexity.UserOrganization.IsShow(childComplexity), true

	case "UserOrganization.logoUrl":
		if e.complexity.UserOrganization.LogoURL == nil {
			break
		}

		return e.complexity.UserOrganization.LogoURL(childComplexity), true

	case "UserOrganization.name":
		if e.complexity.UserOrganization.Name == nil {
			break
		}

		return e.complexity.UserOrganization.Name(childComplexity), true

	case "UserOrganization.OrgIsEnabled":
		if e.complexity.UserOrganization.OrgIsEnabled == nil {
			break
		}

		return e.complexity.UserOrganization.OrgIsEnabled(childComplexity), true

	case "UserOrganization.owner":
		if e.complexity.UserOrganization.Owner == nil {
			break
		}

		return e.complexity.UserOrganization.Owner(childComplexity), true

	case "UserOrganization.provinceId":
		if e.complexity.UserOrganization.ProvinceID == nil {
			break
		}

		return e.complexity.UserOrganization.ProvinceID(childComplexity), true

	case "UserOrganization.remark":
		if e.complexity.UserOrganization.Remark == nil {
			break
		}

		return e.complexity.UserOrganization.Remark(childComplexity), true

	case "UserOrganization.resorceId":
		if e.complexity.UserOrganization.ResorceID == nil {
			break
		}

		return e.complexity.UserOrganization.ResorceID(childComplexity), true

	case "UserOrganization.scale":
		if e.complexity.UserOrganization.Scale == nil {
			break
		}

		return e.complexity.UserOrganization.Scale(childComplexity), true

	case "UserOrganization.sourceChannel":
		if e.complexity.UserOrganization.SourceChannel == nil {
			break
		}

		return e.complexity.UserOrganization.SourceChannel(childComplexity), true

	case "UserOrganization.sourcePlatform":
		if e.complexity.UserOrganization.SourcePlatform == nil {
			break
		}

		return e.complexity.UserOrganization.SourcePlatform(childComplexity), true

	case "UserOrganization.webSite":
		if e.complexity.UserOrganization.WebSite == nil {
			break
		}

		return e.complexity.UserOrganization.WebSite(childComplexity), true

	case "UserOrganizationList.list":
		if e.complexity.UserOrganizationList.List == nil {
			break
		}

		return e.complexity.UserOrganizationList.List(childComplexity), true

	case "UserOrganizationList.total":
		if e.complexity.UserOrganizationList.Total == nil {
			break
		}

		return e.complexity.UserOrganizationList.Total(childComplexity), true

	case "UserOrganizationListResp.list":
		if e.complexity.UserOrganizationListResp.List == nil {
			break
		}

		return e.complexity.UserOrganizationListResp.List(childComplexity), true

	case "UserRegisterResp.token":
		if e.complexity.UserRegisterResp.Token == nil {
			break
		}

		return e.complexity.UserRegisterResp.Token(childComplexity), true

	case "UserRoleData.RoleId":
		if e.complexity.UserRoleData.RoleID == nil {
			break
		}

		return e.complexity.UserRoleData.RoleID(childComplexity), true

	case "UserRoleData.RoleName":
		if e.complexity.UserRoleData.RoleName == nil {
			break
		}

		return e.complexity.UserRoleData.RoleName(childComplexity), true

	case "UserRoleInfo.id":
		if e.complexity.UserRoleInfo.ID == nil {
			break
		}

		return e.complexity.UserRoleInfo.ID(childComplexity), true

	case "UserRoleInfo.langCode":
		if e.complexity.UserRoleInfo.LangCode == nil {
			break
		}

		return e.complexity.UserRoleInfo.LangCode(childComplexity), true

	case "UserRoleInfo.name":
		if e.complexity.UserRoleInfo.Name == nil {
			break
		}

		return e.complexity.UserRoleInfo.Name(childComplexity), true

	case "Void.id":
		if e.complexity.Void.ID == nil {
			break
		}

		return e.complexity.Void.ID(childComplexity), true

	case "WorkHourWorker.avatar":
		if e.complexity.WorkHourWorker.Avatar == nil {
			break
		}

		return e.complexity.WorkHourWorker.Avatar(childComplexity), true

	case "WorkHourWorker.name":
		if e.complexity.WorkHourWorker.Name == nil {
			break
		}

		return e.complexity.WorkHourWorker.Name(childComplexity), true

	case "WorkHourWorker.userId":
		if e.complexity.WorkHourWorker.UserID == nil {
			break
		}

		return e.complexity.WorkHourWorker.UserID(childComplexity), true

	case "fsDocumentData.docsToken":
		if e.complexity.FsDocumentData.DocsToken == nil {
			break
		}

		return e.complexity.FsDocumentData.DocsToken(childComplexity), true

	case "fsDocumentData.docsType":
		if e.complexity.FsDocumentData.DocsType == nil {
			break
		}

		return e.complexity.FsDocumentData.DocsType(childComplexity), true

	case "fsDocumentData.docsUrl":
		if e.complexity.FsDocumentData.DocsURL == nil {
			break
		}

		return e.complexity.FsDocumentData.DocsURL(childComplexity), true

	case "fsDocumentData.ownerId":
		if e.complexity.FsDocumentData.OwnerID == nil {
			break
		}

		return e.complexity.FsDocumentData.OwnerID(childComplexity), true

	case "fsDocumentData.ownerName":
		if e.complexity.FsDocumentData.OwnerName == nil {
			break
		}

		return e.complexity.FsDocumentData.OwnerName(childComplexity), true

	case "fsDocumentData.title":
		if e.complexity.FsDocumentData.Title == nil {
			break
		}

		return e.complexity.FsDocumentData.Title(childComplexity), true

	case "fsDocumentListResp.list":
		if e.complexity.FsDocumentListResp.List == nil {
			break
		}

		return e.complexity.FsDocumentListResp.List(childComplexity), true

	case "fsDocumentListResp.total":
		if e.complexity.FsDocumentListResp.Total == nil {
			break
		}

		return e.complexity.FsDocumentListResp.Total(childComplexity), true

	case "getIssueViewListResp.list":
		if e.complexity.GetIssueViewListResp.List == nil {
			break
		}

		return e.complexity.GetIssueViewListResp.List(childComplexity), true

	case "getIssueViewListResp.total":
		if e.complexity.GetIssueViewListResp.Total == nil {
			break
		}

		return e.complexity.GetIssueViewListResp.Total(childComplexity), true

	case "issueListStatData.finishedCount":
		if e.complexity.IssueListStatData.FinishedCount == nil {
			break
		}

		return e.complexity.IssueListStatData.FinishedCount(childComplexity), true

	case "issueListStatData.overdueCount":
		if e.complexity.IssueListStatData.OverdueCount == nil {
			break
		}

		return e.complexity.IssueListStatData.OverdueCount(childComplexity), true

	case "issueListStatData.projectObjectTypeId":
		if e.complexity.IssueListStatData.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueListStatData.ProjectObjectTypeID(childComplexity), true

	case "issueListStatData.projectObjectTypeName":
		if e.complexity.IssueListStatData.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.IssueListStatData.ProjectObjectTypeName(childComplexity), true

	case "issueListStatData.total":
		if e.complexity.IssueListStatData.Total == nil {
			break
		}

		return e.complexity.IssueListStatData.Total(childComplexity), true

	case "projectUser.createTime":
		if e.complexity.ProjectUser.CreateTime == nil {
			break
		}

		return e.complexity.ProjectUser.CreateTime(childComplexity), true

	case "projectUser.creator":
		if e.complexity.ProjectUser.Creator == nil {
			break
		}

		return e.complexity.ProjectUser.Creator(childComplexity), true

	case "projectUser.creatorInfo":
		if e.complexity.ProjectUser.CreatorInfo == nil {
			break
		}

		return e.complexity.ProjectUser.CreatorInfo(childComplexity), true

	case "projectUser.departmentInfo":
		if e.complexity.ProjectUser.DepartmentInfo == nil {
			break
		}

		return e.complexity.ProjectUser.DepartmentInfo(childComplexity), true

	case "projectUser.type":
		if e.complexity.ProjectUser.Type == nil {
			break
		}

		return e.complexity.ProjectUser.Type(childComplexity), true

	case "projectUser.userInfo":
		if e.complexity.ProjectUser.UserInfo == nil {
			break
		}

		return e.complexity.ProjectUser.UserInfo(childComplexity), true

	case "projectUser.userRole":
		if e.complexity.ProjectUser.UserRole == nil {
			break
		}

		return e.complexity.ProjectUser.UserRole(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema/app_info.graphql", Input: `"接入应用信息结构体"
type AppInfo{
	"主键"
	id:Int64!
	"名称"
	name:String!
	"应用编号"
	code:String!
	"秘钥1"
	secret1:String!
	"秘钥2"
	secret2:String!
	"负责人"
	owner:String!
	"审核状态,1待审核,2审核通过,3审核未通过"
	checkStatus:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建接入应用信息请求结构体"
input CreateAppInfoReq{
	"名称"
	name:String!
	"应用编号"
	code:String!
	"秘钥1"
	secret1:String!
	"秘钥2"
	secret2:String!
	"负责人"
	owner:String!
	"审核状态,1待审核,2审核通过,3审核未通过"
	checkStatus:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新接入应用信息请求结构体"
input UpdateAppInfoReq{
	"主键"
	id:Int64!
	"名称"
	name:String!
	"应用编号"
	code:String!
	"秘钥1"
	secret1:String!
	"秘钥2"
	secret2:String!
	"负责人"
	owner:String!
	"审核状态,1待审核,2审核通过,3审核未通过"
	checkStatus:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除接入应用信息请求结构体"
input DeleteAppInfoReq{
	"主键"
	id:Int64!
}

"接入应用信息列表响应结构体"
type AppInfoList{
    total:Int64!
    list:[AppInfo!]
}

"申请授权请求返回"
type ApplyScopesResp {
    "申请时的三方返回 code"
    thirdCode: Int64!
    "申请时的三方返回 msg"
    thirdMsg: String!
}

"检查是否有特定的权限，请求参数"
input CheckSpecificScopeReq {
    "权限标识。后端提供的枚举值。"
    powerFlag: String!
}

"检查是否有特定的权限，响应参数"
type CheckSpecificScopeResp {
    hasPower: Boolean!
}
`, BuiltIn: false},
	{Name: "schema/attachment.graphql", Input: `input DeleteProjectAttachmentReq{
    "文件id数组"
    resourceIds:[Int64!]!
    "项目id"
    projectId:Int64!

}
type DeleteProjectAttachmentResp{
    "文件id数组"
    resourceIds:[Int64!]!
}

input ProjectAttachmentReq {
    "项目id"
    projectId:Int64!
    "文件类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int
    "文件搜索关键字"
    keyWord:String
}

input ProjectAttachmentInfoReq {
    "appId"
    appId: Int64!
	"resourceId"
	resourceId: Int64!
	"issueId"
	issueId: Int64!
    "文件类型,0其他,1文档,2图片,3视频,4音频"
    fileType: Int
}

type AttachmentList{
    total:Int64!
    list:[Attachment!]
}


type Attachment{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"host"
	host:String!
	"路径"
	path:String!
	"officeUrl"
	officeUrl:String!
	"缩略图路径"
	pathCompressed: String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件大小"
	size:Int64!
	"创建人姓名"
	creatorName: String!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"文件类型"
	fileType:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
    "关联任务列表"
    issueList:[Issue!]!
}

input fsDocumentListReq {
	"关键字"
	searchKey:String
}

type fsDocumentListResp {
	total:Int64!
	list:[fsDocumentData!]
}

type fsDocumentData {
	"标题"
	title:String!
	"文档类型"
	docsType:String!
	"token"
	docsToken:String!
	"url"
	docsUrl:String!
	"创建人"
	ownerName:String!
	"创建人id"
	ownerId:String!
}


input AddIssueAttachmentFsReq {
	folderId:Int64!
	projectId:Int64!
	issueId:Int64!
	data:[AddIssueAttachmentFsData!]!
}

input AddIssueAttachmentFsData {
	"标题"
	title:String!
	"链接"
	url:String!
}

type AddIssueAttachmentFsResp {
	"资源"
	resources:[Resource!]!
}

input AttachmentSimpleInfo {
	"url"
	url:String!
	"附件名"
	name:String!
	"后缀"
	suffix:String!
	"文件大小"
	size:Int64!
}
`, BuiltIn: false},
	{Name: "schema/auth.graphql", Input: `type InternalAuthResp{
    hasPermission: Any!
}

"用户登录请求结构体"
input UserLoginReq{
    "登录类型: 1、短信验证码登录，2、账号密码登录，3、邮箱验证码登录"
    loginType: Int!
    "登录类型为1时，loginName为手机号； 登录类型为3时，loginName为邮箱"
    loginName: String!
    "登录类型为2时，密码必传"
    password: String
    "验证码"
    authCode: String
    "注册时可以带上名字"
    name: String
    "邀请码, 邀请注册时必填"
    inviteCode: String
    "来源通道"
    sourceChannel: String!
    "平台"
    sourcePlatform: String!
    "codeToken"
    codeToken: String
}

"用户登录响应结构体"
type UserLoginResp{
    "用户token"
    token: String!
    "用户id"
    userId: Int64!
    "组织id"
    orgId: Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "用户名称"
    name: String!
    "头像"
    avatar: String!
    "是否需要创建组织"
    needInitOrg: Boolean!
    "是否不是飞书手机号"
    notFsMobile:Boolean!
}

"获取邀请码响应结构体"
type GetInviteCodeResp{
    "邀请码"
    inviteCode: String!
    "有效时长，单位：秒"
    expire: Int!
}

"获取邀请码请求结构体"
input GetInviteCodeReq{
    "平台"
    sourcePlatform: String
}

"获取邀请信息请求结构体"
input GetInviteInfoReq{
    "邀请code"
    inviteCode: String!
}

"获取邀请信息响应结构体"
type GetInviteInfoResp{
    "组织id"
    orgId: Int64!
    "组织名"
    orgName: String!
    "邀请人id"
    inviterId: Int64!
    "邀请人姓名"
    inviterName: String!
}

"找回密码请求结构体"
input RetrievePasswordReq{
    "账号，可以是邮箱或者手机号"
    username: String!
    "验证码"
    authCode: String
    "新密码"
    newPassword: String!
}

"重新设置密码请求结构体"
input ResetPasswordReq{
    "当前密码"
    currentPassword: String!
    "新密码"
    newPassword: String!
}

"设置登录密码密码请求结构体"
input SetPasswordReq{
    "密码"
    password: String!
}

"解绑登录方式请求结构体（只剩下一种登录方式的时候不允许解绑）"
input UnbindLoginNameReq{
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
    "验证码"
    authCode: String!
}

"绑定手机号或者邮箱请求结构体"
input BindLoginNameReq{
    "登录地址，手机号或者邮箱"
    address: String!
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
    "验证码"
    authCode: String!
}

"检测邮箱、手机号、账户是否存在请求结构体"
input CheckLoginNameReq{
    "登录地址，手机号或者邮箱"
    address: String!
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
}

"用户注册请求结构体"
input UserRegisterReq{
    "注册用户名（邮箱，手机号，账号等等）"
    userName: String!
    "注册类型(1,手机号，2，账号，3，邮箱)(暂时只支持邮箱/手机)"
    registerType: Int!
    "姓名"
    name: String
    "密码，只有注册类型为2时必填"
    password: String
    "短信或者邮箱验证码，当注册类型为1和3时必填"
    authCode: String
    "来源通道"
    sourceChannel: String!
    "平台"
    sourcePlatform: String!
}

"用户注册响应结构体"
type UserRegisterResp{
    "用户token"
    token: String!
}

`, BuiltIn: false},
	{Name: "schema/chat.graphql", Input: `type ChatData {
    "群聊id"
    outChatId:String!
    "群聊名称"
    name:String!
    "群聊描述"
    description:String
    "关联id(关联列表时有)"
    relationId:Int64
    "群聊头像"
    avatar:String!
    "是否是项目主群"
    isMain:Boolean!
}

input GetProjectMainChatIdReq {
    "项目id"
    projectId:Int64!
}

type GetProjectMainChatIdResp {
    "关联群聊id"
    chatId: String!
}

input GetFsProjectChatPushSettingsReq {
    "三方群聊 id，通过群聊 id 获取群聊下的推送配置"
    chatId: String!
    "兼容旧的“项目动态设置”按钮链接。如果 chatId 为空，则后端使用该 projectId 查询对应的 chatId"
    projectId: Int64!
}

type GetFsProjectChatPushSettingsResp {
    "该群聊绑定的项目的配置。一个群聊可绑定多个项目。"
    outChatSettings: GetFsProjectChatPushSettingsOneChat
}

type GetFsProjectChatPushSettingsOneChat {
    tables: [GetFsProjectChatPushSettingsOneChatTables]
    "添加任务(1开2关)"
    createIssue:Int!
    "任务有新的评论"
    createIssueComment:Int!
    "任务的某些字段被修改时，是否推送。1：推送（字段请看 modifyColumnsOfSend）"
    updateIssueCase: Int!
    "如果开启“任务修改推送”时，这些字段被修改时，才推送消息。"
    modifyColumnsOfSend: [String]
}

type GetFsProjectChatPushSettingsOneChatTables {
    "项目 id"
    projectId:Int64!
    "项目下的表 id"
    tableId: String!
}

type GetFsProjectChatPushSettingsOneProOneTable {
    "表的 id"
    tableIdStr: String!
    "创建任务时，是否推送。1：推送"
    createIssue: Int!
    "任务被评论时是否推送。1：推送"
    createIssueComment: Int!
    "任务的某些字段被修改时，是否推送。1：推送（字段请看 modifyColumnsOfSend）"
    updateIssueCase: Int!
    "如果开启“任务修改推送”时，这些字段被修改时，才推送消息"
    modifyColumnsOfSend: [String]
}

input UpdateFsProjectChatPushSettingsReq {
    "群 id"
    chatId: String!
    "兼容旧的“项目动态设置”按钮链接。如果 chatId 为空，则后端使用该 projectId 查询对应的 chatId"
    projectId: Int64!
    "配置数据的表信息"
    tables: [UpdateFsProjectChatPushSettingsOfTableParam]
    "添加任务(1开2关)"
    createIssue:Int!
    "任务有新的评论"
    createIssueComment:Int!
    "任务的某些字段被修改时，是否推送。1：推送（字段请看 modifyColumnsOfSend）"
    updateIssueCase: Int!
    "如果开启“任务修改推送”时，这些字段被修改时，才推送消息。"
    modifyColumnsOfSend: [String]
}

input UpdateFsProjectChatPushSettingsOfTableParam {
    "项目 id"
    projectId:Int64!
    "app id"
    appId:Int64!
    "项目下的表 id"
    tableId: String
}
`, BuiltIn: false},
	{Name: "schema/common.graphql", Input: `type StatExtResp{
    issue: StatIssueExt!
}

type StatIssueExt{
    data: Any
}

type StatData{
    issueCount: Int!
    issueWaitCount: Int!
    issueRunningCount: Int!
    issueEndCount: Int!
    storyPointCount: Int!
    storyPointWaitCount: Int!
    storyPointRunningCount: Int!
    storyPointEndCount: Int!
}

type BuildInfoDefine {
    gitCommitLog: String!
    gitStatus:  String!
    buildTime:  String!
    buildGoVersion: String!
}


input AreaLinkageListReq{
    "是否是根"
    isRoot:Boolean
    "大陆板块"
    continentId:Int64
    "国家Id"
    countryId:Int64
    "地区Id"
    areaId:Int64
    "省/州Id"
    stateId:Int64
    "城市Id"
    cityId:Int64
}

type AreaLinkageListResp{
    list:[AreaLinkageResp!]
}


type AreaLinkageResp{
    "主键"
    id:Int64!
    "名字"
    name:String!
    "中文名"
    cname:String!
    "code"
    code:String!
    "是否默认选择"
    isDefault:Int!
}

type IndustryListResp{
    list:[IndustryResp!]
}


type IndustryResp{
    "主键"
    id:Int64!
    "名字"
    name:String!
    "中文名"
    cname:String!
}

type BoolResp{
    "是否符合期望、确定、ok：true 表示成功、是、确定；false 表示否定、异常"
    isTrue: Boolean!
}


`, BuiltIn: false},
	{Name: "schema/custom_field.graphql", Input: `type CustomValue {
    "字段id"
    id:Int64!
    "字段名称"
    name:String!
    "字段值"
    value:Any!
    "类型(1文本类型2单选框3多选框4日期选框5人员选择6是非选择7数字框)"
    fieldType:Int!
    "选项值"
    fieldValue:[Map!]!
    "是否属于组织字段库(1组织2项目3系统)"
    isOrgField:Int!
    "字段描述"
    remark:String!
    "字段"
    title:String!
    "启用状态（1启用2禁用）对于项目而言"
    status:Int!
}

input UpdateIssueCustionFieldData {
    "字段id"
    fieldId:Int64!
    "字段值"
    value:Any!
    "名称"
    title:String!
}
`, BuiltIn: false},
	{Name: "schema/department.graphql", Input: `"部门结构体"
type Department{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"部门名称"
	name:String!
	"部门标识"
	code:String!
	"父部门id"
	parentId:Int64!
	"排序"
	sort:Int!
	"部门状态"
	status: Int!
	"是否隐藏部门,1隐藏,2不隐藏"
	isHide:Int!
	"来源渠道,"
	sourceChannel:String!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
}

"创建部门请求结构体"
input CreateDepartmentReq{
	"组织id"
	orgId:Int64!
	"部门名称"
	name:String!
	"部门标识"
	code:String!
	"父部门id"
	parentId:Int64!
	"排序"
	sort:Int!
	"是否隐藏部门,1隐藏,2不隐藏"
	isHide:Int!
	"来源渠道,"
	sourceChannel:String!
	"状态, 1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新部门请求结构体"
input UpdateDepartmentReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"部门名称"
	name:String!
	"部门标识"
	code:String!
	"父部门id"
	parentId:Int64!
	"排序"
	sort:Int!
	"是否隐藏部门,1隐藏,2不隐藏"
	isHide:Int!
	"来源渠道,"
	sourceChannel:String!
	"状态, 1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"部门列表响应结构体"
type DepartmentList{
	"总数"
    total:Int64!
	"列表"
    list:[Department!]
}

input DepartmentListReq{
	"父部门id"
    parentId: Int64
	"是否查询最上级部门, 如果是1则为true"
	isTop: Int
	"是否显示隐藏的部门，如果是1则为true，默认不显示"
	showHiding: Int
	"部门名称"
	name: String
	"部门id"
	departmentIds:[Int64!]
}

input DepartmentMemberListReq{
	"部门id"
	departmentId: Int64
}

"部门用户信息"
type DepartmentMemberInfo{
	"id"
	userId: Int64!
	"姓名"
	name: String!
	"姓名拼音"
	namePy: String
	"用户头像"
	avatar: String!
	"工号：企业下唯一"
	emplId: String!
	"unionId： 开发者账号下唯一"
	unionId: String!
	"用户部门id"
	departmentId: Int64!
	"用户组织状态"
	orgUserStatus:Int!
}

input DepartmentMembersListReq {
	"名称"
	name:String
	"限定人员范围"
	userIds:[Int64!]
	"需要排除的项目id,取项目之外的组织成员"
	excludeProjectId:Int64
	"关联类型(1负责人2关注人3全部，默认全部,配合项目id使用)"
	relationType:Int64
}

type DepartmentMembersListResp {
	"总数"
	total:Int64!
	"列表"
	list:[DepartmentMemberInfo!]
}
`, BuiltIn: false},
	{Name: "schema/dingtalk.graphql", Input: `"获取JSApi签名请求结构体"
input JsApiSignReq{
    "类型:目前只支持:jsapi"
    type: String!
    "路由url"
    url: String!
    "dingtalk企业id"
    corpId: String!
}

"获取JSApi签名响应结构体"
type JsApiSignResp{
    "应用代理id"
    agentId: Int64!
    "时间戳"
    timeStamp: String!
    "随机字符串"
    noceStr: String!
    "签名"
    signature: String!
}

#"DingTalk免登陆 Code 登录验证请求结构体"
#input AuthReq{
#    "免登code"
#    code: String!
#    "企业id"
#    corpId: String!
#}
#
#"DingTalk第三方扫码登录"
#input AuthDingCodeReq {
#    "免登code"
#    code: String!
#    "免登code类型，1: code2session, 2: oauth(默认为1)"
#    codeType: Int
#    "企业id"
#    corpId: String!
#}
#
#"DingTalk免登陆 Code 登录验证响应结构体"
#type AuthResp{
#    "持久化登录信息的Token"
#    token: String!
#    "组织id"
#    orgId: Int64!
#    "组织名称"
#    orgName: String!
#    "授权企业id"
#    corpId: String!
#    "用户id"
#    userId: Int64!
#    "用户姓名"
#    name: String!
#}
#
#"钉钉扫码登录返回结果"
#type DingAuthCodeResp {
#    "持久化登录信息的Token"
#    token: String!
#    "组织id"
#    orgId: Int64!
#    "组织名称"
#    orgName: String!
#    "授权企业id"
#    corpId: String!
#    "用户id"
#    userId: Int64!
#    "用户姓名"
#    name: String!
#}

#type OrgInfoForChosen {
#    "组织id"
#    id:Int64!
#    "组织名称"
#    name:String!
#}
#
#"选择组织返回登录信息"
#input AuthForChosenOrgReq {
#    outUserId: String!
#    orgId:Int64!
#}`, BuiltIn: false},
	{Name: "schema/feishu.graphql", Input: `"飞书免登陆Code 登录验证请求结构体"
input FeiShuAuthReq{
    "免登code"
    code: String!
    "免登code类型，1: code2session, 2: oauth(默认为1)"
    codeType: Int
}

"初始化飞书账号"
input InitFeiShuAccountReq{
    "codeToken"
    codeToken: String!
}

"飞书免登陆Code 登录验证响应结构体"
type FeiShuAuthResp{
    "持久化登录信息的Token"
    token: String!
    "组织id"
    orgId: Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "用户id"
    userId: Int64!
    "用户姓名"
    name: String!
    "企业ID"
    tenantKey: String!
    "用户OpenID"
    openId: String!
    "是否为企业管理"
    isAdmin: Boolean!
}

"获取飞书免登陆Code认证信息"
type FeiShuAuthCodeResp{
    "企业ID"
    tenantKey: String!
    "用户OpenID"
    openId: String!
    "是否为企业管理"
    isAdmin: Boolean!
    "是否被绑定"
    binding: Boolean!
    "refreshToken"
    refreshToken: String!
    "accessToken"
    accessToken: String!
    "token"
    token: String!
    "codeToken"
    codeToken: String!
    "组织id"
    orgId: Int64!
    "组织名称"
    orgName: String!
    "外部组织名称"
    outOrgName: String!
    "组织code"
    orgCode: String!
    "用户id"
    userId: Int64!
    "用户姓名"
    name: String!
}

"绑定飞书请求结构体"
input BoundFeiShuReq{
    "orgId"
    orgId: Int64!
    "codeToken"
    codeToken: String!
}

"绑定飞书账号"
input BoundFeiShuAccountReq{
    "codeToken"
    codeToken: String!
}`, BuiltIn: false},
	{Name: "schema/folder.graphql", Input: `"创建文件夹请求结构体"
input CreateProjectFolderReq {
    "项目id"
    projectId:Int64!
    "文件夹名"
    name:String!
    "父级文件夹id"
    parentId:Int64!
    "文件夹类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int64!
}
"文件夹结构体"
type Folder {
    "文件夹id"
    id:Int64!
    "组织id"
    orgId:Int64!
    "项目id"
    projectId:Int64!
    "文件夹名"
    name:String!
    "父级文件夹id"
    parentId:Int64!
    "文件夹类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int64!
    "文件路径"
    path:String!
    "创建人"
    creator:Int64!
    "创建人中文名"
    creatorName:String!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
   	"乐观锁"
   	version:Int!
   	"是否删除,1是,2否"
   	isDelete:Int!
}

"删除文件夹请求结构体"
input DeleteProjectFolderReq{
    "文件夹id数组"
    folderIds:[Int64!]!
    "项目id"
    projectId:Int64!
}

"更新文件夹请求结构体"
input UpdateProjectFolderReq{
    "文件夹id"
    folderId:Int64!
    "项目id"
    projectId:Int64!
    "文件夹名"
    name:String
    "父级文件夹id"
    parentId:Int64
    "文件夹类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int64
    "变动的字段列表"
    updateFields:[String!]
}

type UpdateProjectFolderResp{
    "文件夹id"
    folderId:Int64!
}

type DeleteProjectFolderResp{
    "文件夹id数组"
    folderIds:[Int64!]!
}

input ProjectFolderReq{
    "父文件夹id"
    parentId:Int64
    "项目id"
    projectId:Int64!
}

"文件夹列表相应结构体"
type FolderList{
    total:Int64!
    list:[Folder!]!
}`, BuiltIn: false},
	{Name: "schema/issue.graphql", Input: `
input LessOrder {
    "是否是正序"
    asc:Boolean!
    "字段"
    column:String!
}

input LessCondsData {
    "类型(between,equal,gt,gte,in,like,lt,lte,not_in,not_like,not_null,is_null,all_in,values_in)"
    type:String!
    "字段类型"
    fieldType:String
    "值"
    value:Any
    "值（数组）"
    values:Any
    "字段id"
    column:String!
    "左值"
    left:Any
    "右值"
    right:Any
    "嵌套"
    conds:[LessCondsData!]
    "不进行预处理"
    noPretreat:Boolean
}

input CondsData {
    "类型(between,equal,gt,gte,in,like,lt,lte,not_in,not_like,not_null,is_null,all_in,values_in)"
    type:String!
    "字段类型"
    fieldType:String
    "值"
    value:Any
    "字段id"
    column:Int64!
    "左值"
    left:Any
    "右值"
    right:Any
}

input CondOrder {
    "是否是正序"
    asc:Boolean!
    "字段"
    column:Int64!
}

"首页任务tag信息"
type HomeIssueTagInfo{
    "标签id"
    id: Int64!
    "标签名"
    name: String!
    "背景颜色"
    bgStyle:String!
    "字体颜色"
    fontStyle:String!
}

"任务结构体"
type Issue{
    "任务id"
    id:Int64!
    "组织id"
    orgId:Int64!
    "任务code"
    code:String!
    "项目id"
    projectId:Int64!
    "项目对象类型id"
    projectObjectTypeId:Int64!
    "标题"
    title:String!
    "是否归档"
    isFiling:Int!
    "负责人id 注:这个owner字段废弃使用，新增了下面的owners字段，为了支持多负责人"
    owner:Int64!
    "负责人id列表"
    owners: [Int64!]
    "优先级id"
    priorityId:Int64!
    "来源"
    sourceId:Int64!
    "问题类型id"
    issueObjectTypeId:Int64!
    "性质id"
    propertyId:Int64!
    "计划开始时间"
    planStartTime:Time!
    "计划结束时间"
    planEndTime:Time!
    "实际开始时间"
    startTime:Time!
    "实际结束时间"
    endTime:Time!
    "计划工时"
    planWorkHour:Int!
    "迭代id"
    iterationId:Int64!
    "版本id"
    versionId:Int64!
    "模块id"
    moduleId:Int64!
    "父任务id"
    parentId:Int64!
    "父任务标题"
    parentTitle: String!
    "父任务信息"
    parentInfo:[ParentInfo!]!
    "备注"
    remark: String
    "备注详情"
    remarkDetail: String
    "状态id"
    status:Int64!
    "创建者"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新者"
    updator:Int64!
    "更新时间"
    updateTime:Time!
    "排序"
    sort: Int64!
    "是否删除,1是,2否"
    isDelete:Int!
    "审批状态（1待审批3审批通过）"
    auditStatus:Int!
    "影响的id集合"
    issueIds:[Int64!]!
    "表id"
    tableId:String!
    "数据id"
    dataId:String
}

type ParentInfo{
    "id"
    id:Int64!
    "标题"
    title:String!
    "code"
    code:String!
}

"单个任务信息详情结构体"
type IssueInfo{
    "任务信息"
    issue: Issue!
    "项目信息"
    project: HomeIssueProjectInfo!
    "状态信息"
    status: HomeIssueStatusInfo!
    "优先级信息"
    priority: HomeIssuePriorityInfo!
    "执行人信息"
    owner: [UserIdInfo!]
    "执行人信息"
    creatorInfo: UserIdInfo!
    "参与人"
    participantInfos: [UserIdInfo!]
    "关注人"
    followerInfos: [UserIdInfo!]
    "下一个状态"
    nextStatus: [HomeIssueStatusInfo!]
    "标签信息"
    tags: [HomeIssueTagInfo!]
    "来源信息"
    sourceInfo: IssueSourceInfo
    "严重程度信息"
    propertyInfo: IssuePropertyInfo
    "类型信息"
    typeInfo: IssueObjectTypeInfo
    "迭代名称"
    iterationName: String!
    "子任务数量"
    childsNum: Int64!
    "子任务已完成数量"
    childsFinishedNum: Int64!
    "任务类型名称"
    projectObjectTypeName:String!
    "表名称"
    tableName:String!
    "状态列表"
    allStatus:[HomeIssueStatusInfo!]
    "关联任务数量"
    relateIssueCount:Int64!
    "关联资源数量"
    relateResourceCount:Int64!
    "关联评论数量"
    relateCommentCount:Int64!
    "自定义字段结果"
    customField:[CustomValue!]
    "工时信息"
    workHourInfo: HomeIssueWorkHourInfo!
    "确认人信息"
    auditorsInfo:[UserIdInfoExtraForIssueAudit!]
    "上次任务审批催办时间(时间戳0表示最近没有催办(可以催办))"
    lastUrgeTime:Int64!
    "上次**任务**的催办时间(时间戳0表示最近没有催办(可以催办))"
    lastUrgeTimeForIssue:Int64!
    "无码数据"
    lessData:Map
}

"用户id信息"
type UserIdInfoExtraForIssueAudit{
    "用户id"
    id:Int64!
    "用户id"
    userId: Int64!
    "用户名称"
    name: String!
    "用户拼音"
    namePy:String!
    "用户头像"
    avatar: String!
    "工号：企业下唯一"
    emplId: String!
    "unionId： 开发者账号下唯一(暂时废弃，返回空)"
    unionId: String!
    "是否已被删除，为true则代表被组织移除"
    isDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    isDisabled: Boolean!
    "状态(1未查看2已查看未审核3审核通过4驳回)"
    auditStatus:Int!
}

"任务标签结构体"
input IssueTagReqInfo{
    "标签id"
    id: Int64!
    "标签名称"
    name: String!
}

"子任务创建结构体"
input IssueChildren{
    "名称"
    title:String!
    "负责人"
    ownerId: [Int64!]
    "类型id，问题，需求...."
    typeId: Int64
    "任务所在表 id"
    tableId: Int64!
    "优先级"
    priorityId: Int64!
    "计划开始时间"
    planStartTime:Time
    "计划结束时间"
    planEndTime:Time
    "计划工作时长"
    planWorkHour:Int
    "备注"
    remark:String
    "状态id"
    statusId:Int64
    "关联的标签列表"
    tags: [IssueTagReqInfo!]
    "关注人"
    followerIds: [Int64!]
    "关联的附件id列表"
    resourceIds:[Int64!]
    "问题对象类型id"
    issueObjectId:Int64
    "来源id"
    issueSourceId:Int64
    "性质id"
    issuePropertyId:Int64
    "子任务"
    children: [IssueChildren]
    "自定义字段"
    customField:[UpdateIssueCustionFieldData!]
    "审批人"
    auditorIds:[Int64!]
    "迭代"
    iterationId:Int64
    "无码入参"
    lessCreateIssueReq: Map
    "处理业务时的辅助参数，比如导入任务时，向其中存储 import 表示导入来源，便于后续业务处理"
    extraInfo: Map
}


"更新任务状态请求结构体"
input UpdateIssueStatusReq{
    "任务id"
    id:Int64!
    "要更新的状态id"
    nextStatusId:Int64
    "要更新的状态类型,1: 未开始，2：进行中，3：已完成"
    nextStatusType: Int
    "完成父任务时，是否同步更新子任务的状态,1:是，2：否，默认为否"
    needModifyChildStatus: Int
}


"删除任务响应结构体"
input DeleteIssueReq{
    "任务id"
    id:Int64!
    "是否携带子任务(默认带上，兼容以前的)"
    takeChildren:Boolean
}

"批量删除任务请求结构体"
input DeleteIssueBatchReq{
    "项目id"
    projectId:Int64!
    "任务id"
    ids:[Int64!]!
    "镜像应用id"
    menuAppId:String
    "表id"
    tableId:String!
}

"批量删除任务响应结构体"
type DeleteIssueBatchResp {
    "删除成功的id"
    successIssues:[Issue!]!
    "没有权限的任务id"
    noAuthIssues:[Issue!]!
    "还有子任务没有选择的父任务id"
    remainChildrenIssues:[Issue!]!
}

"批量归档任务响应结构体"
type ArchiveIssueBatchResp {
    "成功的id"
    successIssues:[Issue!]!
    "没有权限的任务id"
    noAuthIssues:[Issue!]!
}

"批量移动任务响应结构体"
type MoveIssueBatchResp {
    "成功的id"
    successIssues:[Issue!]!
    "没有权限的任务id"
    noAuthIssues:[Issue!]!
    "还有子任务没有选择的父任务id"
    remainChildrenIssues:[Issue!]!
    "单纯是子任务的任务id"
    childrenIssues:[Issue!]!
}

"任务列表响应结构体"
type IssueList{
    "总数量"
    total:Int64!
    "任务列表"
    list:[Issue!]
}

"首页的任务列表请求结构体"
input HomeIssueInfoReq{
    "关联类型，1：我发起的，2：我负责的，3：我参与的，4：我关注的，5：我审批的,6:待我审批的（审批人是我，我还没有审批的）"
    relatedType: Int
    "排序类型，1：项目分组，2：优先级分组，3：创建日期降序，4：最后更新日期降序, 5: 按开始时间最早, 6：按开始时间最晚, 8：按截止时间最近，9：按创建时间最早, 10: sort排序（正序）11：sort排序（倒序）12:截止时间（正序）13：优先级正序14：优先级倒序15：负责人正序16：负责人倒序17：编号正序18：编号倒序19：标题正序20：标题倒序21：状态正序（必须传项目id，敏捷必须指定任务栏）22：状态倒序（必须传项目id，敏捷必须指定任务栏）23:完成时间倒序24:按照传入id排序25:按照父任务正序26：按照父任务倒序"
    orderType: Int
    "状态,1:未完成，2：已完成，3：未开始，4：进行中，5: 已逾期，-1代表待确认，此状态用于审批"
    status: Int
    statusList:[Int!]
    "任务真实状态集合(传入-1代表待确认，此状态用于审批)"
    trulyStatusIds:[Int64!]
    "是否逾期 （1是2否，不传为全部）"
    isOverdue:Int
    "流程状态id"
    processStatusId: Int64
    "类型，1：主任务,2 子任务"
    type: Int
    "截止时间开始时间点(若只选择开始时间：表示任务截止日期在这之后的所有任务)"
    startTime: Time
    "截止时间结束时间点(若只选择截止时间：则表示任务截止时间在这之前的所有任务)"
    endTime: Time
    "负责人"
    ownerIds: [Int64!]
    "创建人"
    creatorIds: [Int64!]
    "参与人"
    participantIds: [Int64!]
    "关注人"
    followerIds: [Int64!]
    "时间范围：本周，全部.."
    timeScope: Time
    "搜索筛选"
    searchCond: String
    "code筛选"
    code:String
    "项目id"
    projectId: Int64
    "迭代id"
    iterationId: Int64
    "是否已规划(是否关联了迭代)，1: 已规划，2：未规划 "
    planType: Int
    "项目对象类型id。任务状态改造后，改字段的实际代表的是 tableId。"
    projectObjectTypeId: Int64
    "支持多个项目对象类型同时做筛选。任务状态改造后，改字段的实际代表的是 tableId。"
    projectObjectTypeIds: [Int64!]
    "优先级"
    priorityId: Int64
    "优先级集合"
    priorityIds: [Int64!]
    "组合查询类型，1: 今日指派给我，2：最近截止(包括即将逾期和已逾期)，3：今日逾期，4：逾期完成, 5:即将逾期,6:今日创建,7:今日完成,8:今日我关注的，9：今日分配给我审批的，10:今日分配给我审批，待我审批的（审批人是我，我还没有审批的）"
    combinedType: Int
    "任务标签id"
    issueTagId: [Int64!]
    "项目是否归档(1是2否3所有,不传查询未归档)"
    isFiling:Int
    "任务是否归档（1是2否3所有，不传默认未归档）"
    issueIsFiling:Int
    "父任务id"
    parentId:Int64
    "上次更新时间（会查询这个时间点之后有变动的任务，其中包括被删除的任务）"
    lastUpdateTime: Time
    "是否查询父任务的子任务, 如果不是空，且值为1，则将子任务的父任务也查询出来"
    enableParentIssues: Int
    "周期开始时间（只要开始时间和截止时间有一个大于该项则命中条件）"
    periodStartTime: Time
    "周期结束时间（只要开始时间和截止时间有一个小于该项则命中条件）"
    periodEndTime: Time
    "附件资源id"
    resourceId: Int64
    "父子堆叠列表(1是2否，不传默认为否)"
    isParentBeforeChid:Int
    "任务类型"
    issueObjectId:Int64
    "任务类型集合"
    issueObjectIds: [Int64!]
    "严重程度"
    issuePropertyId:Int64
    "严重程度集合"
    issuePropertyIds:[Int64!]
    "需求来源"
    issueSourceId:Int64
    "需求来源集合"
    issueSourceIds:[Int64!]
    "任务id集合"
    issueIds:[Int64!]
    "分组类别(仅用于homeIssuesGroup接口:1负责人2状态3优先级4任务栏5迭代6具体状态，其余默认不分组)"
    groupType:Int
    "添加前置任务时传递任务id，排除掉后置任务中已有的任务"
    issueIdForBefore:Int64
    "添加后置任务列表时传递任务id，排除掉前置任务中已有的任务"
    issueIdForAfter:Int64
    "确认人"
    auditorIds:[Int64!]
    "自定义字段(取并集)"
    conds:[CondsData!]
    "自定义字段排序"
    condOrder:[CondOrder!]
    "无码格式"
    lessConds:LessCondsData
    "无码格式排序"
    lessOrder:[LessOrder!]
    "仅通过极星查询数据"
    isOnlyPolaris:Boolean
    "分配时间开始"
    ownerChangeTimeStart:Time
    "分配时间截至"
    ownerChangeTimeEnd:Time
    "当前任务（用于变更父任务时查询任务列表）"
    currentIssueId:Int64
    "镜像应用id"
    menuAppId:String
    "表Id"
    tableId:String
    "需要查询的无码字段（id不需要传，默认会查）"
    filterColumns:[String!]
}

"首页任务列表响应结构体"
type HomeIssueInfoResp{
    "总数量"
    total:Int64!
    "实际总数量"
    actualTotal: Int64!
    "首页任务列表"
    list:[HomeIssueInfo!]
}

"首页任务列表响应结构体"
type HomeIssueInfoGroupResp{
    "总数量"
    total:Int64!
    "实际总数量"
    actualTotal: Int64!
    "时间跨度"
    timeSpan:Int64!
    "分组列表"
    group:[HomeIssueGroup!]
}

type HomeIssueGroup{
    id:Int64!
    name:String!
    "图片"
    avatar:String!
    "背景色"
    bgStyle: String!
    "字体色"
    fontStyle: String!
    "时间跨度"
    timeSpan:Int64!
    "满足甘特图的任务数量"
    fitTotal:Int64!
    list:[HomeIssueInfo!]
}

"首页任务信息结构体"
type HomeIssueInfo{
    "任务id"
    issueId:Int64!
    "父任务id"
    parentId:Int64!
    "父任务信息"
    parentInfo:[ParentInfo!]!
    "任务标题"
    title:String!
    "是否是查询结果附带的父任务1是0否"
    isAttach:Int!
    "父任务是否是满足条件1是0否"
    parentIsMeetCondition:Int!
    "任务信息"
    issue: Issue!
    "项目信息"
    project: HomeIssueProjectInfo!
    "执行人信息"
    owner: [HomeIssueOwnerInfo!]
    "状态信息"
    status: HomeIssueStatusInfo!
    "优先级信息"
    priority: HomeIssuePriorityInfo!
    "标签信息"
    tags: [HomeIssueTagInfo!]
    "子任务数量"
    childsNum: Int64!
    "子任务已完成数量"
    childsFinishedNum: Int64!
    "任务栏名称"
    projectObjectTypeName:String!
    "状态列表"
    allStatus:[HomeIssueStatusInfo!]
    "来源信息"
    sourceInfo: IssueSourceInfo
    "严重程度信息"
    propertyInfo: IssuePropertyInfo
    "类型信息"
    typeInfo: IssueObjectTypeInfo
    "迭代名称"
    iterationName: String!
    "关注人"
    followerInfos: [UserIdInfo!]
    "关联任务数量"
    relateIssueCount:Int64!
    "关联资源数量"
    relateResourceCount:Int64!
    "关联评论数量"
    relateCommentCount:Int64!
    "自定义字段结果"
    customField:[CustomValue!]
    "工时信息"
    workHourInfo: HomeIssueWorkHourInfo!
    "确认人信息"
    auditorsInfo:[UserIdInfoExtraForIssueAudit!]
    "后置任务id集合"
    afterIssueIds:[Int64!]
    "无码数据"
    lessData:Map
}

"任务的简化信息"
type IssueRestInfo{
    "任务id"
    id: Int64!
    "任务标题"
    title: String!
    "负责人"
    ownerId: Int64!
    "负责人名称"
    ownerName: String!
    "负责人头像"
    ownerAvatar: String!
    "是否已被删除，为true则代表被组织移除"
    ownerIsDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    ownerIsDisabled: Boolean!
    "是否已完成"
    finished: Boolean!
    "状态id"
    statusId:Int64!
    "任务栏id"
    projectObjectTypeId:Int64!
    "迭代id"
    iterationId:Int64!
    "状态名称"
    statusName:String!
    "计划结束时间"
    planEndTime:Time!
    "计划开始时间"
    planStartTime:Time!
    "完成时间"
    endTime:Time!
    "优先级信息"
    priorityInfo:HomeIssuePriorityInfo!
    "状态信息"
    statusInfo:HomeIssueStatusInfo!
    "任务栏名称"
    projectObjectTypeName:String!
    "迭代名称"
    iterationName:String!
    "状态信息"
    allStatus: [HomeIssueStatusInfo!]
    "关联状态(1关联2被关联)"
    type:Int!
    "审批状态（1待审批3审批通过）"
    auditStatus:Int!
    "项目类型"
    projectTypeId:Int64!
}

"首页任务-优先级信息结构体"
type HomeIssuePriorityInfo{
    "优先级id"
    id: Int64!
    "优先级名称"
    name: String!
    "背景色"
    bgStyle: String!
    "字体色"
    fontStyle: String!
}

"任务-来源信息结构体"
type IssueSourceInfo{
    "id"
    id: Int64!
    "来源名称"
    name: String!
}

"任务-类型信息结构体"
type IssueObjectTypeInfo{
    "类型id"
    id: Int64!
    "类型名"
    name: String!
}

"任务-严重程度结构体"
type IssuePropertyInfo{
    "id"
    id: Int64!
    "来源名称"
    name: String!
}

"首页任务-状态信息结构体"
type HomeIssueStatusInfo{
    "状态id"
    id: Int64!
    "状态名"
    name: String!
    "显示名，为空则显示状态名"
    displayName: String
    "背景色"
    bgStyle: String!
    "字体色"
    fontStyle: String!
    "状态类型,1未开始,2进行中,3已完成"
    type: Int!
    "排序"
    sort:Int!
}

"首页任务-项目信息结构体"
type HomeIssueProjectInfo{
    "项目id"
    id: Int64!
    "项目对应的应用 id（无码系统）"
    appId: String!
    "项目名称"
    name: String!
    "是否归档(1是2否)"
    isFilling:Int!
    "项目类型"
    projectTypeId:Int64!
    "项目隐私状态。1开启隐私；2不开启。"
    privacyStatus: Int!
}

"首页任务-负责人信息结构体"
type HomeIssueOwnerInfo{
    "负责人信息"
    id: Int64!
    "负责人id"
    userId:Int64!
    "负责人名称"
    name: String!
    "负责人头像"
    avatar: String
    "是否已被删除，为true则代表被组织移除"
    isDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    isDisabled: Boolean!
}

"任务状态数量统计请求结构体"
input IssueStatusTypeStatReq{
    "项目id"
    projectId: Int64
    "迭代id"
    iterationId: Int64
    "关联类型：1我负责的2我参与的3我关注的4我发起的5我确认的"
    relationType: Int
}

"每日个人完成图数据统计响应数据"
type IssueDailyPersonalWorkCompletionStatData{
    "日期"
    statDate: String!
    "完成数量"
    completedCount: Int64!
}

"任务状态数量统计响应结构体"
type IssueStatusTypeStatResp{
    "状态为未开始的数量"
    notStartTotal:Int64!
    "状态为进行中的数量"
    processingTotal: Int64!
    "状态为已完成的数量"
    completedTotal: Int64!
    "今日完成数"
    completedTodayTotal: Int64!
    "状态为逾期的数量"
    overdueTotal: Int64!
    "状态为明日逾期"
    overdueTomorrowTotal: Int64!
    "逾期完成"
    overdueCompletedTotal:Int64!
    "任务总数"
    total:Int64!
    "今日到期"
    overdueTodayTotal:Int64!
    "即将到期"
    beAboutToOverdueSum:Int64!
    "指派给我的任务"
    todayCount:Int64!
    "今日创建"
    todayCreateCount:Int64!
    "@我的数量"
    callMeTotal:Int64!
    "待确认的任务数量"
    waitConfirmedTotal:Int64!
    "概览"
    list:[StatCommon!]
}

type StatCommon{
    "名称"
    name:String!
    "数量"
    count:Int64!
}


type IssueStatByObjectType{
    "对象类型id"
    projectObjectTypeId: Int64
    "对象类型名称"
    projectObjectTypeName: String
    "数量"
    total:Int64!
}
type IssueStatusTypeStatDetailResp{
    "未开始的统计"
    notStart:[IssueStatByObjectType]!
    "进行中的统计"
    processing:[IssueStatByObjectType]!
    "已完成的统计"
    completed:[IssueStatByObjectType]!
}

"添加任务评论请求结构体"
input CreateIssueCommentReq{
    "任务id"
    issueId: Int64!
    "评论信息"
    comment: String!
    "提及的用户id"
    mentionedUserIds: [Int64!]
    "评论添加附件的资源id"
    attachmentIds: [Int64!]
}

"任务添加关联任务"
input UpdateIssueAndIssueRelateReq{
    "任务id"
    issueId: Int64!
    "添加的关联任务id集合"
    addRelateIssueIds: [Int64!]
    "删除的关联任务id集合"
    delRelateIssueIds: [Int64!]
}

"任务分配排行请求结构体"
input IssueAssignRankReq{
    "项目Id"
    projectId: Int64!
    "rank数量， 1 <= rankTop <= 100， 默认为5"
    rankTop: Int
}

"任务分配信息"
type IssueAssignRankInfo{
    "姓名"
    name: String!
    "用户头像"
    avatar: String!
    "工号：企业下唯一"
    emplId: String!
    "分配的未完成的任务数量"
    incompleteissueCount: Int64!
}

type ExportIssueTemplateResp{
    "模板地址"
    url:String!
}

type issueListStatData{
    "对象类型id"
    projectObjectTypeId: Int64!
    "对象类型名称"
    projectObjectTypeName: String!
    "数量"
    total:Int64!
    "已完成数量"
    finishedCount:Int64!
    "逾期数量"
    overdueCount:Int64!
}

"转化为父任务请求结构体"
input ConvertIssueToParentReq{
    "要更新的任务id"
    id:Int64!
    "任务所属项目的 id，从该项目中移动任务。"
    fromProjectId: Int64
#    "要更新的projectObjectType"
#    projectObjectTypeId:Int64!
    "状态id"
    statusId:Int64
    "迭代id"
    iterationId:Int64
    "表id"
    tableId:String!
    "项目id"
    projectId:Int64!
}

input ChangeParentIssueReq{
    "任务id"
    issueId:Int64!
    "任务所属项目的 id，从该项目中移动任务。"
    fromProjectId: Int64
    "变更的父任务id"
    ParentId:Int64!
}

input BeforeAfterIssueListReq {
    "任务id"
    issueId:Int64!
}

input UrgeIssueReq {
    "任务id"
    issueId: Int64!
    "是否在任务群聊中 at 负责人"
    isNeedAtIssueOwner: Boolean!
    "催促内容。（可选）"
    urgeText: String
}

input AuditIssueReq {
    "任务id"
    issueId:Int64!
    "审核结果(3确认4驳回)"
    status:Int!
    "评论"
    comment:String
    "附件"
    attachments:[AttachmentSimpleInfo!]
}

input ViewAuditIssueReq {
    "任务id"
    issueId:Int64!
}

input WithdrawIssueReq {
    "任务id"
    issueId:Int64!
}

input UrgeAuditIssueReq {
    "任务id"
    issueId: Int64!
    "是否在任务群聊中 at 负责人"
    isNeedAtIssueOwner: Boolean
    "催促内容"
    urgeText: String!
}

input GetExportFieldsReq {
    "项目id"
    projectId: Int64
}

type GetExportFieldsResp {
    fields: [GetExportFieldsRespFieldsItem]
}

type GetExportFieldsRespFieldsItem {
    "字段id"
    fieldId: Int64!
    "字段名"
    name: String!
    "是否必须。true 表示必须。如果必须，则必须导出该字段。"
    isMust: Boolean!
    "定义类型。10原生字段，11用户自定义，12系统字段"
    defineType: Int!
}

input IssueInfoNotDeleteReq {
    "任务id"
    issueId:Int64!
}

type ThirdAccountBindListResp {
    "平台"
    sourceChannel:String!
    "姓名"
    name:String!
    "头像"
    avatar:String!
}
`, BuiltIn: false},
	{Name: "schema/issue_property.graphql", Input: `"问题性质结构体"
type IssueProperty{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"语言编号"
	langCode:String!
	"类型名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建问题性质请求结构体"
input CreateIssuePropertyReq{
	"组织id"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"语言编号"
	langCode:String!
	"类型名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新问题性质请求结构体"
input UpdateIssuePropertyReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"语言编号"
	langCode:String!
	"类型名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}
`, BuiltIn: false},
	{Name: "schema/issue_source.graphql", Input: `

"问题来源结构体"
type IssueSource{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}
`, BuiltIn: false},
	{Name: "schema/issue_tag.graphql", Input: `"获取任务标签列表请求结构体"
input IssueTagsReq{
    "任务id"
    issueId: Int64!
}


`, BuiltIn: false},
	{Name: "schema/issue_view.graphql", Input: `
input GetIssueViewListReq {
    "筛选：视图 id，支持多个 id"
    ids: [Int64!]
    "筛选：项目 id"
    projectId: Int64
    "筛选：视图名称。模糊查询"
    viewName: String
    "筛选：是否私有，true 私有，false 公开"
    isPrivate: Boolean
    "筛选：类型，1：表格视图，2：看板视图，3：照片视图"
    type: Int
    "所属任务类型 id：需求、任务、缺陷的 id 值"
    projectObjectTypeId: Int64
    "排序类型。1创建时间顺序，2创建时间倒序，3更新时间顺序，4更新时间倒序。默认1。"
    sortType: Int
    "页码"
    page: Int
    "页大小"
    size: Int
}

type getIssueViewListResp {
    "总数量"
    total: Int64!
    "查询到的视图列表"
    list: [GetIssueViewListItem!]!
}

type GetIssueViewListItem {
    "主键id"
    id: Int64!
    "项目 id"
    projectId: Int64!
    "视图配置"
    config: String!
    "视图备注"
    remark: String!
    "是否私有"
    isPrivate: Boolean!
    "视图名称"
    viewName: String!
    "类型，1：表格视图，2：看板视图，3：照片视图"
    type: Int!
    "视图排序"
    sort: Int64!
    "所属任务类型 id：需求、任务、缺陷的 id 值"
    projectObjectTypeId: Int64!
}

input UpdateIssueViewReq {
    "主键id，根据主键更新"
    id: Int64!
    "更新值：视图配置"
    config: String
    "更新值：视图备注"
    remark: String
    "更新值：是否私有，true 私有，false 公开"
    isPrivate: Boolean
    "更新值：视图名称"
    viewName: String
    "更新值：类型，1：表格视图，2：看板视图，3：照片视图"
    type: Int
    "视图排序"
    sort: Int64
    "所属任务类型 id：需求、任务、缺陷的 id 值"
    projectObjectTypeId: Int64
}
`, BuiltIn: false},
	{Name: "schema/issue_work_hours.graphql", Input: `"创建工时记录接口请求体"
input CreateIssueWorkHoursReq {
    "项目id"
    projectId: Int64
    "关联的任务id"
    issueId: Int64!
    "枚举记录类型：1预估工时记录（总预估工时），2实际工时记录，3详细预估工时（子预估工时）"
    type: Int64!
    "工作者id"
    workerId: Int64!
    "所需工时时间，单位：小时"
    needTime: String!
    "开始时间，时间戳"
    startTime: Int64!
    "工时记录的结束时间，时间戳"
    endTime: Int64
    "工时记录的内容，工作内容"
    desc: String
}

"新增多个预估工时"
input CreateMultiIssueWorkHoursReq {
    "关联的任务id"
    issueId: Int64!
    "总预估工时"
    totalIssueWorkHourRecord: NewPredicateWorkHour!
    "子预估工时列表"
    predictWorkHourList: [NewPredicateWorkHour!]
}

"新增详细版的预估工时"
input NewPredicateWorkHour {
    "工作者id"
    workerId: Int64!
    "预估所需工时时间，单位分钟"
    needTime: String!
    "开始时间，时间戳"
    startTime: Int64!
    "工时记录的结束时间，时间戳"
    endTime: Int64
}

"查询任务的工时信息接口参数"
input GetIssueWorkHoursInfoReq {
    "关联的任务id"
    issueId: Int64!
}

"查询任务的工时信息接口返回值"
type GetIssueWorkHoursInfoResp {
    "总预估工时。issue 一旦有工时记录，则一定会有一个总预估工时记录。"
    simplePredictWorkHour: OneWorkHourRecord!
    "预估工时列表"
    predictWorkHourList: [OneWorkHourRecord]
    "实际工时列表"
    actualWorkHourList: [OneActualWorkHourRecord]
    "实际总工时时间。单位：小时。"
    actualNeedTimeTotal: String!
}

"查询返回：一条预估工时记录的信息"
type OneWorkHourRecord {
    "工时记录主键"
    id: Int64!
    "记录类型：1预估工时记录，2实际工时记录，3子预估工时"
    type: Int64!
    "工时记录的工作者、执行者"
    worker: WorkHourWorker!
    "所需工时时间，单位：小时"
    needTime: String!
    "开始时间，时间戳"
    startTime: Int64!
    "工时记录的结束时间，秒级时间戳。"
    endTime: Int64!
    "工时记录的内容，工作内容"
    desc: String!
    "是否允许当前用户修改。1：可以修改；0：不允许修改。"
    isEnable: Int!
}

"查询返回：一条实际工时记录的信息"
type OneActualWorkHourRecord {
    "工时记录主键"
    id: Int64!
    "记录类型：1预估工时记录，2实际工时记录，3子预估工时"
    type: Int64!
    "工时记录的工作者、执行者"
    worker: WorkHourWorker!
    "所需工时时间，单位：小时"
    needTime: String!
    "开始时间，时间戳"
    startTime: Int64!
    "工时记录的结束时间，秒级时间戳。"
    endTime: Int64!
    "创建者名称"
    creatorName: String!
    "创建时间"
    createTime: Int64!
    "工时记录的内容，工作内容"
    desc: String!
    "是否允许当前用户修改。1：可以修改；0：不允许修改。"
    isEnable: Int!
}

"工时记录的工作者、执行者"
type WorkHourWorker {
    "执行人的id"
    userId: Int64!
    "执行人的名字"
    name: String!
    "执行人的头像"
    avatar: String!
}

	"编辑工时记录接口请求体"
input UpdateIssueWorkHoursReq {
    "工时记录id"
    issueWorkHoursId: Int64!
    "所需工时时间，单位：小时"
    needTime: String!
    "工时执行者id"
    workerId: Int64!
    "预留，剩余工时计算方式：1动态计算；2手动填写。没有则传 1"
    remainTimeCalType: Int64!
    "预留，手动填写的剩余工时的值。没有则传 0"
    remainTime: Int64!
    "工时的开始时间，**秒**级时间戳，没有则传 0"
    startTime: Int64!
    "工时的截止时间，**秒**级时间戳，没有则传 0"
    endTime: Int64!
    "工时记录的内容，工作内容"
    desc: String
}

"编辑：编辑详细预估工时"
input UpdateMultiIssueWorkHoursReq {
    "关联的任务id"
    issueId: Int64!
    "总预估工时记录"
    totalIssueWorkHourRecord: UpdateOneMultiWorkHourRecord!
    "子预估工时列表"
    issueWorkHourRecords: [UpdateOneMultiWorkHourRecord]
}

"编辑：详细预估工时中的某个单独工时"
input UpdateOneMultiWorkHourRecord {
    "工时记录主键"
    id: Int64!
    "记录类型：1预估工时记录，2实际工时记录，3子预估工时"
    type: Int64!
    "工时记录的工作者、执行者id"
    workerId: Int64!
    "所需工时时间，单位：小时"
    needTime: String!
    "开始时间，秒级时间戳。"
    startTime: Int64!
    "截止时间，秒级时间戳。"
    endTime: Int64!
    "工时记录的内容，工作内容"
    desc: String
}

"删除工时记录接口请求体"
input DeleteIssueWorkHoursReq {
    "工时记录id"
    issueWorkHoursId: Int64!
}

"一条工时记录信息"
type IssueWorkHours {
    "工时记录主键"
    id: Int64!
    "记录类型：1预估工时记录，2实际工时记录，3子预估工时"
    type: Int64!
    "工作者id"
    workerId: Int64!
    "所需工时时间，单位：小时"
    needTime: String!
    "开始时间，秒级时间戳。"
    startTime: Int64!
    "工时记录的结束时间，秒级时间戳。"
    endTime: Int64
    "工时记录的内容，工作内容"
    desc: String
}

"工时统计查询请求参数"
input GetWorkHourStatisticReq {
    "项目id，查询项目下的工时统计。可选"
    projectIds: [Int64]
    "任务 id，查询任务下的工时统计。可选"
    issueIds: [Int64]
    "可多选。任务状态,1:未完成，2：已完成，3：未开始，4：进行中，5: 已逾期"
    issueStatus: [Int]
    "优先级id，可多选"
    issuePriorities: [Int64]
    "执行者，工时执行人id。可选"
    workerIds: [Int64]
    "查询的开始时间。秒级时间戳。可选"
    startTime: Int64
    "查询的截止时间。秒级时间戳。可选"
    endTime: Int64
    "是否显示已离职人员。1显示，2不显示。默认不显示。"
    showResigned: Int
    "页码"
    page: Int64
    "每页条数"
    size: Int64
}

"工时统计查询返回参数"
type GetWorkHourStatisticResp {
    "多个成员在一段日期内的工时信息列表"
    groupStatisticList: [OnePersonWorkHourStatisticInfo]!
    "数据总数"
    total: Int64!
    "汇总的数据"
    summary: GetWorkHourStatisticSummary!
}

type GetWorkHourStatisticSummary {
    "筛选条件下的预估工时的总和"
    predictTotal: String!
    "筛选条件下的实际工时的总和"
    actualTotal: String!
}

"一个员工的在若干个日期内的工时统计信息"
type OnePersonWorkHourStatisticInfo {
    "员工id"
    workerId: Int64!
    "员工姓名"
    name: String!
    "预估总工时，单位：小时"
    predictHourTotal: String!
    "实际总工时，单位：小时"
    actualHourTotal: String!
    "在一些日期内的实际工时信息"
    dateWorkHourList: [OneDateWorkHour!]
}

"一个员工在某一日期的实际工时信息"
type OneDateWorkHour {
    "工时日期"
    date: String!
    "星期几。特殊的是：0表示星期天"
    weekDay: Int64!
    "工时时间，单位：小时"
    time: String!
}

"查询员工是否是任务成员请求参数"
input CheckIsIssueMemberReq {
    "查询的任务id"
    issueId: Int64!
    "查询该用户是否是任务的成员。成员包括：参与人、负责人"
    userId: Int64!
}

"将用户变成任务成员请求参数"
input SetUserJoinIssueReq {
    "查询的任务id"
    issueId: Int64!
    "查询该用户是否是任务的成员。成员包括：参与人、负责人"
    userId: Int64!
}

"检查项目的工时是否开启接口参数"
input CheckIsEnableWorkHourReq {
    "项目id"
    projectId: Int64!
}

"检查项目的工时是否开启接口返回"
type CheckIsEnableWorkHourResp {
    "该项目是否开启工时功能"
    isEnable: Boolean!
}

"任务面板页展示的工时信息"
type HomeIssueWorkHourInfo {
    "任务的预估工时，单位：小时。"
    predictWorkHour: String!
    "任务的实际工时，单位：小时。"
    actualWorkHour: String!
    "预估工时详情列表"
    predictList: [PredictListItem!]
    "实际工时详情列表"
    actualList: [ActualListItem!]
}

"预估工时详情列表单个对象"
type PredictListItem {
    "工时执行人名字"
    name: String!
    "工时，单位：小时。"
    workHour: String!
}

"实际工时详情列表单个对象"
type ActualListItem {
    "工时执行人名字"
    name: String!
    "一个日期内的工时信息"
    actualWorkHourDateList: [ActualWorkHourDateItem!]
}

type ActualWorkHourDateItem {
    "实际工时的日期，开始日期。"
    date: String!
    "工时，单位：小时。"
    workHour: String!
}

"工时统计的导出接口请求返回"
type ExportWorkHourStatisticResp {
    "导出文件的下载地址。"
    url: String!
}
`, BuiltIn: false},
	{Name: "schema/iteration.graphql", Input: `"迭代列表请求结构体"
input IterationListReq{
	"项目id"
	projectId: Int64
	"名称，模糊搜索"
	name: String
	"状态,1:未开始，2：进行中，3：已完成"
	statusType: Int
	"排序（1创建时间正序2创建时间倒序3sort正序4sort倒序,默认4）"
	orderBy:Int
}

"迭代结构体"
type Iteration{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"名称"
	name:String!
	"负责人"
	owner:Int64!
	"排序"
	sort:Int64!
	"版本"
	versionId:Int64!
	"计划开始时间"
	planStartTime:Time!
	"计划结束时间"
	planEndTime:Time!
	"预估工时"
	planWorkHour:Int!
	"故事点"
	storyPoint:Int!
	"描述"
	remark:String
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"负责人信息"
	ownerInfo: HomeIssueOwnerInfo!
	"状态信息"
	statusInfo: HomeIssueStatusInfo!
	"总任务数量"
	allIssueCount:Int64!
	"已完成任务数量"
	finishedIssueCount:Int64!
}

"创建迭代请求结构体"
input CreateIterationReq{
	"项目id"
	projectId:Int64!
	"名称"
	name:String!
	"负责人"
	owner:Int64!
	"计划开始时间"
	planStartTime:Time!
	"计划结束时间"
	planEndTime:Time!
}

"更新迭代请求结构体"
input UpdateIterationReq{
	"主键"
	id:Int64!
	"名称"
	name:String
	"负责人"
	owner:Int64
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"变动的字段列表"
	updateFields:[String!]
}

"删除迭代结构体"
input DeleteIterationReq{
	"主键"
	id:Int64!
}

"迭代列表响应结构体"
type IterationList{
	"总数量"
    total:Int64!
	"迭代列表"
    list:[Iteration!]
}

"迭代状态类型统计请求结构体"
input IterationStatusTypeStatReq{
	"项目id"
	projectId: Int64
}


"更新迭代状态请求结构体"
input UpdateIterationStatusReq{
	"迭代id"
	id:Int64!
	"要更新的状态id"
	nextStatusId:Int64!
	"上个状态的实际结束时间"
	beforeStatusEndTime:Time!
	"下个状态的实际开始时间"
	nextStatusStartTime:Time!
}

"迭代信息请求结构体"
input IterationInfoReq{
	"迭代id"
	id: Int64!
}

"迭代信息响应结构体"
type IterationInfoResp{
	"迭代信息"
	iteration: Iteration!
	"项目信息"
	project: HomeIssueProjectInfo!
	"状态信息"
	status: HomeIssueStatusInfo!
	"负责人信息"
	owner: UserIdInfo!
	"下一步骤状态列表"
	nextStatus: [HomeIssueStatusInfo!]
	"迭代的状态列表"
	iterStatusList: [HomeIssueStatusInfo!]!
	"状态时间信息"
	statusTimeInfo:[StatusTimeInfo!]
}

type StatusTimeInfo{
	statusId:Int64!
	statusName:String!
	statusType:Int!
	planStartTime:Time!
	planEndTime:Time!
	startTime:Time!
	endTime:Time!
}

input StatusTimeInfoReq{
	statusId:Int64!
	planStartTime:Time
	planEndTime:Time
	startTime:Time
	endTime:Time
}

input UpdateIterationSortReq {
	"迭代id"
	iterationId:Int64!
	"移动位置的前一个迭代id,移到最前面传0"
	beforeId:Int64!
	"后一个迭代，分页导致找不到前一个目标迭代"
	afterId:Int64
}

input UpdateIterationStatusTimeReq{
	iterationId:Int64!
	statusUpdate:[StatusTimeInfoReq!]!
}`, BuiltIn: false},
	{Name: "schema/iteration_stat.graphql", Input: `"迭代统计查询请求"
input IterationStatReq{
	"迭代id"
	iterationId: Int64!
	"开始时间"
	startDate: Time
	"结束时间"
	endDate: Time
}

"迭代统计结构体"
type IterationStat{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"迭代id"
	iterationId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已逾期问题数"
	issueOverdueCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已逾期需求数"
	demandOverdueCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已逾期故事点数"
	storyPointOverdueCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已逾期任务数"
	taskOverdueCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已逾期缺陷数"
	bugOverdueCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已逾期测试任务数"
	testtaskOverdueCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
}

"创建迭代统计请求结构体"
input CreateIterationStatReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"迭代id"
	iterationId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新迭代统计请求结构体"
input UpdateIterationStatReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"迭代id"
	iterationId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除迭代统计请求结构体"
input DeleteIterationStatReq{
	"主键"
	id:Int64!
}

"迭代统计列表响应结构体"
type IterationStatList{
    total:Int64!
    list:[IterationStat!]
}
`, BuiltIn: false},
	{Name: "schema/notice.graphql", Input: `"结构体"
type Notice{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"通知类型, 1项目通知,2组织通知,"
	type:Int!
	"操作类型"
	relationType:String!
	"冗余信息"
	ext:String!
	"项目id"
	projectId:Int64!
	"issueId"
	issueId:Int64!
	"关联动态id"
	trendsId:Int64!
	"通知内容"
	content:String!
	"被通知人"
	noticer:Int64!
	"状态, 1未读,2已读"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"创建人信息"
	creatorInfo:UserIdInfo!
	"项目名称"
	projectName:String!
	"任务名称"
	issueName:String!
	"父任务id（没有则为0）"
	parentIssueId:Int64!
}

"阅读通知结构体"
input ReadNoticeReq{
	"主键"
	id:Int64!
}

"删除请求结构体"
input DeleteNoticeReq{
	"主键"
	id:Int64!
}

"获取MQTT通道key请求结构体"
input GetMQTTChannelKeyReq{
	"通道类型：1、项目（任务，标签，工作栏），2、组织（成员）"
	channelType: Int!
	"通道类型为1时必传"
	projectId: Int64
	"通道类型为4时必传"
	appId: Int64
}

"获取MQTT通道key响应结构体"
type GetMQTTChannelKeyResp{
	"连接地址"
	address: String!
	"host"
	host: String!
	"port"
	port: Int
	"通道"
	channel: String!
	"通道key"
	key: String!
}`, BuiltIn: false},
	{Name: "schema/org.graphql", Input: `"创建组织请求结构体"
input CreateOrgReq{
    "组织名称"
    orgName: String!
    "补全个人姓名"
    creatorName: String
    "是否要导入示例数据, 1：导入，2：不导入，默认不导入"
    importSampleData: Int
    "来源平台"
    sourcePlatform:String
    "来源渠道"
    sourceChannel:String
    "所属行业"
    industryId:Int64
    "组织规模"
    scale:String
    "codeToken如果是绑定飞书团队就传入"
    codeToken: String
}

"用户组织列表响应结构体"
type UserOrganization{
    "组织id"
    id:Int64!
    "组织名称"
    name: String!
    "组织code"
    code: String!
    "组织网站"
    webSite: String!
    "所属行业"
    industryId:Int64!
    "组织规模"
    scale:String!
    "来源平台"
    sourcePlatform:String!
    "来源渠道"
    sourceChannel:String!
    "所在国家"
    countryId:Int64!
    "所在省份"
    provinceId:Int64!
    "所在城市"
    cityId:Int64!
    "组织地址"
    address:String!
    "组织logo地址"
    logoUrl:String!
    "组织标识"
    resorceId:Int64!
    "组织所有人,创建时默认为创建人"
    owner:Int64!
    "企业是否认证"
    IsAuthenticated:Int!
    "是否为企业管理员"
    isAdmin: Boolean!
    "描述"
    remark:String!
    "是否展示"
    isShow:Int!
    "是否删除,1是,2否"
    isDelete:Int
    "对于该用户组织是否可用（1是2否）"
    OrgIsEnabled:Int
    "组织可用功能"
    functions:[String!]!
}

type UserOrganizationListResp{
    "用户组织列表"
    list:[UserOrganization!]
}


input SwitchUserOrganizationReq{
    "组织id"
    orgId:Int64!
}

"组织设置入参"
input UpdateOrganizationSettingsReq{
    "组织id"
    orgId:Int64!
    "组织名称"
    orgName: String!
    "组织code"
    code: String
    "所属行业"
    industryId:Int64
    "组织规模"
    scale:String
    "所在国家"
    countryId:Int64
    "所在省份"
    provinceId:Int64
    "所在城市"
    cityId:Int64
    "组织地址"
    address:String
    "组织logo地址"
    logoUrl:String
    "组织负责人"
    owner:Int64
    "变动的字段列表"
    updateFields:[String!]!
}


input OrganizationInfoReq{
    "组织id"
    orgId:Int64!
}

"组织设置入参"
type OrganizationInfoResp{
    "组织id"
    orgId:Int64!
    "组织名称"
    orgName: String!
    "code"
    code:String!
    "组织网站"
    webSite: String!
    "所属行业"
    industryId:Int64!
    "所属行业中文名"
    industryName:String!
    "组织规模"
    scale:String!
    "所在国家"
    countryId:Int64!
    "所在国家中文名"
    countryCname:String!
    "所在省份"
    provinceId:Int64!
    "所在省份中文名"
    provinceCname:String!
    "所在城市"
    cityId:Int64!
    "所在城市中文名"
    cityCname:String!
    "组织地址"
    address:String!
    "组织logo地址"
    logoUrl:String!
    "组织负责人"
    owner:Int64!
    "负责人信息"
    ownerInfo:UserIdInfo!
    "备注"
    remark: String!
    "第三方企业编号"
    thirdCode:String!
}

"修改组织成员状态请求结构体"
input UpdateOrgMemberStatusReq{
    "要修改的组织成员列表"
    memberIds: [Int64!]!
    "状态,  1可用,2禁用"
    status: Int!
}

"修改组织成员审核状态请求结构体"
input UpdateOrgMemberCheckStatusReq{
    "要修改的组织成员列表"
    memberIds: [Int64!]!
    "审核状态, 1待审核,2审核通过,3审核不过"
    checkStatus: Int!
}

type GetAppTicketResp {
    appId:String!
    appSecret:String!
}

input JoinOrgByInviteCodeReq {
    inviteCode:String!
}

type CheckTokenValidityResp {
    id:Int64!
    orgId:Int64!
}

type GetJsApiTicketResp {
    ticket:String!
}`, BuiltIn: false},
	{Name: "schema/org_config.graphql", Input: `"组织配置响应结构体"
type OrgConfig{
    "id"
    id:Int64!
    "组织id"
    orgId: Int64!
    "付费级别1通用免费，2标准版"
    payLevel:Int!
    "付费开始时间"
    payStartTime:Time!
    "付费结束时间"
    payEndTime:Time!
    "付费级别实际（1免费2标准3试用）"
    payLevelTrue:Int!
    "创建时间"
    createTime:Time!
    "组织人数"
    orgMemberNumber:Int64!
    "是否是灰度企业"
    isGrayLevel:Boolean!
    "汇总表id"
    summaryAppId:String!
    "展示基础设置"
    basicShowSetting:BasicShowSetting!
    "企业自定义logo"
    logo:String!
}

"展示基础设置"
type BasicShowSetting{
    "工作台"
    workBenchShow:Boolean!
    "侧边栏"
    sideBarShow:Boolean!
    "镜像统计"
    mirrorStat:Boolean!
}
`, BuiltIn: false},
	{Name: "schema/oss.graphql", Input: `
"Oss Post Policy策略请求结构体"
input OssPostPolicyReq{
    "策略类型, 1: 项目封面，2：任务资源（需要callback）, 3：导入任务的excel， 4：项目文件（需要callback），5：兼容测试， 6:用户头像，9: 无码附件, 11：excel导入成员"
    policyType: Int!
    "如果policyType为1/2/3/4/9，那么appId必传(创建场景传0)"
    appId: String
    "如果policyType为1/2/3/4/9，那么projectId必传(创建场景传0)"
    projectId: Int64
    "如果policyType为2/9，那么issueId必传"
    issueId: Int64
    "目录id, policy为4的时候必填"
    folderId: Int64
    "如果policyType为2/9，那么columnId必传"
    columnId: String
    "如果policyType为2/9，那么tableId必传"
    tableId: String
}

"Oss Post Policy策略响应结构体"
type OssPostPolicyResp{
    "policy"
    policy: String!
    "签名"
    signature: String!
    "文件上传目录"
    dir: String!
    "有效期"
    expire: String!
    "access Id"
    accessId: String!
    "Host"
    host: String!
    "Region"
    region: String!
    "bucket名称"
    bucket: String!
    "文件名"
    fileName: String!
    "文件最大限制"
    maxFileSize: Int64!
    "callback回调，为空说明不需要回调"
    callback: String!
}`, BuiltIn: false},
	{Name: "schema/permission.graphql", Input: `"结构体"
type Permission{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号,仅支持大写英文字母"
	code:String!
	"名称"
	name:String!
	"父id"
	parentId:Int64!
	"权限项类型,1系统,2组织,3项目"
	type:Int!
	"权限路径"
	path:String!
	"是否显示,1是,2否"
	isShow:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建请求结构体"
input CreatePermissionReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号,仅支持大写英文字母"
	code:String!
	"名称"
	name:String!
	"父id"
	parentId:Int64!
	"权限项类型,1系统,2组织,3项目"
	type:Int!
	"权限路径"
	path:String!
	"是否显示,1是,2否"
	isShow:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新请求结构体"
input UpdatePermissionReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号,仅支持大写英文字母"
	code:String!
	"名称"
	name:String!
	"父id"
	parentId:Int64!
	"权限项类型,1系统,2组织,3项目"
	type:Int!
	"权限路径"
	path:String!
	"是否显示,1是,2否"
	isShow:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除请求结构体"
input DeletePermissionReq{
	"主键"
	id:Int64!
}

"列表响应结构体"
type PermissionList{
    total:Int64!
    list:[Permission!]
}

type PermissionOperationListResp{
	"权限项信息"
	permissionInfo:Permission!
	"权限操作项信息"
	operationList:[PermissionOperation!]
	"角色拥有的操作项权限id"
	permissionHave:[Int64!]
}
type GetPersonalPermissionInfoResp{
	Data:Map!
}`, BuiltIn: false},
	{Name: "schema/permission_operation.graphql", Input: `"结构体"
type PermissionOperation{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"权限项id"
	permissionId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"操作编号,多个半角逗号分隔"
	operationCodes:String!
	"描述"
	remark:String!
	"是否显示,1是,2否"
	isShow:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建请求结构体"
input CreatePermissionOperationReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"权限项id"
	permissionId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"操作编号,多个半角逗号分隔"
	operationCodes:String!
	"描述"
	remark:String!
	"是否显示,1是,2否"
	isShow:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新请求结构体"
input UpdatePermissionOperationReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"权限项id"
	permissionId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"操作编号,多个半角逗号分隔"
	operationCodes:String!
	"描述"
	remark:String!
	"是否显示,1是,2否"
	isShow:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除请求结构体"
input DeletePermissionOperationReq{
	"主键"
	id:Int64!
}

input EveryPermission{
	"权限组id"
	permissionId:Int64!
	"修改后的操作项id"
	operationIds:[Int64!]
}
`, BuiltIn: false},
	{Name: "schema/priority.graphql", Input: `"优先级结构体"
type Priority{
	"主键"
	id:Int64!
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"类型,1项目优先级,2:需求/任务等优先级"
	type:Int!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"是否默认,1是,2否"
	isDefault:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"优先级列表响应结构体"
type PriorityList{
	total:Int64!
	list:[Priority!]
}`, BuiltIn: false},
	{Name: "schema/project.graphql", Input: `type Project{
	"主键"
	id:Int64!
	"项目对应的应用 id（无码系统）"
	appId: String!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"编号"
	code:String!
	"名称"
	name:String!
	"前缀编号"
	preCode:String!
	"项目负责人"
	owner:Int64!
	"项目类型"
	projectTypeId:Int64!
	"项目优先级"
	priorityId:Int64!
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"项目公开性,1公开,2私有"
	publicStatus:Int!
	"项目标识"
	resourceId:Int64!
	"是否归档,1归档,2未归档"
	isFiling:Int!
	"描述"
	remark:String!
	"项目状态,从状态表取"
	status:Int64!
	"状态类型,1未开始,2进行中,3已完成"
	statusType:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
	"创建人信息"
	creatorInfo:UserIdInfo
	"负责人信息"
	ownerInfo:UserIdInfo
	"负责人信息集合"
	ownersInfo:[UserIdInfo]
	"成员信息"
	memberInfo:[UserIdInfo]
	"关注人信息"
	followerInfo:[UserIdInfo]
    "封面地址"
    resourcePath:String!
	"封面缩略图"
	resourceCompressedPath:String!
    "所有任务数量"
    allIssues:Int64!
    "已完成任务数量"
    finishIssues:Int64!
    "逾期任务数量"
    overdueIssues:Int64!
	"最近一次迭代数据"
	iterationStat:IterationStatSimple
	"流程状态"
	allStatus: [HomeIssueStatusInfo!]
	"项目类型名称"
	projectTypeName: String!
	"项目类型LangCode，ProjectType.NormalTask  普通任务项目, ProjectType.Agile  敏捷研发项目"
	projectTypeLangCode: String!
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int!
	"是否收藏关注(1是0否)"
	isStar:Int!
	"与我相关的未完成的"
	relateUnfinish:Int64!
	"icon"
	icon:String!
}

type DepartmentSimpleInfo {
    "部门id"
    id:Int64!
    "部门名称"
    name:String!
    "部门总人数"
    userCount:Int64!
}

type IterationStatSimple {
	id:Int64!
	name:String!
	allIssues:Int64!
	overdueIssues:Int64!
	finishIssues:Int64!
}

"项目信息请求结构体"
input ProjectInfoReq{
	"项目id"
	projectId: Int64!
}

"项目信息结构体"
type ProjectInfo{
	"主键"
	id:Int64!
	"项目对应的应用 id（无码系统）"
	appId:String!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"编号"
	code:String!
	"名称"
	name:String!
	"前缀编号"
	preCode:String!
	"项目负责人"
	owner:Int64!
	"项目类型"
	projectTypeId:Int64!
	"项目优先级"
	priorityId:Int64!
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"项目公开性,1公开,2私有"
	publicStatus:Int!
	"项目标识"
	resourceId:Int64!
	"是否归档,1归档,2未归档"
	isFiling:Int!
	"描述"
	remark:String!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"创建人信息"
	creatorInfo:UserIdInfo
	"负责人信息"
	ownerInfo:UserIdInfo
	"负责人信息集合"
	ownersInfo:[UserIdInfo]
	"成员信息"
	memberInfo:[UserIdInfo]
	"成员部门信息"
	memberDepartmentInfo:[DepartmentSimpleInfo]
	"关注人信息"
	followerInfo:[UserIdInfo]
	"封面地址"
	resourcePath:String!
	"所有状态"
	allStatus:[HomeIssueStatusInfo!]
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int!
	"针对哪些群体用户，同步到其飞书日历(4：负责人，8：关注人。往后扩展是基于二进制的位值)"
	syncCalendarStatusList: [Int]
	"是否创建群聊（针对于飞书1是2否默认是）"
	isCreateFsChat:Int!
	"是否收藏关注(1是0否)"
	isStar:Int!
	"项目开启隐私模式的状态值：1 开启；2关闭"
	privacyStatus: Int!
	"icon"
	icon:String!
	"parentId"
	parentId:String!
}

type RelationType{
    "用户id"
    userId:Int64
    "类型id"
    relationType:Int
    "项目id"
    projectId:Int64
    "外部组织用户id"
    outOrgUserId:String
    "外部用户id"
    outUserId:String
    "姓名"
    name:String
    "头像"
    avatar:String
}

input CreateProjectReq{
    "编号"
	code:String
	"名称"
	name:String!
	"前缀编号"
	preCode:String
	"负责人id"
	owner:Int64!
	"负责人id集合"
	ownerIds:[Int64!]
	"项目类型"
	projectTypeId:Int64
	"优先级"
	priorityId:Int64
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"项目公开性,1公开,2私有"
	publicStatus:Int!
	"资源id"
	resourceId:Int64
	"是否归档,1归档,2未归档"
	isFiling:Int
	"描述"
	remark:String
	"项目状态"
	status:Int64
	"创建时间"
	createTime:Time
	"更新人"
	updator:Int64
	"更新时间"
	updateTime:Time
	"资源路径"
	resourcePath:String!
	"资源类型1本地2oss3钉盘"
	resourceType:Int!
	"用户成员id"
	memberIds:[Int64!]
	"用户成员部门id"
	memberForDepartmentId:[Int64!]
	"是否全选（针对于项目成员）"
	isAllMember:Boolean
	"关注人id"
	followerIds:[Int64!]
	"是否同步到飞书日历(4：负责人，8：关注人，12：关注人+负责人。为了兼容旧版，1包含了关注人和负责人；2表示都不包含。)"
	isSyncOutCalendar:Int
	"针对哪些群体用户，同步到其飞书日历(4：负责人，8：关注人。往后扩展是基于二进制的位值)"
    syncCalendarStatusList: [Int]
	"是否创建群聊（针对于飞书1是2否默认是）"
	isCreateFsChat:Int
	"无码文件夹id"
	parentId:Int64
	"隐私模式状态。1开启；2不开启；默认2。"
    privacyStatus: Int
	"是否是新手指南(内部调用使用)"
	isFirst:Boolean
}

input UpdateProjectReq{
    "项目id"
    id:Int64!
    "编号"
    code:String
    "名称"
    name:String
    "前缀编号"
    preCode:String
    "负责人id"
    owner:Int64
	"负责人id集合"
	ownerIds:[Int64!]
    "优先级"
    priorityId:Int64
    "计划开始时间"
    planStartTime:Time
    "计划结束时间"
    planEndTime:Time
    "项目公开性,1公开,2私有"
    publicStatus:Int
    "资源id"
    resourceId:Int64
    "描述"
    remark:String
    "项目状态"
    status:Int64
    "资源路径"
    resourcePath:String
    "资源类型1本地2oss3钉盘"
    resourceType:Int
    "用户成员id"
    memberIds:[Int64!]
	"用户成员部门id"
	memberForDepartmentId:[Int64!]
	"是否全选（针对于项目成员）"
	isAllMember:Boolean
	"关注人id"
	followerIds:[Int64!]
	"针对哪些群体用户，同步到其飞书日历(4：同步给负责人，8：同步给关注人。16:同步到订阅日历。往后扩展是基于二进制的位值)。该值是所有状态的算术总和。"
	isSyncOutCalendar:Int
    "变动的字段列表"
    updateFields:[String!]!
    "针对哪些群体用户，同步到其飞书日历(4：同步给负责人，8：同步给关注人。16:同步到订阅日历。往后扩展是基于二进制的位值)"
    syncCalendarStatusList: [Int]
	"是否创建群聊（针对于飞书1是2否默认是）"
	isCreateFsChat:Int
	"隐私模式状态。1开启；2不开启；默认2。"
	privacyStatus: Int
}

input DeleteProjectReq{
    "项目id"
	id:Int64!
}

type ProjectList{
    "项目数量"
    total:Int64!
    "项目列表"
    list:[Project!]
}

input ConvertCodeReq{
    "项目名"
	name: String!
}

input UpdateProjectStatusReq{
	"项目id"
	projectId: Int64!
	"下一个状态"
	nextStatusId: Int64!
}

input ProjectsReq{
	"主键"
	id:Int64
	"名称"
	name:String
	"项目负责人"
	owner:Int64
	"项目类型"
	projectTypeId:Int64
	"项目优先级"
	priorityId:Int64
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"是否归档,1归档,2未归档,3全部（不传默认查未归档）"
	isFiling:Int
	"项目状态,从状态表取"
	status:Int64
	"项目状态，通用（1未开始2进行中3已完成4未完成）"
	statusType:Int
	"创建人集合"
	creatorIds:[Int64!]
	"负责人集合"
	ownerIds:[Int64!]
	"关联类型(0所有1我发起的2我负责的3我参与的4我负责的和我参与的5我关注的)"
	relateType:Int64
	"参与人"
	participants:[Int64!]
	"参与部门"
	participantDeptIds:[Int64!]
	"关注人"
	followers:[Int64!]
	"与我相关即我是成员（1是2否）"
	isMember:Int
	"项目id集合"
	projectIds:[Int64!]
}

type projectUser{
    "创建人"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "用户信息"
    userInfo:PersonalInfo
    "创建人信息（添加人）"
    creatorInfo:PersonalInfo
    "用户角色"
    userRole:UserRoleInfo
    "类型（1用户2部门）"
    type:Int!
    "部门信息"
    departmentInfo:DepartmentSimpleInfo
}

type PayLimitNumResp{
	"项目数量"
	projectNum:Int64!
	"任务数量"
	issueNum:Int64!
	"文件大小"
	fileSize:Int64!
}

type ProjectMemberIdListResp {
    "部门id"
    departmentIds:[Int64!]!
    "人员id"
    userIds:[Int64!]!
}

input ProjectMemberIdListReq {
	"项目id"
	projectId: Int64!
	"返回的项目成员id，知否需要包含额外的管理员 id。可选，1表示需要 0不需要。默认0。"
	includeAdmin: Int
}
`, BuiltIn: false},
	{Name: "schema/project_day_stat.graphql", Input: `"迭代统计查询请求"
input ProjectDayStatReq{
	"迭代id"
	projectId: Int64!
	"开始时间"
	startDate: Time
	"结束时间"
	endDate: Time
}

"项目日统计结构体"
type ProjectDayStat{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已逾期问题数"
	issueOverdueCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已逾期需求数"
	demandOverdueCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已逾期故事点数"
	storyPointOverdueCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已逾期任务数"
	taskOverdueCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已逾期缺陷数"
	bugOverdueCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已逾期测试任务数"
	testtaskOverdueCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建项目日统计请求结构体"
input CreateProjectDayStatReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新项目日统计请求结构体"
input UpdateProjectDayStatReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除项目日统计请求结构体"
input DeleteProjectDayStatReq{
	"主键"
	id:Int64!
}

"项目日统计列表响应结构体"
type ProjectDayStatList{
    total:Int64!
    list:[ProjectDayStat!]
}`, BuiltIn: false},
	{Name: "schema/project_detail.graphql", Input: `type ProjectDetail{
	"详情id"
	id:Int64!
	"组织id"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"公告"
	notice:String!
	"是否启用工时和故事点,1启用,2不启用"
	isEnableWorkHours:Int!
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int!
	creator:Int64!
	createTime:Time!
	updator:Int64!
	updateTime:Time!
}

input UpdateProjectDetailReq{
	"详情id"
	id:Int64!
	"项目id"
	projectId:Int64
	"公告"
	notice:String
	"是否启用工时和故事点,1启用,2不启用"
	isEnableWorkHours:Int
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int
}

input DeleteProjectDetailReq{
	id:Int64!
}

type ProjectDetailList{
    total:Int64!
    list:[ProjectDetail!]
}`, BuiltIn: false},
	{Name: "schema/project_type.graphql", Input: `
"结构体"
type ProjectType{
    "主键"
    id:Int64!
    "组织编号"
    orgId:Int64!
    "语言编号"
    langCode:String!
    "名称"
    name:String!
    "排序"
    sort:Int!
    "封面"
    cover:String!
    "默认流程编号"
    defaultProcessId:Int64!
    "是否只读,2否,1是"
    isReadonly:Int!
    "描述"
    remark:String!
    "状态,  1可用,2禁用"
    status:Int!
    "创建人"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
}

"列表响应结构体"
type ProjectTypeList{
    total:Int64!
    list:[ProjectType!]
}
`, BuiltIn: false},
	{Name: "schema/recycle_bin.graphql", Input: `input RecoverRecycleBinRecordReq{
    "回收站id"
    recycleId:Int64!
    "项目id"
    projectId:Int64!
    "对应资源的id"
    relationId:Int64!
    "类型1：任务2：标签3：文件夹4：文件5：附件"
    relationType:Int!
}

input RecycleBinListReq{
    "项目id"
    projectId:Int64!
    "类型1：任务2：标签3：文件夹4：文件5：附件 不传或0为全部"
    relationType:Int!
}

type RecycleBinList{
    total:Int64!
    list:[RecycleBin!]
}

type RecycleBin{
    "主键"
    id:Int64!
    "组织id"
    orgId:Int64!
    "项目id"
    projectId:Int64!
    "关联对象id"
    relationId:Int64!
    "类型1：任务2：标签3：文件夹4：文件5：附件"
    relationType: Int!
    "名称"
    name:String!
    "创建人"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
    "执行人信息"
    creatorInfo: UserIdInfo!
    "是否可操作"
    isCanDo:Boolean!
    "关联资源信息"
    resourceInfo:ResourceInfo
    "标签信息"
    tagInfo:Tag
}
`, BuiltIn: false},
	{Name: "schema/resource.graphql", Input: `"存放各类资源，其他业务表统一关联此表id结构体"
type Resource{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"host"
	host:String!
	"路径"
	path:String!
	"OfficeUrl"
	officeUrl:String!
	"缩略图路径"
	pathCompressed: String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件大小"
	size:Int64!
	"创建人姓名"
	creatorName: String!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"文件类型"
	fileType:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建存放各类资源，其他业务表统一关联此表id请求结构体"
input CreateResourceReq{
	"组织id"
	orgId:Int64!
	"路径"
	path:String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新存放各类资源，其他业务表统一关联此表id请求结构体"
input UpdateResourceReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"路径"
	path:String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"文件大小"
	size: Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除存放各类资源，其他业务表统一关联此表id请求结构体"
input DeleteResourceReq{
	"主键"
	id:Int64!
}

"存放各类资源，其他业务表统一关联此表id列表响应结构体"
type ResourceList{
    total:Int64!
    list:[Resource!]
}

input UpdateProjectResourceFolderReq{
    "当前文件夹id"
    currentFolderId:Int64!
    "目标文件夹id"
    targetFolderId:Int64!
    "文件id数组"
    resourceIds:[Int64!]!
    "项目id"
    projectId: Int64!
}

type UpdateProjectResourceFolderResp{
    "文件id数组"
    resourceIds:[Int64!]!
}

input UpdateProjectResourceNameReq{
    "文件id"
    resourceId:Int64!
    "项目id"
    projectId: Int64!

    "文件名"
    fileName: String
    "文件后缀"
    fileSuffix: String

    "修改项"
    updateFields:[String!]!
}

input UpdateProjectFileResourceReq{
    "文件id"
    resourceId:Int64!
    "项目id"
    appId: Int64!
	"问题 id"
	issueId: Int64!
    "文件名"
    fileName: String
    "文件后缀"
    fileSuffix: String
	"文件大小"
	fileSize: Int64
    "修改项"
    updateFields:[String!]!
}

input DeleteProjectResourceReq{
    "文件id数组"
    resourceIds:[Int64!]!
    "文件夹id,只支持相同目录下的批量文件删除"
    folderId:Int64!
    "项目id"
    projectId:Int64!
}

type DeleteProjectResourceResp{
    "文件id数组"
    resourceIds:[Int64!]!
}

input ProjectResourceReq {
    "文件夹id"
    folderId:Int64!
    "项目id"
    projectId:Int64!
}
`, BuiltIn: false},
	{Name: "schema/role.graphql", Input: `"结构体"
type Role{
    "主键"
    id:Int64!
    "组织id,全局为0"
    orgId:Int64!
    "语言编号"
    langCode:String!
    "名称"
    name:String!
    "描述"
    remark:String!
    "是否只读 1只读 2可编辑"
    isReadonly:Int!
    "是否可以变更权限,1可以,2不可以"
    isModifyPermission:Int!
    "是否默认角色,1是,2否"
    isDefault:Int!
    "角色分组"
    roleGroupId:Int64!
    "状态,  1可用,2禁用"
    status:Int!
    "创建人"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
}
`, BuiltIn: false},
	{Name: "schema/schema.graphql", Input: `type Query {
    ############### business
    "获取的当前用户的信息"
    personalInfo: PersonalInfo!

    "获取组织配置信息"
    getOrgConfig: OrgConfig!

    "获取付费到期提醒"
    getPayRemind:GetPayRemindResp!

    "获取用户配置信息"
    userConfigInfo: UserConfig!

    "获取任务信息，不能查询删除/无权限的任务信息。否则会提示不存在或无权限。"
    issueInfoNotDelete(param: IssueInfoNotDeleteReq!): IssueInfo!

    "任务状态类型数量统计(不统计已归档的项目)"
    issueStatusTypeStat(input: IssueStatusTypeStatReq): IssueStatusTypeStatResp!

    "任务类型统计(不统计已归档的项目)"
    issueStatusTypeStatDetail(input: IssueStatusTypeStatReq):IssueStatusTypeStatDetailResp!
  
    "任务分配rank排行(Top5)(不统计已归档的项目)"
    issueAssignRank(input: IssueAssignRankReq!):[IssueAssignRankInfo!]

    "获取飞书云文档列表"
    fsDocumentList(page:Int, size:Int, input:fsDocumentListReq!):fsDocumentListResp!

    "获取动态列表"
    trendList(input:TrendReq):TrendsList!

    "获取迭代信息"
    iterationInfo(input: IterationInfoReq!): IterationInfoResp!

    "获取OSS policy认证信息"
    getOssPostPolicy(input: OssPostPolicyReq!): OssPostPolicyResp!


    "获取邀请码"
    getInviteCode(input: GetInviteCodeReq): GetInviteCodeResp!

    "获取邀请信息"
    getInviteInfo(input: GetInviteInfoReq!): GetInviteInfoResp!

    "获取MQTT通道key"
    getMQTTChannelKey(input: GetMQTTChannelKeyReq!): GetMQTTChannelKeyResp!

    ## power by codegen

    "获取项目列表"
    projects(page: Int!, size: Int!, params: Map!, order:[String], input: ProjectsReq):ProjectList!

    "获取项目信息"
    projectInfo(input: ProjectInfoReq!): ProjectInfo!

    "获取迭代列表"
    iterations(page: Int, size: Int, params: IterationListReq):IterationList!

    "获取迭代燃尽图统计"
    iterationStats(page: Int, size: Int, params: IterationStatReq!):IterationStatList!

    "获取项目明细列表"
    projectDetail(projectId:Int64!):ProjectDetail!

    "获取项目中任务的燃尽图"
    projectDayStats(page: Int, size: Int, params: ProjectDayStatReq):ProjectDayStatList!

    ## power by codegen
    "获取部门列表"
    departments(page: Int, size: Int, params: DepartmentListReq):DepartmentList!

    "获取部门成员列表"
    departmentMembers(params: DepartmentMemberListReq!):[DepartmentMemberInfo!]!
    
    "获取部门成员列表(带分页)"
    departmentMembersList(page: Int, size: Int, params: DepartmentMembersListReq):DepartmentMembersListResp!

    "用户组织列表(不需要验证当前用户组织状态)"
    userOrganizationList:UserOrganizationListResp!

    "地区联动列表"
    areaLinkageList(input:AreaLinkageListReq!):AreaLinkageListResp!
    "行业列表"
    industryList:IndustryListResp!
    "组织信息"
    organizationInfo(input:OrganizationInfoReq!):OrganizationInfoResp!

    "导出项目任务excel模板"
    exportIssueTemplate(projectId:Int64!, tableId:String!):ExportIssueTemplateResp!

    "组织成员列表"
    orgUserList(page: Int, size: Int, input: OrgUserListReq!):UserOrganizationList!

    "导出项目任务数据"
    exportData(projectId:Int64!, iterationId:Int64, tableId: String!, isNeedDocument:Boolean):ExportIssueTemplateResp!

    "查询项目文件资源"
    projectResource(page: Int, size: Int,params:ProjectResourceReq!):ResourceList!

    "查询项目文件夹"
    projectFolder(page: Int, size: Int,params:ProjectFolderReq!):FolderList!
  
    "查询项目下所有附件"
    projectAttachment(page: Int, size: Int,params: ProjectAttachmentReq!):AttachmentList!
    
    "查询项目下附件"
    projectAttachmentInfo(input: ProjectAttachmentInfoReq!):Attachment!

    getPersonalPermissionInfo(projectId: Int64, issueId: Int64):GetPersonalPermissionInfoResp!

    "回收站内容列表"
    recycleBinList(page: Int, size: Int, params:RecycleBinListReq!):RecycleBinList!

    "数量限制查询"
    payLimitNum:PayLimitNumResp!

    "获取任务的工时详情"
    getIssueWorkHoursInfo(params: GetIssueWorkHoursInfoReq!): GetIssueWorkHoursInfoResp!

    "工时统计查询"
    getWorkHourStatistic(params: GetWorkHourStatisticReq!): GetWorkHourStatisticResp!

    "检查员工是否是任务成员、负责人"
    checkIsIssueMember(params: CheckIsIssueMemberReq!): BoolResp!

    "检查项目的工时是否开启"
    checkIsEnableWorkHour(params: CheckIsEnableWorkHourReq!): CheckIsEnableWorkHourResp!

    "工时统计的导出"
    exportWorkHourStatistic(params: GetWorkHourStatisticReq!): ExportWorkHourStatisticResp!

    "获取项目主群聊id"
    getProjectMainChatId(params:GetProjectMainChatIdReq!):GetProjectMainChatIdResp!

    "获取项目群聊推送设置"
    getFsProjectChatPushSettings(params:GetFsProjectChatPushSettingsReq!):GetFsProjectChatPushSettingsResp!

    "项目成员展示（包括成员和部门）"
    projectMemberIdList(params: ProjectMemberIdListReq!):ProjectMemberIdListResp!

    "获取组织openApi配置信息"
    getAppTicket:GetAppTicketResp!

    "获取任务视图列表"
    getIssueViewList(params: GetIssueViewListReq!): getIssueViewListResp!

    "查询是否有指定的权限"
    checkSpecificScope(params: CheckSpecificScopeReq!): CheckSpecificScopeResp!

    "判断token是否有效"
    checkTokenValidity: CheckTokenValidityResp!

    "获取jsapi_ticket"
    getJsApiTicket:GetJsApiTicketResp!
}

type Mutation {
    ## coding by nico

    "发送短信登录验证码"
    sendSmsLoginCode(input: SendSmsLoginCodeReq!): Void!

    "发送各种验证码(目前支持手机号以及邮箱)"
    sendAuthCode(input: SendAuthCodeReq!): Void!
    
    "通过手机号和邮箱找回密码"
    retrievePassword(input: RetrievePasswordReq!): Void!

    "重设密码"
    resetPassword(input: ResetPasswordReq!): Void!

    "设置密码"
    setPassword(input: SetPasswordReq!): Void! 

    "解绑登录方式"
    unbindLoginName(input: UnbindLoginNameReq!): Void!

    "绑定登录方式"
    bindLoginName(input: BindLoginNameReq!): Void!

    "检测邮箱、手机号、账户是否存在"
    checkLoginName(input: CheckLoginNameReq!): Void!

    "验证旧绑定方式（为换绑服务）"
    verifyOldName(input: UnbindLoginNameReq!): Void!

    "换绑新登录账号"
    changeLoginName(input: BindLoginNameReq!): Void! 

    "飞书auth"
    authFs(input: FeiShuAuthReq!) : FeiShuAuthResp!

    "飞书code认证"
    authFsCode(input: FeiShuAuthReq!): FeiShuAuthCodeResp!

    "绑定飞书团队"
    boundFs(input: BoundFeiShuReq!): Void!

    "绑定飞书账号"
    boundFsAccount(input: BoundFeiShuAccountReq!): Void!

    "初始化飞书账号"
    initFsAccount(input: InitFeiShuAccountReq!): FeiShuAuthCodeResp!

    "用户登录"
    userLogin(input: UserLoginReq!): UserLoginResp!

    "用户注册"
    userRegister(input: UserRegisterReq!): UserRegisterResp!

    "用户退出"
    userQuit:Void!
       
    "修改项目状态"
    updateProjectStatus(input: UpdateProjectStatusReq!): Void!

    "归档项目"
    archiveProject(projectId:Int64!):Void!

    "项目取消归档"
    cancelArchivedProject(projectId:Int64!):Void!

    "删除项目"
    deleteProject(projectId:Int64!):Void!

    "更新用户配置"
    updateUserConfig(input: UpdateUserConfigReq!): UpdateUserConfigResp!

    "更新用户pc的通知配置"
    updateUserPcConfig(input: UpdateUserPcConfigReq!): UpdateUserConfigResp!
    
    "更新迭代状态"
    updateIterationStatus(input: UpdateIterationStatusReq!): Void!
    ## power by codegen

    "创建组织(不需要验证当前用户组织状态)"
    createOrg(input: CreateOrgReq!):Void!

    "添加任务评论"
    createIssueComment(input: CreateIssueCommentReq!): Void!


    "删除任务"
    deleteIssue(input: DeleteIssueReq!):Issue!

    "批量删除任务"
    deleteIssueBatch(input: DeleteIssueBatchReq!):DeleteIssueBatchResp!

    "创建项目"
    createProject(input: CreateProjectReq!):Project!

    "更新项目"
    updateProject(input: UpdateProjectReq!):Project!

    "创建迭代"
    createIteration(input: CreateIterationReq!):Void!

    "更新迭代"
    updateIteration(input: UpdateIterationReq!):Void!

    "删除迭代"
    deleteIteration(input: DeleteIterationReq!):Void!

    "更新迭代排序"
    updateIterationSort(input:UpdateIterationSortReq!):Void!

    "更新项目明细"
    updateProjectDetail(input: UpdateProjectDetailReq!):Void!

    "切换用户组织(不需要验证当前用户组织状态)"
    switchUserOrganization(input:SwitchUserOrganizationReq!):Void!

    "更新组织设置"
    updateOrganizationSetting(input:UpdateOrganizationSettingsReq!):Void!

    "修改组织成员状态"
    updateOrgMemberStatus(input:UpdateOrgMemberStatusReq!): Void!

    "修改组织成员审核状态"
    updateOrgMemberCheckStatus(input:UpdateOrgMemberCheckStatusReq!): Void!

    "更新用户个人信息"
    updateUserInfo(input:UpdateUserInfoReq!):Void!

    "更新项目文件目录"
    updateProjectResourceFolder(input: UpdateProjectResourceFolderReq!): UpdateProjectResourceFolderResp!

    "更新项目文件名"
    updateProjectResourceName(input: UpdateProjectResourceNameReq!): Void!

    "更新项目文件资源"
    updateProjectFileResource(input: UpdateProjectFileResourceReq!): Void!

    "删除项目文件"
    deleteProjectResource(input: DeleteProjectResourceReq!): DeleteProjectResourceResp!

    "创建文件夹"
    createProjectFolder(input: CreateProjectFolderReq!):Void!
    "删除文件夹"
    deleteProjectFolder(input: DeleteProjectFolderReq!):DeleteProjectFolderResp!
    "更新文件夹"
    updateProjectFolder(input: UpdateProjectFolderReq!):UpdateProjectFolderResp!

    "删除附件"
    deleteProjectAttachment(input: DeleteProjectAttachmentReq!):DeleteProjectAttachmentResp!

        
    "更新迭代状态时间"
    updateIterationStatusTime(input:UpdateIterationStatusTimeReq!):Void!


    "恢复回收站内容"
    recoverRecycleBinRecord(input:RecoverRecycleBinRecordReq!):Void!

    "彻底删除"
    completeDelete(input:RecoverRecycleBinRecordReq!):Void!

    "引用任务附件(飞书云文档)"
    addIssueAttachmentFs(input:AddIssueAttachmentFsReq!):AddIssueAttachmentFsResp!

    "转化为父任务"
    convertIssueToParent(input:ConvertIssueToParentReq!):Void!

    "变更父任务"
    changeParentIssue(input:ChangeParentIssueReq!):Void!

    "创建工时记录"
    createIssueWorkHours(params: CreateIssueWorkHoursReq): BoolResp!

    "创建多个预估工时"
    createMultiIssueWorkHours(params: CreateMultiIssueWorkHoursReq): BoolResp!

    "编辑工时记录"
    updateIssueWorkHours(params: UpdateIssueWorkHoursReq): BoolResp!

    "编辑详细预估工时"
    updateMultiIssueWorkHours(params: UpdateMultiIssueWorkHoursReq): BoolResp!
    
    "删除工时记录"
    deleteIssueWorkHours(params: DeleteIssueWorkHoursReq): BoolResp!

    "将用户加入到任务成员中"
    setUserJoinIssue(params: SetUserJoinIssueReq!): BoolResp!

    "更新项目群聊推送设置"
    updateFsProjectChatPushSettings(params:UpdateFsProjectChatPushSettingsReq!):Void!

    "任务催办"
    urgeIssue(params: UrgeIssueReq!): BoolResp!

    "审核任务"
    auditIssue(params:AuditIssueReq!):Void!

    "查看审核任务"
    viewAuditIssue(params:ViewAuditIssueReq!):Void!

    "撤回任务"
    withdrawIssue(params:WithdrawIssueReq!):Void!

    "催办确认人"
    urgeAuditIssue(params: UrgeAuditIssueReq!): BoolResp!

    "发起申请授权"
    applyScopes: ApplyScopesResp!

    "通过邀请码加入组织"
    joinOrgByInviteCode(params:JoinOrgByInviteCodeReq!):Void!
}









`, BuiltIn: false},
	{Name: "schema/sms_code.graphql", Input: `"发送短信登录验证码请求结构体"
input SendSmsLoginCodeReq{
    "手机号"
    phoneNumber: String!
    "验证码id"
    captchaId:String
    "输入的验证码"
    captchaPassword:String
    "易盾验证码"
    yidunValidate:String
}

"发送各种验证码请求结构体"
input SendAuthCodeReq{
    "验证方式: 1: 登录验证码，2：注册验证码，3：修改密码验证码，4：找回密码验证码，5：绑定验证码, 6：解绑验证码"
    authType: Int!
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
    "联系地址，根据地址类型区分手机号或者邮箱"
    address: String!
    "验证码id"
    captchaId:String
    "输入的验证码"
    captchaPassword:String
    "易盾验证码"
    yidunValidate:String
}`, BuiltIn: false},
	{Name: "schema/tag.graphql", Input: `"结构体"
type Tag{
    "id"
    id:Int64!
    "组织id"
    orgId:Int64!
    "项目id"
    projectId:Int64!
    "名称"
    name:String!
    "名称拼音"
    namePinyin:String!
    "背景色"
    bgStyle:String!
    "字体色"
    fontStyle:String!
    "使用任务数"
    usedNum:Int64!
    "创建人id"
    creator:Int64!
    "创建时间"
    createTime:Time!
}`, BuiltIn: false},
	{Name: "schema/trend.graphql", Input: `"动态列表请求结构体"
input TrendReq {
	"上次分页的最后一条动态id"
	lastTrendId:Int64
	"对象类型"
    objType:String
	"对象id"
	objId:Int64
	"操作id"
	operId:Int64
    "开始时间"
	startTime:Time
	"结束时间"
    endTime:Time
	"分类（1任务动态2评论3项目动态（仅包括项目）4项目动态（包括项目和任务））5审批 6流转"
	type:Int
	"page"
    page:Int64
	"size"
    size:Int64
	"排序（1时间正序2时间倒叙）"
	orderType:Int
}

"动态列表"
type TrendsList {
	"总数量"
	total: Int64!
	"页码"
	page:  Int64!
	"size"
	size:  Int64!
	"分页的最后一条动态id"
	lastTrendId:Int64!
	"列表"
	list:  [Trend]
}

"动态信息"
type Trend {
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"一级模块, 系统,组织,项目等"
	module1:String!
	"二级模块id"
	module2Id:Int64!
	"二级模块.系统设置,消息设置,项目问题等"
	module2:String!
	"三级模块id"
	module3Id:Int64!
	"三级模块,issus,迭代"
	module3:String!
	"操作编号"
	operCode:String!
	"被操作对象id"
	operObjId:Int64!
	"被操作对象类型"
	operObjType:String!
	"操作对象属性"
	operObjProperty:String!
	"主关联对象id"
	relationObjId:Int64!
	"主关联对象类型"
	relationObjType:String!
	"关联类型"
	relationType:String!
	"新值,json"
	newValue:String
	"旧值,json"
	oldValue:String
	"扩展信息"
	ext:String!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"被操作对象名称"
	operObjName:String!
	"操作人名称"
	creatorInfo:UserIdInfo!
	"评论内容"
	comment:String
	"扩展信息详情"
	extension:TrendExtension
	"操作对象是否被删除"
	objIsDelete:Boolean!
}

type TrendExtension {
	issueType:String
	"操作对象名称"
	ObjName:String
	"变更列表（主要用于更新字段）"
	changeList:[ChangeList]
	"涉及的变更成员信息（人员更新，关联对象增加/删除）"
	memberInfo:[MemberInfo]
	"涉及的标签变更信息"
	tagInfo:[SimpleTagInfo]

	"关联问题信息"
	relationIssue:RelationIssue
	"关联资源信息"
	resourceInfo:[ResourceInfo]
	"通用变更数组"
	commonChange:[String]
	"文件夹id"
	folderId:Int64
	"字段id"
	fieldIds:[Int64]
#	"项目对象类型id"
#	projectObjectTypeId:Int64
#	"项目对象类型名称"
#	projectObjectTypeName:String
	"审批信息"
	auditInfo:TrendAuditInfo
	"增加的字段"
	addedFormFields:[String!]
	"删除的字段"
	deletedFormFields:[String!]
	"更新的字段"
	updatedFormFields:[String!]
}

type TrendAuditInfo {
	"确认装填（3通过4驳回）"
	status:Int
	"确认内容"
	remark:String
	"附件"
	attachments:[ResourceInfo]
}

type SimpleTagInfo {
	id:Int64
	name:String
}

type ChangeList {
	"字段"
	field:String
	"字段名"
	fieldName:String
	"旧值"
	oldValue:String
	"新值"
	newValue:String
}

type MemberInfo{
	"成员信息id"
	id: Int64
	"成员名称"
	name: String
	"成员头像"
	avatar: String
}

type RelationIssue {
	"关联信息id"
	id: Int64
	"关联信息名称"
	title: String
}

type ResourceInfo{
	"路径"
	url: String
	"资源名称"
	name: String
	"资源大小"
	size: Int64
	"上传时间"
	uploadTime:Time
	"文件后缀"
	suffix:String
	"上传人"
	creator:Int64
	"上传人名"
	creatorName:String
}
`, BuiltIn: false},
	{Name: "schema/type.graphql", Input: `scalar Time
#scalar Date
scalar Int64
scalar Map
scalar Any

"空响应结构体"
type Void{
    "主键"
    id: Int64!
}`, BuiltIn: false},
	{Name: "schema/user.graphql", Input: `"个人信息"
type PersonalInfo{
    "主键"
    id:Int64!
    "工号"
    emplId: String
    "组织id"
    orgId:Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "名称"
    name:String!
    "第三方名称"
    thirdName:String!
    "登录名"
    loginName:String!
    "登录名编辑次数"
    loginNameEditCount:Int!
    "邮箱"
    email:String!
    "电话"
    mobile:String!
    "生日"
    birthday:Time!
    "性别"
    sex:Int!
    "剩余使用时长"
    rimanente:Int!
    "付费等级"
    level:Int!
    "付费等级名"
    levelName:String!
    "头像"
    avatar:String!
    "来源"
    sourceChannel:String!
    "语言"
    language:String!
    "座右铭"
    motto:String!
    "上次登录ip"
    lastLoginIp:String!
    "上次登录时间"
    lastLoginTime:Time!
    "登录失败次数"
    loginFailCount:Int!
    "创建时间"
    createTime:Time!
    "更新时间"
    updateTime:Time!
    "密码是否设置过(1已设置0未设置)"
    passwordSet:Int!
    "是否需要提醒（1需要2不需要）"
    remindBindPhone:Int!
    "是否是超管"
    isAdmin:Boolean!
    "是否是管理员"
    isManager:Boolean!
    "权限"
    functions:[String!]!
    "一些额外数据，如：观看新手指引的状态"
    extraDataMap: Map!
}

type GetPayRemindResp {
    "是否需要提示付费信息(为空则表示不需要，否则展示提示信息)"
    remindPayExpireMsg:String!
}

"用户id信息"
type UserIdInfo{
    "用户id"
    id:Int64!
    "用户id"
    userId: Int64!
    "用户名称"
    name: String!
    "用户拼音"
    namePy:String!
    "用户头像"
    avatar: String!
    "工号：企业下唯一"
    emplId: String!
    "unionId： 开发者账号下唯一(暂时废弃，返回空)"
    unionId: String!
    "是否已被删除，为true则代表被组织移除"
    isDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    isDisabled: Boolean!
}

"更改用户个人信息"
input UpdateUserInfoReq{
    "姓名"
    name:String
    "性别"
    sex:Int
    "用户头像"
    avatar:String
    "生日"
    birthday:Time
    "是否需要提醒绑定手机号"
    remindBindPhone:Int
    "变动的字段列表"
    updateFields:[String!]!
}

type OrgProjectMemberInfoResp{
    "用户id"
    userId:Int64!
    "外部用户id"
    outUserId:String!
    "组织id"
    orgId:Int64!
    "外部组织id"
    outOrgId:String!
    "姓名"
    name:String!
    "姓名拼音（可能为空）"
    namePy:String
    "用户头像"
    avatar:String!
    "是否有外部信息"
    hasOutInfo:Boolean!
    "是否有组织外部信息"
    hasOrgOutInfo:Boolean!
    "组织用户是否删除"
    orgUserIsDelete :Int!
    "组织用户状态"
    orgUserStatus:Int!
    "组织用户check状态"
    orgUserCheckStatus:Int!
}

"成员信息结构体"
type UserInfo {
    "成员 id"
    userID: Int64!
    "姓名"
    name: String!
    "姓名拼音"
    namePy: String!
    "用户头像"
    avatar: String!
    "邮箱"
    email: String!
    "手机"
    phoneNumber: String!
    "用户部门信息"
    departmentList: [UserDepartmentData!]!
    "角色信息"
    roleList: [UserRoleData!]!
    "创建时间"
    createTime: Time!
    "状态：1启用，2禁用"
    status: Int!
    "禁用时间"
    statusChangeTime: Time!
    "是否是组织创建人"
    isCreator: Boolean!
}

"部门信息"
type UserDepartmentData {
    "部门id"
    departmentId: Int64
    "是否是主管：1是2否"
    isLeader: Int
    "部门名称"
    deparmentName: String
}

"角色信息"
type UserRoleData {
    "角色id"
    RoleId: Int64
    "角色名称"
    RoleName: String
}

"邀请成员的结果数据"
type InviteUserResp {
    "成功的邮箱"
    successEmail: [String!]
    "已邀请的邮箱"
    invitedEmail: [String!]
    "已经是用户的邮箱"
    isUserEmail: [String!]
    "不符合规范的邮箱"
    invalidEmail: [String!]
}

"邀请成员时，传入的单个成员信息"
input InviteUserData {
    "邮箱"
    email: String!
    "姓名（再次邀请时不用传了）"
    name: String!
}

"被邀请的用户信息"
type InviteUserInfo {
    "用户id"
    id: Int64!
    "名称"
    name: String!
    "邮箱"
    email: String!
    "邀请时间"
    inviteTime: Time!
    "是否24h内已邀请"
    isInvitedRecent: Boolean!
}
`, BuiltIn: false},
	{Name: "schema/user_config.graphql", Input: `"用户配置信息结构体"
type UserConfig{
	"主键"
	id: Int64!
	"个人日报开启状态, 2否, 1是"
	dailyReportMessageStatus:Int!
	"我负责的 2否, 1是"
	ownerRangeStatus:Int!
	"我协作的 2否, 1是"
	collaborateMessageStatus: Int!
	"我参与的, 2否, 1是"
	participantRangeStatus:Int!
	"我关注的, 2否, 1是"
	attentionRangeStatus:Int!
	"我创建的, 2否, 1是"
	createRangeStatus:Int!
	"任务提醒状态 2否, 1是"
	remindMessageStatus:Int!
	"评论和at我的通知"
	commentAtMessageStatus:Int!
	"任务更新状态, 2否, 1是"
	modifyMessageStatus:Int!
	"任务关联动态, 2否, 1是"
	relationMessageStatus:Int!
	"项目日报开启状态, 2  否 1:是"
	dailyProjectReportMessageStatus:Int!
	"默认项目id, 机器人创建项目的时候会选用这个项目"
	defaultProjectId: Int64!
	"默认工作栏"
	defaultProjectObjectTypeId: Int64!
	"pc桌面通知开关状态, 2否, 1是"
	pcNoticeOpenStatus: Int!
	"pc任务提醒状态, 2否, 1是"
	pcIssueRemindMessageStatus: Int!
	"pc组织相关推送状态, 2否, 1是"
	pcOrgMessageStatus: Int!
	"pc项目相关推送状态, 2否, 1是"
	pcProjectMessageStatus: Int!
	"pc评论相关推送状态, 2否, 1是"
	pcCommentAtMessageStatus: Int!
	"即将逾期提醒, 0-关闭 1-提前1小时 2-提前1天 3-提前2天 4-提前3天 5-提前4天 6-提前5天 7-提前6天 8-提前7天"
	remindExpiring:Int!
}

"更新用户配置响应结构体"
type UpdateUserConfigResp{
	"主键"
	id: Int64!
}

"更新用户配置请求结构体"
input UpdateUserConfigReq{
	"主键"
	id: Int64!
	"个人日报开启状态, 2否, 1是"
	dailyReportMessageStatus:Int!
	"我负责的 2否, 1是"
	ownerRangeStatus:Int!
	"我参与的, 2否, 1是"
	participantRangeStatus:Int!
	"我关注的, 2否, 1是"
	attentionRangeStatus:Int!
	"我创建的, 2否, 1是"
	createRangeStatus:Int!
	"我协作的。2否，1是"
	collaborateMessageStatus:Int!
	"任务提醒状态 2否, 1是"
	remindMessageStatus:Int!
	"评论和at我的通知"
	commentAtMessageStatus:Int!
	"任务更新状态, 2否, 1是"
	modifyMessageStatus:Int!
	"任务关联动态, 2否, 1是"
	relationMessageStatus:Int!
	"项目日报开启状态, 2否, 1是"
	dailyProjectReportMessageStatus:Int!
	"即将逾期提醒, 0-关闭 1-提前1小时 2-提前1天 3-提前2天 4-提前3天 5-提前4天 6-提前5天 7-提前6天 8-提前7天"
	remindExpiring:Int!
}

"更新用户pc配置请求结构体"
input UpdateUserPcConfigReq{
	"pc桌面通知开关状态, 2否, 1是"
	pcNoticeOpenStatus: Int
	"pc任务提醒状态, 2否, 1是"
	pcIssueRemindMessageStatus: Int
	"pc组织相关推送状态, 2否, 1是"
	pcOrgMessageStatus: Int
	"pc项目相关推送状态, 2否, 1是"
	pcProjectMessageStatus: Int
	"pc评论相关推送状态, 2否, 1是"
	pcCommentAtMessageStatus: Int
	"变动的字段列表"
	updateFields:[String!]
}

"更新用户默认项目配置请求结构体"
input UpdateUserDefaultProjectConfigReq{
	"默认项目id, 机器人创建项目的时候会选用这个项目"
	defaultProjectId: Int64!
	"默认工作栏id"
	defaultProjectObjectTypeId: Int64
}`, BuiltIn: false},
	{Name: "schema/user_organization.graphql", Input: `"结构体"
type OrganizationUser{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"用户id"
	userId:Int64!
	"审核状态,1待审核,2审核通过,3审核不过"
	checkStatus:Int!
	"使用状态,1已使用,2未使用"
	useStatus:Int!
	"企业用户状态, 1可用,2禁用"
	status:Int!
	"状态变更人id"
	statusChangerId:Int64!
	"状态变更时间"
	statusChangeTime:Time!
	"审核人id"
	auditorId:Int64!
	"审核时间"
	auditTime:Time!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"用户信息"
	userInfo:PersonalInfo!
	"审核人信息"
	auditorInfo:PersonalInfo
	"用户角色"
	userRole:UserRoleInfo
}

type UserRoleInfo {
	"角色id"
	id:Int64!
	"角色名称"
	name:String!
    "角色lang_code"
    langCode:String!
}

"创建请求结构体"
input CreateUserOrganizationReq{
	"组织id"
	orgId:Int64!
	"用户id"
	userId:Int64!
	"审核状态,1待审核,2审核通过,3审核不过"
	checkStatus:Int!
	"使用状态,1已使用,2未使用"
	useStatus:Int!
	"企业用户状态, 1可用,2禁用"
	status:Int!
	"状态变更人id"
	statusChangerId:Int64!
	"状态变更时间"
	statusChangeTime:Time!
	"审核人id"
	auditorId:Int64!
	"审核时间"
	auditTime:Time!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新请求结构体"
input UpdateUserOrganizationReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"用户id"
	userId:Int64!
	"审核状态,1待审核,2审核通过,3审核不过"
	checkStatus:Int!
	"使用状态,1已使用,2未使用"
	useStatus:Int!
	"企业用户状态, 1可用,2禁用"
	status:Int!
	"状态变更人id"
	statusChangerId:Int64!
	"状态变更时间"
	statusChangeTime:Time!
	"审核人id"
	auditorId:Int64!
	"审核时间"
	auditTime:Time!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除请求结构体"
input DeleteUserOrganizationReq{
	"主键"
	id:Int64!
}

"列表响应结构体"
type UserOrganizationList{
    total:Int64!
    list:[OrganizationUser!]
}

"列表请求结构体"
input OrgUserListReq{
	"审核状态,1待审核,2审核通过,3审核不过(成员管理取审核通过的，成员审核取待审核和审核不过的)"
	checkStatus:[Int!]
	"使用状态,1已使用,2未使用"
	useStatus:Int
	"企业用户状态, 1可用,2禁用"
	status:Int
	"姓名"
	name:String
	"邮箱"
	email:String
	"手机号"
	mobile:String
}
`, BuiltIn: false},
	{Name: "schema/website.graphql", Input: ``, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addIssueAttachmentFs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.AddIssueAttachmentFsReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddIssueAttachmentFsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_archiveProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_auditIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.AuditIssueReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNAuditIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAuditIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_authFsCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.FeiShuAuthReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNFeiShuAuthReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_authFs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.FeiShuAuthReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNFeiShuAuthReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bindLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.BindLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNBindLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBindLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_boundFsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.BoundFeiShuAccountReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNBoundFeiShuAccountReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoundFeiShuAccountReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_boundFs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.BoundFeiShuReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNBoundFeiShuReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoundFeiShuReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelArchivedProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changeLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.BindLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNBindLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBindLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changeParentIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ChangeParentIssueReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNChangeParentIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeParentIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_checkLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CheckLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCheckLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_completeDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RecoverRecycleBinRecordReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNRecoverRecycleBinRecordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecoverRecycleBinRecordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_convertIssueToParent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ConvertIssueToParentReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNConvertIssueToParentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertIssueToParentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssueComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIssueCommentReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCreateIssueCommentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueCommentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssueWorkHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.CreateIssueWorkHoursReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalOCreateIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueWorkHoursReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIteration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIterationReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCreateIterationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIterationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMultiIssueWorkHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.CreateMultiIssueWorkHoursReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalOCreateMultiIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateMultiIssueWorkHoursReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateOrgReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCreateOrgReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateOrgReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProjectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCreateProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCreateProjectReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssueBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIssueBatchReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteIssueBatchReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueBatchReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssueWorkHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.DeleteIssueWorkHoursReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalODeleteIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueWorkHoursReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIssueReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIteration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIterationReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteIterationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIterationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectAttachmentReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteProjectAttachmentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectResourceReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteProjectResourceReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_initFsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.InitFeiShuAccountReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNInitFeiShuAccountReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐInitFeiShuAccountReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_joinOrgByInviteCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.JoinOrgByInviteCodeReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNJoinOrgByInviteCodeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐJoinOrgByInviteCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recoverRecycleBinRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RecoverRecycleBinRecordReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNRecoverRecycleBinRecordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecoverRecycleBinRecordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ResetPasswordReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNResetPasswordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResetPasswordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_retrievePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RetrievePasswordReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNRetrievePasswordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRetrievePasswordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendAuthCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SendAuthCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNSendAuthCodeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendAuthCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendSmsLoginCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SendSmsLoginCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNSendSmsLoginCodeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendSmsLoginCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SetPasswordReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNSetPasswordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSetPasswordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setUserJoinIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SetUserJoinIssueReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNSetUserJoinIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSetUserJoinIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_switchUserOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SwitchUserOrganizationReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNSwitchUserOrganizationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSwitchUserOrganizationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unbindLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UnbindLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUnbindLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUnbindLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFsProjectChatPushSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateFsProjectChatPushSettingsReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNUpdateFsProjectChatPushSettingsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateFsProjectChatPushSettingsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueWorkHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.UpdateIssueWorkHoursReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalOUpdateIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueWorkHoursReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIterationSort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIterationSortReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateIterationSortReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationSortReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIterationStatusTime_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIterationStatusTimeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateIterationStatusTimeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationStatusTimeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIterationStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIterationStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateIterationStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIteration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIterationReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateIterationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMultiIssueWorkHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.UpdateMultiIssueWorkHoursReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalOUpdateMultiIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateMultiIssueWorkHoursReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgMemberCheckStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateOrgMemberCheckStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateOrgMemberCheckStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberCheckStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgMemberStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateOrgMemberStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateOrgMemberStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateOrganizationSettingsReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateOrganizationSettingsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrganizationSettingsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectDetailReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectDetailReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectDetailReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectFileResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectFileResourceReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectFileResourceReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFileResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectResourceFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectResourceFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectResourceFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectResourceName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectResourceNameReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectResourceNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserConfigReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserConfigReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPcConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserPcConfigReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserPcConfigReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserPcConfigReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_urgeAuditIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UrgeAuditIssueReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNUrgeAuditIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUrgeAuditIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_urgeIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UrgeIssueReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNUrgeIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUrgeIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userLogin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UserLoginReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUserLoginReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userRegister_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UserRegisterReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUserRegisterReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyOldName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UnbindLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUnbindLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUnbindLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_viewAuditIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ViewAuditIssueReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNViewAuditIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐViewAuditIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_withdrawIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.WithdrawIssueReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNWithdrawIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐWithdrawIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_areaLinkageList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.AreaLinkageListReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAreaLinkageListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_checkIsEnableWorkHour_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CheckIsEnableWorkHourReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNCheckIsEnableWorkHourReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsEnableWorkHourReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_checkIsIssueMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CheckIsIssueMemberReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNCheckIsIssueMemberReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsIssueMemberReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_checkSpecificScope_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CheckSpecificScopeReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNCheckSpecificScopeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckSpecificScopeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departmentMembersList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.DepartmentMembersListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalODepartmentMembersListReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMembersListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_departmentMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DepartmentMemberListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNDepartmentMemberListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.DepartmentListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalODepartmentListReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_exportData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["iterationId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
		arg1, err = ec.unmarshalOInt642ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["iterationId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["tableId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tableId"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["isNeedDocument"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isNeedDocument"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isNeedDocument"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_exportIssueTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["tableId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tableId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_exportWorkHourStatistic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetWorkHourStatisticReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNGetWorkHourStatisticReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fsDocumentList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.FsDocumentListReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg2, err = ec.unmarshalNfsDocumentListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getFsProjectChatPushSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetFsProjectChatPushSettingsReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNGetFsProjectChatPushSettingsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getInviteCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.GetInviteCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOGetInviteCodeReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getInviteInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetInviteInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetInviteInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getIssueViewList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetIssueViewListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNGetIssueViewListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getIssueWorkHoursInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetIssueWorkHoursInfoReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNGetIssueWorkHoursInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueWorkHoursInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMQTTChannelKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetMQTTChannelKeyReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetMQTTChannelKeyReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOssPostPolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.OssPostPolicyReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNOssPostPolicyReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPersonalPermissionInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalOInt642ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["issueId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
		arg1, err = ec.unmarshalOInt642ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["issueId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getProjectMainChatId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetProjectMainChatIDReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNGetProjectMainChatIdReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetProjectMainChatIDReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getWorkHourStatistic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetWorkHourStatisticReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNGetWorkHourStatisticReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueAssignRank_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.IssueAssignRankReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNIssueAssignRankReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueInfoNotDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.IssueInfoNotDeleteReq
	if tmp, ok := rawArgs["param"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("param"))
		arg0, err = ec.unmarshalNIssueInfoNotDeleteReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfoNotDeleteReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["param"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueStatusTypeStatDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.IssueStatusTypeStatReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOIssueStatusTypeStatReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueStatusTypeStat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.IssueStatusTypeStatReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOIssueStatusTypeStatReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iterationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.IterationInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNIterationInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iterationStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.IterationStatReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalNIterationStatReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_iterations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.IterationListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalOIterationListReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_orgUserList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.OrgUserListReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg2, err = ec.unmarshalNOrgUserListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgUserListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_organizationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.OrganizationInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNOrganizationInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectAttachmentInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ProjectAttachmentInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNProjectAttachmentInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectAttachmentInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectAttachmentReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalNProjectAttachmentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectAttachmentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectDayStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.ProjectDayStatReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalOProjectDayStatReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectFolderReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalNProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ProjectInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNProjectInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectMemberIdList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ProjectMemberIDListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg0, err = ec.unmarshalNProjectMemberIdListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectMemberIDListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectResourceReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalNProjectResourceReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	var arg3 []*string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("order"))
		arg3, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg3
	var arg4 *vo.ProjectsReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg4, err = ec.unmarshalOProjectsReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_recycleBinList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.RecycleBinListReq
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("params"))
		arg2, err = ec.unmarshalNRecycleBinListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_trendList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.TrendReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOTrendReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActualListItem_name(ctx context.Context, field graphql.CollectedField, obj *vo.ActualListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActualListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ActualListItem_actualWorkHourDateList(ctx context.Context, field graphql.CollectedField, obj *vo.ActualListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActualListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualWorkHourDateList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ActualWorkHourDateItem)
	fc.Result = res
	return ec.marshalOActualWorkHourDateItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualWorkHourDateItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ActualWorkHourDateItem_date(ctx context.Context, field graphql.CollectedField, obj *vo.ActualWorkHourDateItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActualWorkHourDateItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ActualWorkHourDateItem_workHour(ctx context.Context, field graphql.CollectedField, obj *vo.ActualWorkHourDateItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActualWorkHourDateItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AddIssueAttachmentFsResp_resources(ctx context.Context, field graphql.CollectedField, obj *vo.AddIssueAttachmentFsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AddIssueAttachmentFsResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Resource)
	fc.Result = res
	return ec.marshalNResource2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_code(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_secret1(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_secret2(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_checkStatus(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_creator(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_updator(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_version(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfoList_total(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfoList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfoList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfoList_list(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfoList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppInfoList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.AppInfo)
	fc.Result = res
	return ec.marshalOAppInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplyScopesResp_thirdCode(ctx context.Context, field graphql.CollectedField, obj *vo.ApplyScopesResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ApplyScopesResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplyScopesResp_thirdMsg(ctx context.Context, field graphql.CollectedField, obj *vo.ApplyScopesResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ApplyScopesResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdMsg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchiveIssueBatchResp_successIssues(ctx context.Context, field graphql.CollectedField, obj *vo.ArchiveIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ArchiveIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuccessIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchiveIssueBatchResp_noAuthIssues(ctx context.Context, field graphql.CollectedField, obj *vo.ArchiveIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ArchiveIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoAuthIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AreaLinkageListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.AreaLinkageResp)
	fc.Result = res
	return ec.marshalOAreaLinkageResp2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageRespᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_cname(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_code(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_isDefault(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_id(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_host(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_path(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_officeUrl(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_pathCompressed(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PathCompressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_name(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_type(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_size(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_suffix(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_md5(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Md5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_fileType(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_version(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_issueList(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachmentList_total(ctx context.Context, field graphql.CollectedField, obj *vo.AttachmentList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AttachmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachmentList_list(ctx context.Context, field graphql.CollectedField, obj *vo.AttachmentList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AttachmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicShowSetting_workBenchShow(ctx context.Context, field graphql.CollectedField, obj *vo.BasicShowSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BasicShowSetting",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkBenchShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicShowSetting_sideBarShow(ctx context.Context, field graphql.CollectedField, obj *vo.BasicShowSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BasicShowSetting",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SideBarShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicShowSetting_mirrorStat(ctx context.Context, field graphql.CollectedField, obj *vo.BasicShowSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BasicShowSetting",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MirrorStat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BoolResp_isTrue(ctx context.Context, field graphql.CollectedField, obj *vo.BoolResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BoolResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTrue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_gitCommitLog(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GitCommitLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_gitStatus(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GitStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_buildTime(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_buildGoVersion(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildGoVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_field(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_fieldName(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_oldValue(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_newValue(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChatData_outChatId(ctx context.Context, field graphql.CollectedField, obj *vo.ChatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutChatID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChatData_name(ctx context.Context, field graphql.CollectedField, obj *vo.ChatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChatData_description(ctx context.Context, field graphql.CollectedField, obj *vo.ChatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChatData_relationId(ctx context.Context, field graphql.CollectedField, obj *vo.ChatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChatData_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.ChatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChatData_isMain(ctx context.Context, field graphql.CollectedField, obj *vo.ChatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ChatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckIsEnableWorkHourResp_isEnable(ctx context.Context, field graphql.CollectedField, obj *vo.CheckIsEnableWorkHourResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CheckIsEnableWorkHourResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckSpecificScopeResp_hasPower(ctx context.Context, field graphql.CollectedField, obj *vo.CheckSpecificScopeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CheckSpecificScopeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPower, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckTokenValidityResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.CheckTokenValidityResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CheckTokenValidityResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckTokenValidityResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.CheckTokenValidityResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CheckTokenValidityResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_id(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_name(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_value(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_fieldType(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_fieldValue(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2ᚕmapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_isOrgField(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOrgField, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_remark(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_title(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomValue_status(ctx context.Context, field graphql.CollectedField, obj *vo.CustomValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteIssueBatchResp_successIssues(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuccessIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteIssueBatchResp_noAuthIssues(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoAuthIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteIssueBatchResp_remainChildrenIssues(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemainChildrenIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProjectAttachmentResp_resourceIds(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteProjectAttachmentResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteProjectAttachmentResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProjectFolderResp_folderIds(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteProjectFolderResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteProjectFolderResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FolderIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProjectResourceResp_resourceIds(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteProjectResourceResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteProjectResourceResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_name(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_code(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_status(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_isHide(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHide, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentList_total(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentList_list(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_userId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_unionId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_departmentId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_orgUserStatus(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMembersListResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMembersListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMembersListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMembersListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMembersListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentMembersListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.DepartmentMemberInfo)
	fc.Result = res
	return ec.marshalODepartmentMemberInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSimpleInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentSimpleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentSimpleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSimpleInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentSimpleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentSimpleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSimpleInfo_userCount(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentSimpleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DepartmentSimpleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ExportIssueTemplateResp_url(ctx context.Context, field graphql.CollectedField, obj *vo.ExportIssueTemplateResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ExportIssueTemplateResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExportWorkHourStatisticResp_url(ctx context.Context, field graphql.CollectedField, obj *vo.ExportWorkHourStatisticResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ExportWorkHourStatisticResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_tenantKey(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenantKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_openId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_isAdmin(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_binding(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Binding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_refreshToken(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_accessToken(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_codeToken(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_outOrgName(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutOrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthCodeResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_tenantKey(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenantKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_openId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_isAdmin(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_id(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_name(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_fileType(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_path(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_version(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FolderList_total(ctx context.Context, field graphql.CollectedField, obj *vo.FolderList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FolderList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FolderList_list(ctx context.Context, field graphql.CollectedField, obj *vo.FolderList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FolderList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Folder)
	fc.Result = res
	return ec.marshalNFolder2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAppTicketResp_appId(ctx context.Context, field graphql.CollectedField, obj *vo.GetAppTicketResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetAppTicketResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAppTicketResp_appSecret(ctx context.Context, field graphql.CollectedField, obj *vo.GetAppTicketResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetAppTicketResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetExportFieldsResp_fields(ctx context.Context, field graphql.CollectedField, obj *vo.GetExportFieldsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetExportFieldsResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.GetExportFieldsRespFieldsItem)
	fc.Result = res
	return ec.marshalOGetExportFieldsRespFieldsItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetExportFieldsRespFieldsItem(ctx, field.Selections, res)
}

func (ec *executionContext) _GetExportFieldsRespFieldsItem_fieldId(ctx context.Context, field graphql.CollectedField, obj *vo.GetExportFieldsRespFieldsItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetExportFieldsRespFieldsItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetExportFieldsRespFieldsItem_name(ctx context.Context, field graphql.CollectedField, obj *vo.GetExportFieldsRespFieldsItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetExportFieldsRespFieldsItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetExportFieldsRespFieldsItem_isMust(ctx context.Context, field graphql.CollectedField, obj *vo.GetExportFieldsRespFieldsItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetExportFieldsRespFieldsItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMust, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetExportFieldsRespFieldsItem_defineType(ctx context.Context, field graphql.CollectedField, obj *vo.GetExportFieldsRespFieldsItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetExportFieldsRespFieldsItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChat_tables(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.GetFsProjectChatPushSettingsOneChatTables)
	fc.Result = res
	return ec.marshalOGetFsProjectChatPushSettingsOneChatTables2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsOneChatTables(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChat_createIssue(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChat_createIssueComment(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateIssueComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChat_updateIssueCase(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateIssueCase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChat_modifyColumnsOfSend(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifyColumnsOfSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChatTables_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChatTables) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChatTables",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChatTables_tableId(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneChatTables) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneChatTables",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneProOneTable_tableIdStr(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneProOneTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneProOneTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableIDStr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneProOneTable_createIssue(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneProOneTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneProOneTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneProOneTable_createIssueComment(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneProOneTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneProOneTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateIssueComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneProOneTable_updateIssueCase(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneProOneTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneProOneTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateIssueCase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneProOneTable_modifyColumnsOfSend(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsOneProOneTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsOneProOneTable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifyColumnsOfSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetFsProjectChatPushSettingsResp_outChatSettings(ctx context.Context, field graphql.CollectedField, obj *vo.GetFsProjectChatPushSettingsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetFsProjectChatPushSettingsResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutChatSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.GetFsProjectChatPushSettingsOneChat)
	fc.Result = res
	return ec.marshalOGetFsProjectChatPushSettingsOneChat2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsOneChat(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteCodeResp_inviteCode(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetInviteCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteCodeResp_expire(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteCodeResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetInviteCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_inviterId(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_inviterName(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_id(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_config(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_remark(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_isPrivate(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPrivate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_viewName(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_type(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_sort(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueViewListItem_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueViewListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueWorkHoursInfoResp_simplePredictWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueWorkHoursInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueWorkHoursInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimplePredictWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OneWorkHourRecord)
	fc.Result = res
	return ec.marshalNOneWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneWorkHourRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueWorkHoursInfoResp_predictWorkHourList(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueWorkHoursInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueWorkHoursInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredictWorkHourList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.OneWorkHourRecord)
	fc.Result = res
	return ec.marshalOOneWorkHourRecord2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneWorkHourRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueWorkHoursInfoResp_actualWorkHourList(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueWorkHoursInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueWorkHoursInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualWorkHourList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.OneActualWorkHourRecord)
	fc.Result = res
	return ec.marshalOOneActualWorkHourRecord2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneActualWorkHourRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _GetIssueWorkHoursInfoResp_actualNeedTimeTotal(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueWorkHoursInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetIssueWorkHoursInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualNeedTimeTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetJsApiTicketResp_ticket(ctx context.Context, field graphql.CollectedField, obj *vo.GetJsAPITicketResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetJsApiTicketResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ticket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_address(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_host(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_port(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_channel(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_key(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetPayRemindResp_remindPayExpireMsg(ctx context.Context, field graphql.CollectedField, obj *vo.GetPayRemindResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetPayRemindResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindPayExpireMsg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetPersonalPermissionInfoResp_Data(ctx context.Context, field graphql.CollectedField, obj *vo.GetPersonalPermissionInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetPersonalPermissionInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectMainChatIdResp_chatId(ctx context.Context, field graphql.CollectedField, obj *vo.GetProjectMainChatIDResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetProjectMainChatIdResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetWorkHourStatisticResp_groupStatisticList(ctx context.Context, field graphql.CollectedField, obj *vo.GetWorkHourStatisticResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetWorkHourStatisticResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupStatisticList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.OnePersonWorkHourStatisticInfo)
	fc.Result = res
	return ec.marshalNOnePersonWorkHourStatisticInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOnePersonWorkHourStatisticInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GetWorkHourStatisticResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.GetWorkHourStatisticResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetWorkHourStatisticResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetWorkHourStatisticResp_summary(ctx context.Context, field graphql.CollectedField, obj *vo.GetWorkHourStatisticResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetWorkHourStatisticResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetWorkHourStatisticSummary)
	fc.Result = res
	return ec.marshalNGetWorkHourStatisticSummary2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _GetWorkHourStatisticSummary_predictTotal(ctx context.Context, field graphql.CollectedField, obj *vo.GetWorkHourStatisticSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetWorkHourStatisticSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredictTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetWorkHourStatisticSummary_actualTotal(ctx context.Context, field graphql.CollectedField, obj *vo.GetWorkHourStatisticSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetWorkHourStatisticSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_timeSpan(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeSpan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_fitTotal(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FitTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueGroup_list(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueInfo)
	fc.Result = res
	return ec.marshalOHomeIssueInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_issueId(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_parentInfo(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.ParentInfo)
	fc.Result = res
	return ec.marshalNParentInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐParentInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_title(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_isAttach(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAttach, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_parentIsMeetCondition(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentIsMeetCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_issue(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_project(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueProjectInfo)
	fc.Result = res
	return ec.marshalNHomeIssueProjectInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueOwnerInfo)
	fc.Result = res
	return ec.marshalOHomeIssueOwnerInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_priority(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssuePriorityInfo)
	fc.Result = res
	return ec.marshalNHomeIssuePriorityInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_tags(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueTagInfo)
	fc.Result = res
	return ec.marshalOHomeIssueTagInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_childsNum(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_childsFinishedNum(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsFinishedNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_sourceInfo(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssueSourceInfo)
	fc.Result = res
	return ec.marshalOIssueSourceInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_propertyInfo(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssuePropertyInfo)
	fc.Result = res
	return ec.marshalOIssuePropertyInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssuePropertyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_typeInfo(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssueObjectTypeInfo)
	fc.Result = res
	return ec.marshalOIssueObjectTypeInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_iterationName(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_followerInfos(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_relateIssueCount(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateIssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_relateResourceCount(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateResourceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_relateCommentCount(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateCommentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_customField(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomField, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.CustomValue)
	fc.Result = res
	return ec.marshalOCustomValue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCustomValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_workHourInfo(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkHourInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueWorkHourInfo)
	fc.Result = res
	return ec.marshalNHomeIssueWorkHourInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueWorkHourInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_auditorsInfo(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditorsInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfoExtraForIssueAudit)
	fc.Result = res
	return ec.marshalOUserIdInfoExtraForIssueAudit2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoExtraForIssueAuditᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_afterIssueIds(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AfterIssueIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_lessData(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LessData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoGroupResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoGroupResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoGroupResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoGroupResp_actualTotal(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoGroupResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoGroupResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoGroupResp_timeSpan(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoGroupResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoGroupResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeSpan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoGroupResp_group(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoGroupResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoGroupResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueGroup)
	fc.Result = res
	return ec.marshalOHomeIssueGroup2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoResp_actualTotal(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueInfo)
	fc.Result = res
	return ec.marshalOHomeIssueInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_userId(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_isDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_isDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_appId(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_isFilling(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFilling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_projectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_privacyStatus(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivacyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_type(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_sort(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueWorkHourInfo_predictWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueWorkHourInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueWorkHourInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredictWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueWorkHourInfo_actualWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueWorkHourInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueWorkHourInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueWorkHourInfo_predictList(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueWorkHourInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueWorkHourInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredictList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.PredictListItem)
	fc.Result = res
	return ec.marshalOPredictListItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPredictListItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueWorkHourInfo_actualList(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueWorkHourInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "HomeIssueWorkHourInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ActualListItem)
	fc.Result = res
	return ec.marshalOActualListItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualListItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IndustryListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IndustryResp)
	fc.Result = res
	return ec.marshalOIndustryResp2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryRespᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IndustryResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IndustryResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryResp_cname(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IndustryResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalAuthResp_hasPermission(ctx context.Context, field graphql.CollectedField, obj *vo.InternalAuthResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InternalAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserInfo_email(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserInfo_inviteTime(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserInfo_isInvitedRecent(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInvitedRecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserResp_successEmail(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuccessEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserResp_invitedEmail(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvitedEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserResp_isUserEmail(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserResp_invalidEmail(ctx context.Context, field graphql.CollectedField, obj *vo.InviteUserResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "InviteUserResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_id(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_code(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_title(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_isFiling(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFiling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_owner(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_owners(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owners, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_priorityId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_sourceId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_issueObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_propertyId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_planWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_iterationId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_versionId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_moduleId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_parentTitle(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_parentInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.ParentInfo)
	fc.Result = res
	return ec.marshalNParentInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐParentInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_remarkDetail(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkDetail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_status(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_auditStatus(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_issueIds(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_tableId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_dataId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_incompleteissueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncompleteissueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatData_statDate(ctx context.Context, field graphql.CollectedField, obj *vo.IssueDailyPersonalWorkCompletionStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueDailyPersonalWorkCompletionStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatData_completedCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueDailyPersonalWorkCompletionStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueDailyPersonalWorkCompletionStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_issue(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_project(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueProjectInfo)
	fc.Result = res
	return ec.marshalNHomeIssueProjectInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_priority(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssuePriorityInfo)
	fc.Result = res
	return ec.marshalNHomeIssuePriorityInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_participantInfos(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_followerInfos(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_nextStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_tags(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueTagInfo)
	fc.Result = res
	return ec.marshalOHomeIssueTagInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_sourceInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssueSourceInfo)
	fc.Result = res
	return ec.marshalOIssueSourceInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_propertyInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssuePropertyInfo)
	fc.Result = res
	return ec.marshalOIssuePropertyInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssuePropertyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_typeInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssueObjectTypeInfo)
	fc.Result = res
	return ec.marshalOIssueObjectTypeInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_iterationName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_childsNum(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_childsFinishedNum(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsFinishedNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_tableName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_relateIssueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateIssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_relateResourceCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateResourceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_relateCommentCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateCommentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_customField(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomField, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.CustomValue)
	fc.Result = res
	return ec.marshalOCustomValue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCustomValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_workHourInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkHourInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueWorkHourInfo)
	fc.Result = res
	return ec.marshalNHomeIssueWorkHourInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueWorkHourInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_auditorsInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditorsInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfoExtraForIssueAudit)
	fc.Result = res
	return ec.marshalOUserIdInfoExtraForIssueAudit2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoExtraForIssueAuditᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_lastUrgeTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUrgeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_lastUrgeTimeForIssue(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUrgeTimeForIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_lessData(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LessData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalOIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectTypeInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectTypeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueObjectTypeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectTypeInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectTypeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueObjectTypeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_sort(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_remark(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_status(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_creator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_updator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueProperty_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueProperty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssuePropertyInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssuePropertyInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssuePropertyInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssuePropertyInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssuePropertyInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssuePropertyInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_title(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerAvatar(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerAvatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerIsDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerIsDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_finished(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_statusId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_iterationId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_statusName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_priorityInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssuePriorityInfo)
	fc.Result = res
	return ec.marshalNHomeIssuePriorityInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_statusInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_iterationName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_type(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_auditStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_projectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_sort(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_remark(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_status(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_creator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_updator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSourceInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSourceInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueSourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatByObjectType_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatByObjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatByObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatByObjectType_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatByObjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatByObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatByObjectType_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatByObjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatByObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatDetailResp_notStart(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatDetailResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatDetailResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueStatByObjectType)
	fc.Result = res
	return ec.marshalNIssueStatByObjectType2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatDetailResp_processing(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatDetailResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatDetailResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueStatByObjectType)
	fc.Result = res
	return ec.marshalNIssueStatByObjectType2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatDetailResp_completed(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatDetailResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatDetailResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueStatByObjectType)
	fc.Result = res
	return ec.marshalNIssueStatByObjectType2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_notStartTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotStartTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_processingTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_completedTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_completedTodayTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedTodayTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueTomorrowTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueTomorrowTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueCompletedTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueCompletedTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueTodayTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueTodayTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_beAboutToOverdueSum(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeAboutToOverdueSum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_todayCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TodayCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_todayCreateCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TodayCreateCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_callMeTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CallMeTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_waitConfirmedTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaitConfirmedTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.StatCommon)
	fc.Result = res
	return ec.marshalOStatCommon2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_type(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_workerId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_needTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueWorkHours_desc(ctx context.Context, field graphql.CollectedField, obj *vo.IssueWorkHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IssueWorkHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_id(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_name(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_owner(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_versionId(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_planWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_storyPoint(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_status(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueOwnerInfo)
	fc.Result = res
	return ec.marshalNHomeIssueOwnerInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_statusInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_allIssueCount(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllIssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_finishedIssueCount(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedIssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_iteration(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iteration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Iteration)
	fc.Result = res
	return ec.marshalNIteration2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_project(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueProjectInfo)
	fc.Result = res
	return ec.marshalNHomeIssueProjectInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_status(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_owner(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_nextStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_iterStatusList(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterStatusList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalNHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_statusTimeInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusTimeInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.StatusTimeInfo)
	fc.Result = res
	return ec.marshalOStatusTimeInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IterationList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IterationList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Iteration)
	fc.Result = res
	return ec.marshalOIteration2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_id(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_iterationId(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_ext(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_statDate(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_status(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_creator(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IterationStat)
	fc.Result = res
	return ec.marshalOIterationStat2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatSimple_id(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatSimple) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatSimple",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatSimple_name(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatSimple) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatSimple",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatSimple_allIssues(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatSimple) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatSimple",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatSimple_overdueIssues(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatSimple) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatSimple",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatSimple_finishIssues(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatSimple) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IterationStatSimple",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_agentId(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_timeStamp(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_noceStr(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoceStr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_signature(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MemberInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MemberInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MemberInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.MemberInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MoveIssueBatchResp_successIssues(ctx context.Context, field graphql.CollectedField, obj *vo.MoveIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MoveIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuccessIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MoveIssueBatchResp_noAuthIssues(ctx context.Context, field graphql.CollectedField, obj *vo.MoveIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MoveIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoAuthIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MoveIssueBatchResp_remainChildrenIssues(ctx context.Context, field graphql.CollectedField, obj *vo.MoveIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MoveIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemainChildrenIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MoveIssueBatchResp_childrenIssues(ctx context.Context, field graphql.CollectedField, obj *vo.MoveIssueBatchResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MoveIssueBatchResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildrenIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendSmsLoginCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendSmsLoginCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendSmsLoginCode(rctx, args["input"].(vo.SendSmsLoginCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendAuthCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendAuthCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendAuthCode(rctx, args["input"].(vo.SendAuthCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_retrievePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_retrievePassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RetrievePassword(rctx, args["input"].(vo.RetrievePasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, args["input"].(vo.ResetPasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetPassword(rctx, args["input"].(vo.SetPasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_unbindLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_unbindLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnbindLoginName(rctx, args["input"].(vo.UnbindLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bindLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bindLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BindLoginName(rctx, args["input"].(vo.BindLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_checkLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_checkLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckLoginName(rctx, args["input"].(vo.CheckLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyOldName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyOldName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyOldName(rctx, args["input"].(vo.UnbindLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_changeLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_changeLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangeLoginName(rctx, args["input"].(vo.BindLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_authFs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_authFs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthFs(rctx, args["input"].(vo.FeiShuAuthReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.FeiShuAuthResp)
	fc.Result = res
	return ec.marshalNFeiShuAuthResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_authFsCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_authFsCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuthFsCode(rctx, args["input"].(vo.FeiShuAuthReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.FeiShuAuthCodeResp)
	fc.Result = res
	return ec.marshalNFeiShuAuthCodeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthCodeResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_boundFs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_boundFs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BoundFs(rctx, args["input"].(vo.BoundFeiShuReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_boundFsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_boundFsAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BoundFsAccount(rctx, args["input"].(vo.BoundFeiShuAccountReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_initFsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_initFsAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InitFsAccount(rctx, args["input"].(vo.InitFeiShuAccountReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.FeiShuAuthCodeResp)
	fc.Result = res
	return ec.marshalNFeiShuAuthCodeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthCodeResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userLogin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userLogin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserLogin(rctx, args["input"].(vo.UserLoginReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserLoginResp)
	fc.Result = res
	return ec.marshalNUserLoginResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userRegister(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userRegister_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserRegister(rctx, args["input"].(vo.UserRegisterReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserRegisterResp)
	fc.Result = res
	return ec.marshalNUserRegisterResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userQuit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserQuit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectStatus(rctx, args["input"].(vo.UpdateProjectStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_archiveProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_archiveProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchiveProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelArchivedProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelArchivedProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelArchivedProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserConfig(rctx, args["input"].(vo.UpdateUserConfigReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateUserConfigResp)
	fc.Result = res
	return ec.marshalNUpdateUserConfigResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserPcConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserPcConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPcConfig(rctx, args["input"].(vo.UpdateUserPcConfigReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateUserConfigResp)
	fc.Result = res
	return ec.marshalNUpdateUserConfigResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIterationStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIterationStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIterationStatus(rctx, args["input"].(vo.UpdateIterationStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrg(rctx, args["input"].(vo.CreateOrgReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssueComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssueComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssueComment(rctx, args["input"].(vo.CreateIssueCommentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssue(rctx, args["input"].(vo.DeleteIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssueBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssueBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssueBatch(rctx, args["input"].(vo.DeleteIssueBatchReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteIssueBatchResp)
	fc.Result = res
	return ec.marshalNDeleteIssueBatchResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueBatchResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProject(rctx, args["input"].(vo.CreateProjectReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProject(rctx, args["input"].(vo.UpdateProjectReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIteration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIteration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIteration(rctx, args["input"].(vo.CreateIterationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIteration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIteration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIteration(rctx, args["input"].(vo.UpdateIterationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIteration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIteration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIteration(rctx, args["input"].(vo.DeleteIterationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIterationSort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIterationSort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIterationSort(rctx, args["input"].(vo.UpdateIterationSortReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectDetail(rctx, args["input"].(vo.UpdateProjectDetailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_switchUserOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_switchUserOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SwitchUserOrganization(rctx, args["input"].(vo.SwitchUserOrganizationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationSetting(rctx, args["input"].(vo.UpdateOrganizationSettingsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrgMemberStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrgMemberStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgMemberStatus(rctx, args["input"].(vo.UpdateOrgMemberStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrgMemberCheckStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrgMemberCheckStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgMemberCheckStatus(rctx, args["input"].(vo.UpdateOrgMemberCheckStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserInfo(rctx, args["input"].(vo.UpdateUserInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectResourceFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectResourceFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectResourceFolder(rctx, args["input"].(vo.UpdateProjectResourceFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateProjectResourceFolderResp)
	fc.Result = res
	return ec.marshalNUpdateProjectResourceFolderResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectResourceName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectResourceName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectResourceName(rctx, args["input"].(vo.UpdateProjectResourceNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectFileResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectFileResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectFileResource(rctx, args["input"].(vo.UpdateProjectFileResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectResource(rctx, args["input"].(vo.DeleteProjectResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteProjectResourceResp)
	fc.Result = res
	return ec.marshalNDeleteProjectResourceResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProjectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProjectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectFolder(rctx, args["input"].(vo.CreateProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectFolder(rctx, args["input"].(vo.DeleteProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteProjectFolderResp)
	fc.Result = res
	return ec.marshalNDeleteProjectFolderResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectFolder(rctx, args["input"].(vo.UpdateProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateProjectFolderResp)
	fc.Result = res
	return ec.marshalNUpdateProjectFolderResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectAttachment(rctx, args["input"].(vo.DeleteProjectAttachmentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteProjectAttachmentResp)
	fc.Result = res
	return ec.marshalNDeleteProjectAttachmentResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIterationStatusTime(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIterationStatusTime_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIterationStatusTime(rctx, args["input"].(vo.UpdateIterationStatusTimeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_recoverRecycleBinRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_recoverRecycleBinRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecoverRecycleBinRecord(rctx, args["input"].(vo.RecoverRecycleBinRecordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_completeDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_completeDelete_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CompleteDelete(rctx, args["input"].(vo.RecoverRecycleBinRecordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIssueAttachmentFs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIssueAttachmentFs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIssueAttachmentFs(rctx, args["input"].(vo.AddIssueAttachmentFsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.AddIssueAttachmentFsResp)
	fc.Result = res
	return ec.marshalNAddIssueAttachmentFsResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_convertIssueToParent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_convertIssueToParent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConvertIssueToParent(rctx, args["input"].(vo.ConvertIssueToParentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_changeParentIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_changeParentIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangeParentIssue(rctx, args["input"].(vo.ChangeParentIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssueWorkHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssueWorkHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssueWorkHours(rctx, args["params"].(*vo.CreateIssueWorkHoursReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createMultiIssueWorkHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createMultiIssueWorkHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMultiIssueWorkHours(rctx, args["params"].(*vo.CreateMultiIssueWorkHoursReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueWorkHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueWorkHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueWorkHours(rctx, args["params"].(*vo.UpdateIssueWorkHoursReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateMultiIssueWorkHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateMultiIssueWorkHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMultiIssueWorkHours(rctx, args["params"].(*vo.UpdateMultiIssueWorkHoursReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssueWorkHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssueWorkHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssueWorkHours(rctx, args["params"].(*vo.DeleteIssueWorkHoursReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setUserJoinIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setUserJoinIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUserJoinIssue(rctx, args["params"].(vo.SetUserJoinIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFsProjectChatPushSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFsProjectChatPushSettings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFsProjectChatPushSettings(rctx, args["params"].(vo.UpdateFsProjectChatPushSettingsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_urgeIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_urgeIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UrgeIssue(rctx, args["params"].(vo.UrgeIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_auditIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_auditIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AuditIssue(rctx, args["params"].(vo.AuditIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_viewAuditIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_viewAuditIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ViewAuditIssue(rctx, args["params"].(vo.ViewAuditIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_withdrawIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_withdrawIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().WithdrawIssue(rctx, args["params"].(vo.WithdrawIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_urgeAuditIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_urgeAuditIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UrgeAuditIssue(rctx, args["params"].(vo.UrgeAuditIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_applyScopes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApplyScopes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ApplyScopesResp)
	fc.Result = res
	return ec.marshalNApplyScopesResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐApplyScopesResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_joinOrgByInviteCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_joinOrgByInviteCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().JoinOrgByInviteCode(rctx, args["params"].(vo.JoinOrgByInviteCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	fc.Result = res
	return ec.marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_id(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_type(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_relationType(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_ext(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_issueId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_trendsId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrendsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_content(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_noticer(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Noticer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_status(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_projectName(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_issueName(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_parentIssueId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentIssueID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_id(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_type(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_worker(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Worker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.WorkHourWorker)
	fc.Result = res
	return ec.marshalNWorkHourWorker2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐWorkHourWorker(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_needTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_desc(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OneActualWorkHourRecord_isEnable(ctx context.Context, field graphql.CollectedField, obj *vo.OneActualWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneActualWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OneDateWorkHour_date(ctx context.Context, field graphql.CollectedField, obj *vo.OneDateWorkHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneDateWorkHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OneDateWorkHour_weekDay(ctx context.Context, field graphql.CollectedField, obj *vo.OneDateWorkHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneDateWorkHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneDateWorkHour_time(ctx context.Context, field graphql.CollectedField, obj *vo.OneDateWorkHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneDateWorkHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OnePersonWorkHourStatisticInfo_workerId(ctx context.Context, field graphql.CollectedField, obj *vo.OnePersonWorkHourStatisticInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OnePersonWorkHourStatisticInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OnePersonWorkHourStatisticInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.OnePersonWorkHourStatisticInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OnePersonWorkHourStatisticInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OnePersonWorkHourStatisticInfo_predictHourTotal(ctx context.Context, field graphql.CollectedField, obj *vo.OnePersonWorkHourStatisticInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OnePersonWorkHourStatisticInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredictHourTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OnePersonWorkHourStatisticInfo_actualHourTotal(ctx context.Context, field graphql.CollectedField, obj *vo.OnePersonWorkHourStatisticInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OnePersonWorkHourStatisticInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualHourTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OnePersonWorkHourStatisticInfo_dateWorkHourList(ctx context.Context, field graphql.CollectedField, obj *vo.OnePersonWorkHourStatisticInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OnePersonWorkHourStatisticInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateWorkHourList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.OneDateWorkHour)
	fc.Result = res
	return ec.marshalOOneDateWorkHour2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneDateWorkHourᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_id(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_type(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_worker(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Worker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.WorkHourWorker)
	fc.Result = res
	return ec.marshalNWorkHourWorker2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐWorkHourWorker(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_needTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_desc(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OneWorkHourRecord_isEnable(ctx context.Context, field graphql.CollectedField, obj *vo.OneWorkHourRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OneWorkHourRecord",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_id(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_payLevel(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_payStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_payEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_payLevelTrue(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayLevelTrue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_orgMemberNumber(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgMemberNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_isGrayLevel(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGrayLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_summaryAppId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SummaryAppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_basicShowSetting(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasicShowSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BasicShowSetting)
	fc.Result = res
	return ec.marshalNBasicShowSetting2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBasicShowSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgConfig_logo(ctx context.Context, field graphql.CollectedField, obj *vo.OrgConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_outUserId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_outOrgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_hasOutInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOutInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_hasOrgOutInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOrgOutInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgUserIsDelete(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserIsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgUserStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgUserCheckStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserCheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_code(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_webSite(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_industryId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_industryName(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_scale(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_countryId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_countryCname(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_provinceId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_provinceCname(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceCname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_cityId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_cityCname(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityCname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_address(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_logoUrl(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_owner(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_remark(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_thirdCode(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_id(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_userId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_checkStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_useStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_status(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_statusChangerId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusChangerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_statusChangeTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusChangeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_auditorId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_auditTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_creator(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_updator(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_userInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	fc.Result = res
	return ec.marshalNPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_auditorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	fc.Result = res
	return ec.marshalOPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_userRole(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserRoleInfo)
	fc.Result = res
	return ec.marshalOUserRoleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_policy(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_signature(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_dir(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dir, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_expire(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_accessId(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_host(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_region(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_bucket(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_fileName(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_maxFileSize(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxFileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_callback(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Callback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ParentInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.ParentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ParentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ParentInfo_title(ctx context.Context, field graphql.CollectedField, obj *vo.ParentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ParentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ParentInfo_code(ctx context.Context, field graphql.CollectedField, obj *vo.ParentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ParentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayLimitNumResp_projectNum(ctx context.Context, field graphql.CollectedField, obj *vo.PayLimitNumResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PayLimitNumResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PayLimitNumResp_issueNum(ctx context.Context, field graphql.CollectedField, obj *vo.PayLimitNumResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PayLimitNumResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PayLimitNumResp_fileSize(ctx context.Context, field graphql.CollectedField, obj *vo.PayLimitNumResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PayLimitNumResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_id(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_code(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_name(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_type(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_path(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_isShow(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_status(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionList_total(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionList_list(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_id(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_permissionId(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_name(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_operationCodes(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_remark(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_isShow(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_status(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_creator(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_updator(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationListResp_permissionInfo(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationListResp_operationList(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.PermissionOperation)
	fc.Result = res
	return ec.marshalOPermissionOperation2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationListResp_permissionHave(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PermissionOperationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionHave, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_thirdName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_loginName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_loginNameEditCount(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginNameEditCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_email(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_mobile(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_birthday(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_sex(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_rimanente(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rimanente, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_level(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_levelName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LevelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_language(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_motto(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Motto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_lastLoginIp(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_lastLoginTime(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_loginFailCount(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginFailCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_passwordSet(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_remindBindPhone(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindBindPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_isAdmin(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_isManager(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_functions(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Functions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_extraDataMap(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtraDataMap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _PredictListItem_name(ctx context.Context, field graphql.CollectedField, obj *vo.PredictListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PredictListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PredictListItem_workHour(ctx context.Context, field graphql.CollectedField, obj *vo.PredictListItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PredictListItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_id(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_name(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_type(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_isDefault(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_status(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_version(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PriorityList_total(ctx context.Context, field graphql.CollectedField, obj *vo.PriorityList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PriorityList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriorityList_list(ctx context.Context, field graphql.CollectedField, obj *vo.PriorityList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PriorityList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Priority)
	fc.Result = res
	return ec.marshalOPriority2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_appId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_code(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_preCode(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_owner(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_projectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_priorityId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_publicStatus(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_resourceId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isFiling(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFiling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_status(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_statusType(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_version(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_ownersInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnersInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_memberInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_followerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_resourcePath(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourcePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_resourceCompressedPath(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceCompressedPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_allIssues(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_finishIssues(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_overdueIssues(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_iterationStat(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationStat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IterationStatSimple)
	fc.Result = res
	return ec.marshalOIterationStatSimple2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatSimple(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_projectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_projectTypeLangCode(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeLangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isSyncOutCalendar(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncOutCalendar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isStar(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsStar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_relateUnfinish(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelateUnfinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_icon(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_ext(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_statDate(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_version(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStatList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStatList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStatList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStatList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDayStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectDayStat)
	fc.Result = res
	return ec.marshalOProjectDayStat2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_notice(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_isEnableWorkHours(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnableWorkHours, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_isSyncOutCalendar(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncOutCalendar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetailList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetailList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetailList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetailList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetailList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectDetailList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectDetail)
	fc.Result = res
	return ec.marshalOProjectDetail2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_appId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_code(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_preCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_projectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_priorityId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_publicStatus(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_resourceId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_isFiling(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFiling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_remark(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_ownersInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnersInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_memberInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_memberDepartmentInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberDepartmentInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.DepartmentSimpleInfo)
	fc.Result = res
	return ec.marshalODepartmentSimpleInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentSimpleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_followerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_resourcePath(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourcePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	fc.Result = res
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_isSyncOutCalendar(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncOutCalendar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_syncCalendarStatusList(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncCalendarStatusList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_isCreateFsChat(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCreateFsChat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_isStar(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsStar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_privacyStatus(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivacyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_icon(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberIdListResp_departmentIds(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectMemberIDListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectMemberIdListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectMemberIdListResp_userIds(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectMemberIDListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectMemberIdListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_sort(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_cover(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cover, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_defaultProcessId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProcessID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_isReadonly(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReadonly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_remark(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectTypeList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectTypeList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectTypeList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectTypeList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectType)
	fc.Result = res
	return ec.marshalOProjectType2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_personalInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PersonalInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	fc.Result = res
	return ec.marshalNPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOrgConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOrgConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OrgConfig)
	fc.Result = res
	return ec.marshalNOrgConfig2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPayRemind(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPayRemind(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetPayRemindResp)
	fc.Result = res
	return ec.marshalNGetPayRemindResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPayRemindResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userConfigInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserConfigInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserConfig)
	fc.Result = res
	return ec.marshalNUserConfig2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueInfoNotDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueInfoNotDelete_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueInfoNotDelete(rctx, args["param"].(vo.IssueInfoNotDeleteReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueInfo)
	fc.Result = res
	return ec.marshalNIssueInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueStatusTypeStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueStatusTypeStat_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueStatusTypeStat(rctx, args["input"].(*vo.IssueStatusTypeStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueStatusTypeStatResp)
	fc.Result = res
	return ec.marshalNIssueStatusTypeStatResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueStatusTypeStatDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueStatusTypeStatDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueStatusTypeStatDetail(rctx, args["input"].(*vo.IssueStatusTypeStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueStatusTypeStatDetailResp)
	fc.Result = res
	return ec.marshalNIssueStatusTypeStatDetailResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatDetailResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueAssignRank(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueAssignRank_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueAssignRank(rctx, args["input"].(vo.IssueAssignRankReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueAssignRankInfo)
	fc.Result = res
	return ec.marshalOIssueAssignRankInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fsDocumentList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fsDocumentList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FsDocumentList(rctx, args["page"].(*int), args["size"].(*int), args["input"].(vo.FsDocumentListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.FsDocumentListResp)
	fc.Result = res
	return ec.marshalNfsDocumentListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_trendList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_trendList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrendList(rctx, args["input"].(*vo.TrendReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.TrendsList)
	fc.Result = res
	return ec.marshalNTrendsList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendsList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IterationInfo(rctx, args["input"].(vo.IterationInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationInfoResp)
	fc.Result = res
	return ec.marshalNIterationInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOssPostPolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOssPostPolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOssPostPolicy(rctx, args["input"].(vo.OssPostPolicyReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OssPostPolicyResp)
	fc.Result = res
	return ec.marshalNOssPostPolicyResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getInviteCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getInviteCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInviteCode(rctx, args["input"].(*vo.GetInviteCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetInviteCodeResp)
	fc.Result = res
	return ec.marshalNGetInviteCodeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getInviteInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getInviteInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInviteInfo(rctx, args["input"].(vo.GetInviteInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetInviteInfoResp)
	fc.Result = res
	return ec.marshalNGetInviteInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMQTTChannelKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getMQTTChannelKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMQTTChannelKey(rctx, args["input"].(vo.GetMQTTChannelKeyReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetMQTTChannelKeyResp)
	fc.Result = res
	return ec.marshalNGetMQTTChannelKeyResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Projects(rctx, args["page"].(int), args["size"].(int), args["params"].(map[string]interface{}), args["order"].([]*string), args["input"].(*vo.ProjectsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectList)
	fc.Result = res
	return ec.marshalNProjectList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectInfo(rctx, args["input"].(vo.ProjectInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectInfo)
	fc.Result = res
	return ec.marshalNProjectInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Iterations(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IterationListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationList)
	fc.Result = res
	return ec.marshalNIterationList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterationStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterationStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IterationStats(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.IterationStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationStatList)
	fc.Result = res
	return ec.marshalNIterationStatList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectDetail(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectDetail)
	fc.Result = res
	return ec.marshalNProjectDetail2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectDayStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectDayStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectDayStats(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.ProjectDayStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectDayStatList)
	fc.Result = res
	return ec.marshalNProjectDayStatList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_departments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_departments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Departments(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.DepartmentListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DepartmentList)
	fc.Result = res
	return ec.marshalNDepartmentList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_departmentMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_departmentMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentMembers(rctx, args["params"].(vo.DepartmentMemberListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.DepartmentMemberInfo)
	fc.Result = res
	return ec.marshalNDepartmentMemberInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_departmentMembersList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_departmentMembersList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentMembersList(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.DepartmentMembersListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DepartmentMembersListResp)
	fc.Result = res
	return ec.marshalNDepartmentMembersListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMembersListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userOrganizationList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserOrganizationList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserOrganizationListResp)
	fc.Result = res
	return ec.marshalNUserOrganizationListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_areaLinkageList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_areaLinkageList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AreaLinkageList(rctx, args["input"].(vo.AreaLinkageListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.AreaLinkageListResp)
	fc.Result = res
	return ec.marshalNAreaLinkageListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_industryList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IndustryList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IndustryListResp)
	fc.Result = res
	return ec.marshalNIndustryListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationInfo(rctx, args["input"].(vo.OrganizationInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OrganizationInfoResp)
	fc.Result = res
	return ec.marshalNOrganizationInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_exportIssueTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_exportIssueTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExportIssueTemplate(rctx, args["projectId"].(int64), args["tableId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ExportIssueTemplateResp)
	fc.Result = res
	return ec.marshalNExportIssueTemplateResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orgUserList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orgUserList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgUserList(rctx, args["page"].(*int), args["size"].(*int), args["input"].(vo.OrgUserListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserOrganizationList)
	fc.Result = res
	return ec.marshalNUserOrganizationList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_exportData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_exportData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExportData(rctx, args["projectId"].(int64), args["iterationId"].(*int64), args["tableId"].(string), args["isNeedDocument"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ExportIssueTemplateResp)
	fc.Result = res
	return ec.marshalNExportIssueTemplateResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectResource(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ResourceList)
	fc.Result = res
	return ec.marshalNResourceList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectFolder(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.FolderList)
	fc.Result = res
	return ec.marshalNFolderList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectAttachment(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectAttachmentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.AttachmentList)
	fc.Result = res
	return ec.marshalNAttachmentList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectAttachmentInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectAttachmentInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectAttachmentInfo(rctx, args["input"].(vo.ProjectAttachmentInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPersonalPermissionInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPersonalPermissionInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPersonalPermissionInfo(rctx, args["projectId"].(*int64), args["issueId"].(*int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetPersonalPermissionInfoResp)
	fc.Result = res
	return ec.marshalNGetPersonalPermissionInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPersonalPermissionInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recycleBinList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recycleBinList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecycleBinList(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.RecycleBinListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.RecycleBinList)
	fc.Result = res
	return ec.marshalNRecycleBinList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payLimitNum(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PayLimitNum(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.PayLimitNumResp)
	fc.Result = res
	return ec.marshalNPayLimitNumResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPayLimitNumResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getIssueWorkHoursInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getIssueWorkHoursInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetIssueWorkHoursInfo(rctx, args["params"].(vo.GetIssueWorkHoursInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetIssueWorkHoursInfoResp)
	fc.Result = res
	return ec.marshalNGetIssueWorkHoursInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueWorkHoursInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getWorkHourStatistic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getWorkHourStatistic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkHourStatistic(rctx, args["params"].(vo.GetWorkHourStatisticReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetWorkHourStatisticResp)
	fc.Result = res
	return ec.marshalNGetWorkHourStatisticResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkIsIssueMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_checkIsIssueMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckIsIssueMember(rctx, args["params"].(vo.CheckIsIssueMemberReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BoolResp)
	fc.Result = res
	return ec.marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkIsEnableWorkHour(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_checkIsEnableWorkHour_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckIsEnableWorkHour(rctx, args["params"].(vo.CheckIsEnableWorkHourReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.CheckIsEnableWorkHourResp)
	fc.Result = res
	return ec.marshalNCheckIsEnableWorkHourResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsEnableWorkHourResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_exportWorkHourStatistic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_exportWorkHourStatistic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExportWorkHourStatistic(rctx, args["params"].(vo.GetWorkHourStatisticReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ExportWorkHourStatisticResp)
	fc.Result = res
	return ec.marshalNExportWorkHourStatisticResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportWorkHourStatisticResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectMainChatId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getProjectMainChatId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProjectMainChatID(rctx, args["params"].(vo.GetProjectMainChatIDReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetProjectMainChatIDResp)
	fc.Result = res
	return ec.marshalNGetProjectMainChatIdResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetProjectMainChatIDResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getFsProjectChatPushSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getFsProjectChatPushSettings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFsProjectChatPushSettings(rctx, args["params"].(vo.GetFsProjectChatPushSettingsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetFsProjectChatPushSettingsResp)
	fc.Result = res
	return ec.marshalNGetFsProjectChatPushSettingsResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectMemberIdList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectMemberIdList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectMemberIDList(rctx, args["params"].(vo.ProjectMemberIDListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectMemberIDListResp)
	fc.Result = res
	return ec.marshalNProjectMemberIdListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectMemberIDListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAppTicket(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppTicket(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetAppTicketResp)
	fc.Result = res
	return ec.marshalNGetAppTicketResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetAppTicketResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getIssueViewList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getIssueViewList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetIssueViewList(rctx, args["params"].(vo.GetIssueViewListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetIssueViewListResp)
	fc.Result = res
	return ec.marshalNgetIssueViewListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkSpecificScope(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_checkSpecificScope_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckSpecificScope(rctx, args["params"].(vo.CheckSpecificScopeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.CheckSpecificScopeResp)
	fc.Result = res
	return ec.marshalNCheckSpecificScopeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckSpecificScopeResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkTokenValidity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckTokenValidity(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.CheckTokenValidityResp)
	fc.Result = res
	return ec.marshalNCheckTokenValidityResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckTokenValidityResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getJsApiTicket(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetJsAPITicket(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetJsAPITicketResp)
	fc.Result = res
	return ec.marshalNGetJsApiTicketResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetJsAPITicketResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_id(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_relationId(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_relationType(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_name(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_creator(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_updator(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_isCanDo(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCanDo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_resourceInfo(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.ResourceInfo)
	fc.Result = res
	return ec.marshalOResourceInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBin_tagInfo(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBinList_total(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBinList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBinList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecycleBinList_list(ctx context.Context, field graphql.CollectedField, obj *vo.RecycleBinList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecycleBinList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.RecycleBin)
	fc.Result = res
	return ec.marshalORecycleBin2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationIssue_id(ctx context.Context, field graphql.CollectedField, obj *vo.RelationIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationIssue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationIssue_title(ctx context.Context, field graphql.CollectedField, obj *vo.RelationIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationIssue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_userId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_relationType(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_outOrgUserId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutOrgUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_outUserId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_name(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_id(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_host(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_path(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_officeUrl(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_pathCompressed(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PathCompressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_name(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_type(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_size(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_suffix(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_md5(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Md5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_fileType(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_version(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_url(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_size(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_uploadTime(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_suffix(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isReadonly(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReadonly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isModifyPermission(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsModifyPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isDefault(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_roleGroupId(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_status(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleTagInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.SimpleTagInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SimpleTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleTagInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.SimpleTagInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SimpleTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StatCommon_name(ctx context.Context, field graphql.CollectedField, obj *vo.StatCommon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatCommon",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StatCommon_count(ctx context.Context, field graphql.CollectedField, obj *vo.StatCommon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatCommon",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatExtResp_issue(ctx context.Context, field graphql.CollectedField, obj *vo.StatExtResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatExtResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.StatIssueExt)
	fc.Result = res
	return ec.marshalNStatIssueExt2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatIssueExt(ctx, field.Selections, res)
}

func (ec *executionContext) _StatIssueExt_data(ctx context.Context, field graphql.CollectedField, obj *vo.StatIssueExt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatIssueExt",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_statusId(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_statusName(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_statusType(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusTimeInfo_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.StatusTimeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StatusTimeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_namePinyin(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePinyin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_usedNum(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdAccountBindListResp_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.ThirdAccountBindListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ThirdAccountBindListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdAccountBindListResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.ThirdAccountBindListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ThirdAccountBindListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdAccountBindListResp_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.ThirdAccountBindListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ThirdAccountBindListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_id(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module1(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module2Id(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module2Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module2(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module3Id(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module3Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module3(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operCode(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjId(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjType(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjProperty(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjProperty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_relationObjId(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationObjID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_relationObjType(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationObjType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_relationType(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_newValue(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_oldValue(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_ext(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjName(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	fc.Result = res
	return ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_comment(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_extension(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.TrendExtension)
	fc.Result = res
	return ec.marshalOTrendExtension2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendExtension(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_objIsDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjIsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendAuditInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.TrendAuditInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendAuditInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendAuditInfo_remark(ctx context.Context, field graphql.CollectedField, obj *vo.TrendAuditInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendAuditInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendAuditInfo_attachments(ctx context.Context, field graphql.CollectedField, obj *vo.TrendAuditInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendAuditInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ResourceInfo)
	fc.Result = res
	return ec.marshalOResourceInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_issueType(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_ObjName(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_changeList(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ChangeList)
	fc.Result = res
	return ec.marshalOChangeList2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_memberInfo(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.MemberInfo)
	fc.Result = res
	return ec.marshalOMemberInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_tagInfo(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.SimpleTagInfo)
	fc.Result = res
	return ec.marshalOSimpleTagInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSimpleTagInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_relationIssue(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.RelationIssue)
	fc.Result = res
	return ec.marshalORelationIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelationIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_resourceInfo(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ResourceInfo)
	fc.Result = res
	return ec.marshalOResourceInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_commonChange(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_folderId(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FolderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_fieldIds(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int64)
	fc.Result = res
	return ec.marshalOInt642ᚕᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_auditInfo(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.TrendAuditInfo)
	fc.Result = res
	return ec.marshalOTrendAuditInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendAuditInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_addedFormFields(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddedFormFields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_deletedFormFields(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedFormFields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_updatedFormFields(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedFormFields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_total(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_page(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_size(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_lastTrendId(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTrendID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_list(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Trend)
	fc.Result = res
	return ec.marshalOTrend2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProjectFolderResp_folderId(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateProjectFolderResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateProjectFolderResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FolderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProjectResourceFolderResp_resourceIds(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateProjectResourceFolderResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateProjectResourceFolderResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt642ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUserConfigResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateUserConfigResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateUserConfigResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_dailyReportMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DailyReportMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_ownerRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_collaborateMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollaborateMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_participantRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_attentionRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttentionRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_createRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_remindMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_commentAtMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentAtMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_modifyMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifyMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_relationMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_dailyProjectReportMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DailyProjectReportMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_defaultProjectId(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_defaultProjectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcNoticeOpenStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcNoticeOpenStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcIssueRemindMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcIssueRemindMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcOrgMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcOrgMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcProjectMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcProjectMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcCommentAtMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcCommentAtMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_remindExpiring(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindExpiring, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDepartmentData_departmentId(ctx context.Context, field graphql.CollectedField, obj *vo.UserDepartmentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserDepartmentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDepartmentData_isLeader(ctx context.Context, field graphql.CollectedField, obj *vo.UserDepartmentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserDepartmentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLeader, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDepartmentData_deparmentName(ctx context.Context, field graphql.CollectedField, obj *vo.UserDepartmentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserDepartmentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeparmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_userId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_unionId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_isDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_isDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_userId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_unionId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_isDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_isDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit_auditStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfoExtraForIssueAudit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserIdInfoExtraForIssueAudit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_userID(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_email(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_departmentList(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.UserDepartmentData)
	fc.Result = res
	return ec.marshalNUserDepartmentData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserDepartmentDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_roleList(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.UserRoleData)
	fc.Result = res
	return ec.marshalNUserRoleData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_statusChangeTime(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusChangeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _UserInfo_isCreator(ctx context.Context, field graphql.CollectedField, obj *vo.UserInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCreator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_needInitOrg(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedInitOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_notFsMobile(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotFsMobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_code(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_webSite(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_industryId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_scale(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_sourcePlatform(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourcePlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_countryId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_provinceId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_cityId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_address(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_logoUrl(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_resorceId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResorceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_owner(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_IsAuthenticated(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAuthenticated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_isAdmin(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_remark(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_isShow(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_OrgIsEnabled(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgIsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_functions(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Functions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganizationList_total(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganizationList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganizationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganizationList_list(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganizationList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganizationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.OrganizationUser)
	fc.Result = res
	return ec.marshalOOrganizationUser2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganizationListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganizationListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserOrganizationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserOrganization)
	fc.Result = res
	return ec.marshalOUserOrganization2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRegisterResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.UserRegisterResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRegisterResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleData_RoleId(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRoleData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleData_RoleName(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRoleData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRoleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRoleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleInfo_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserRoleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Void_id(ctx context.Context, field graphql.CollectedField, obj *vo.Void) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Void",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkHourWorker_userId(ctx context.Context, field graphql.CollectedField, obj *vo.WorkHourWorker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WorkHourWorker",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkHourWorker_name(ctx context.Context, field graphql.CollectedField, obj *vo.WorkHourWorker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WorkHourWorker",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkHourWorker_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.WorkHourWorker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WorkHourWorker",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentData_title(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentData_docsType(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocsType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentData_docsToken(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocsToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentData_docsUrl(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocsURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentData_ownerName(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentData_ownerId(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentListResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _fsDocumentListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.FsDocumentListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fsDocumentListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.FsDocumentData)
	fc.Result = res
	return ec.marshalOfsDocumentData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _getIssueViewListResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "getIssueViewListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _getIssueViewListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.GetIssueViewListResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "getIssueViewListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.GetIssueViewListItem)
	fc.Result = res
	return ec.marshalNGetIssueViewListItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _issueListStatData_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueListStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "issueListStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _issueListStatData_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueListStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "issueListStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _issueListStatData_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueListStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "issueListStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _issueListStatData_finishedCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueListStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "issueListStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _issueListStatData_overdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueListStatData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "issueListStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	fc.Result = res
	return ec.marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_userInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	fc.Result = res
	return ec.marshalOPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	fc.Result = res
	return ec.marshalOPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_userRole(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserRoleInfo)
	fc.Result = res
	return ec.marshalOUserRoleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_type(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_departmentInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.DepartmentSimpleInfo)
	fc.Result = res
	return ec.marshalODepartmentSimpleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentSimpleInfo(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddIssueAttachmentFsData(ctx context.Context, obj interface{}) (vo.AddIssueAttachmentFsData, error) {
	var it vo.AddIssueAttachmentFsData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddIssueAttachmentFsReq(ctx context.Context, obj interface{}) (vo.AddIssueAttachmentFsReq, error) {
	var it vo.AddIssueAttachmentFsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("folderId"))
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("data"))
			it.Data, err = ec.unmarshalNAddIssueAttachmentFsData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsDataᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAreaLinkageListReq(ctx context.Context, obj interface{}) (vo.AreaLinkageListReq, error) {
	var it vo.AreaLinkageListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isRoot":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isRoot"))
			it.IsRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "continentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("continentId"))
			it.ContinentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("countryId"))
			it.CountryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "areaId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("areaId"))
			it.AreaID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("stateId"))
			it.StateID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cityId"))
			it.CityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAttachmentSimpleInfo(ctx context.Context, obj interface{}) (vo.AttachmentSimpleInfo, error) {
	var it vo.AttachmentSimpleInfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "url":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "suffix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suffix"))
			it.Suffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
			it.Size, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditIssueReq(ctx context.Context, obj interface{}) (vo.AuditIssueReq, error) {
	var it vo.AuditIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("attachments"))
			it.Attachments, err = ec.unmarshalOAttachmentSimpleInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentSimpleInfoᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBeforeAfterIssueListReq(ctx context.Context, obj interface{}) (vo.BeforeAfterIssueListReq, error) {
	var it vo.BeforeAfterIssueListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBindLoginNameReq(ctx context.Context, obj interface{}) (vo.BindLoginNameReq, error) {
	var it vo.BindLoginNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressType"))
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authCode"))
			it.AuthCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBoundFeiShuAccountReq(ctx context.Context, obj interface{}) (vo.BoundFeiShuAccountReq, error) {
	var it vo.BoundFeiShuAccountReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "codeToken":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("codeToken"))
			it.CodeToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBoundFeiShuReq(ctx context.Context, obj interface{}) (vo.BoundFeiShuReq, error) {
	var it vo.BoundFeiShuReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeToken":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("codeToken"))
			it.CodeToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChangeParentIssueReq(ctx context.Context, obj interface{}) (vo.ChangeParentIssueReq, error) {
	var it vo.ChangeParentIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fromProjectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fromProjectId"))
			it.FromProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ParentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ParentId"))
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckIsEnableWorkHourReq(ctx context.Context, obj interface{}) (vo.CheckIsEnableWorkHourReq, error) {
	var it vo.CheckIsEnableWorkHourReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckIsIssueMemberReq(ctx context.Context, obj interface{}) (vo.CheckIsIssueMemberReq, error) {
	var it vo.CheckIsIssueMemberReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userId"))
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckLoginNameReq(ctx context.Context, obj interface{}) (vo.CheckLoginNameReq, error) {
	var it vo.CheckLoginNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressType"))
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckSpecificScopeReq(ctx context.Context, obj interface{}) (vo.CheckSpecificScopeReq, error) {
	var it vo.CheckSpecificScopeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "powerFlag":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("powerFlag"))
			it.PowerFlag, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCondOrder(ctx context.Context, obj interface{}) (vo.CondOrder, error) {
	var it vo.CondOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("asc"))
			it.Asc, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "column":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("column"))
			it.Column, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCondsData(ctx context.Context, obj interface{}) (vo.CondsData, error) {
	var it vo.CondsData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fieldType"))
			it.FieldType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "column":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("column"))
			it.Column, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "left":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("left"))
			it.Left, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "right":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("right"))
			it.Right, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConvertCodeReq(ctx context.Context, obj interface{}) (vo.ConvertCodeReq, error) {
	var it vo.ConvertCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConvertIssueToParentReq(ctx context.Context, obj interface{}) (vo.ConvertIssueToParentReq, error) {
	var it vo.ConvertIssueToParentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fromProjectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fromProjectId"))
			it.FromProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusId"))
			it.StatusID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tableId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
			it.TableID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAppInfoReq(ctx context.Context, obj interface{}) (vo.CreateAppInfoReq, error) {
	var it vo.CreateAppInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret1":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("secret1"))
			it.Secret1, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret2":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("secret2"))
			it.Secret2, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("checkStatus"))
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDepartmentReq(ctx context.Context, obj interface{}) (vo.CreateDepartmentReq, error) {
	var it vo.CreateDepartmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHide":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isHide"))
			it.IsHide, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourceChannel"))
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueCommentReq(ctx context.Context, obj interface{}) (vo.CreateIssueCommentReq, error) {
	var it vo.CreateIssueCommentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("comment"))
			it.Comment, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mentionedUserIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("mentionedUserIds"))
			it.MentionedUserIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachmentIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("attachmentIds"))
			it.AttachmentIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssuePropertyReq(ctx context.Context, obj interface{}) (vo.CreateIssuePropertyReq, error) {
	var it vo.CreateIssuePropertyReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("langCode"))
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectObjectTypeId"))
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueWorkHoursReq(ctx context.Context, obj interface{}) (vo.CreateIssueWorkHoursReq, error) {
	var it vo.CreateIssueWorkHoursReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "workerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("workerId"))
			it.WorkerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "needTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("needTime"))
			it.NeedTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIterationReq(ctx context.Context, obj interface{}) (vo.CreateIterationReq, error) {
	var it vo.CreateIterationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIterationStatReq(ctx context.Context, obj interface{}) (vo.CreateIterationStatReq, error) {
	var it vo.CreateIterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueCount"))
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWaitCount"))
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueRunningCount"))
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueEndCount"))
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandCount"))
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandWaitCount"))
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandRunningCount"))
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandEndCount"))
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointCount"))
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointWaitCount"))
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointRunningCount"))
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointEndCount"))
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskCount"))
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskWaitCount"))
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskRunningCount"))
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskEndCount"))
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugCount"))
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugWaitCount"))
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugRunningCount"))
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugEndCount"))
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskCount"))
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskWaitCount"))
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskRunningCount"))
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskEndCount"))
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ext"))
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statDate"))
			it.StatDate, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMultiIssueWorkHoursReq(ctx context.Context, obj interface{}) (vo.CreateMultiIssueWorkHoursReq, error) {
	var it vo.CreateMultiIssueWorkHoursReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalIssueWorkHourRecord":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("totalIssueWorkHourRecord"))
			it.TotalIssueWorkHourRecord, err = ec.unmarshalNNewPredicateWorkHour2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNewPredicateWorkHour(ctx, v)
			if err != nil {
				return it, err
			}
		case "predictWorkHourList":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("predictWorkHourList"))
			it.PredictWorkHourList, err = ec.unmarshalONewPredicateWorkHour2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNewPredicateWorkHourᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrgReq(ctx context.Context, obj interface{}) (vo.CreateOrgReq, error) {
	var it vo.CreateOrgReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgName"))
			it.OrgName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creatorName"))
			it.CreatorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "importSampleData":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("importSampleData"))
			it.ImportSampleData, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourcePlatform":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourcePlatform"))
			it.SourcePlatform, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourceChannel"))
			it.SourceChannel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industryId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("industryId"))
			it.IndustryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "scale":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scale"))
			it.Scale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeToken":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("codeToken"))
			it.CodeToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePermissionOperationReq(ctx context.Context, obj interface{}) (vo.CreatePermissionOperationReq, error) {
	var it vo.CreatePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("permissionId"))
			it.PermissionID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("langCode"))
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "operationCodes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("operationCodes"))
			it.OperationCodes, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isShow"))
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePermissionReq(ctx context.Context, obj interface{}) (vo.CreatePermissionReq, error) {
	var it vo.CreatePermissionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("langCode"))
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("path"))
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isShow"))
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectDayStatReq(ctx context.Context, obj interface{}) (vo.CreateProjectDayStatReq, error) {
	var it vo.CreateProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueCount"))
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWaitCount"))
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueRunningCount"))
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueEndCount"))
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandCount"))
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandWaitCount"))
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandRunningCount"))
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandEndCount"))
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointCount"))
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointWaitCount"))
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointRunningCount"))
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointEndCount"))
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskCount"))
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskWaitCount"))
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskRunningCount"))
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskEndCount"))
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugCount"))
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugWaitCount"))
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugRunningCount"))
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugEndCount"))
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskCount"))
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskWaitCount"))
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskRunningCount"))
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskEndCount"))
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ext"))
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statDate"))
			it.StatDate, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectFolderReq(ctx context.Context, obj interface{}) (vo.CreateProjectFolderReq, error) {
	var it vo.CreateProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileType"))
			it.FileType, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectReq(ctx context.Context, obj interface{}) (vo.CreateProjectReq, error) {
	var it vo.CreateProjectReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "preCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("preCode"))
			it.PreCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerIds"))
			it.OwnerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectTypeId"))
			it.ProjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("priorityId"))
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publicStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("publicStatus"))
			it.PublicStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFiling":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isFiling"))
			it.IsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePath":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourcePath"))
			it.ResourcePath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceType"))
			it.ResourceType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("memberIds"))
			it.MemberIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberForDepartmentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("memberForDepartmentId"))
			it.MemberForDepartmentID, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAllMember":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isAllMember"))
			it.IsAllMember, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("followerIds"))
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncOutCalendar":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isSyncOutCalendar"))
			it.IsSyncOutCalendar, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "syncCalendarStatusList":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("syncCalendarStatusList"))
			it.SyncCalendarStatusList, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCreateFsChat":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isCreateFsChat"))
			it.IsCreateFsChat, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "privacyStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("privacyStatus"))
			it.PrivacyStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFirst":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isFirst"))
			it.IsFirst, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateResourceReq(ctx context.Context, obj interface{}) (vo.CreateResourceReq, error) {
	var it vo.CreateResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("path"))
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "suffix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suffix"))
			it.Suffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "md5":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("md5"))
			it.Md5, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserOrganizationReq(ctx context.Context, obj interface{}) (vo.CreateUserOrganizationReq, error) {
	var it vo.CreateUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userId"))
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("checkStatus"))
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "useStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("useStatus"))
			it.UseStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusChangerId"))
			it.StatusChangerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangeTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusChangeTime"))
			it.StatusChangeTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditorId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("auditorId"))
			it.AuditorID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("auditTime"))
			it.AuditTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteAppInfoReq(ctx context.Context, obj interface{}) (vo.DeleteAppInfoReq, error) {
	var it vo.DeleteAppInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueBatchReq(ctx context.Context, obj interface{}) (vo.DeleteIssueBatchReq, error) {
	var it vo.DeleteIssueBatchReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ids"))
			it.Ids, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "menuAppId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("menuAppId"))
			it.MenuAppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tableId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
			it.TableID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueReq(ctx context.Context, obj interface{}) (vo.DeleteIssueReq, error) {
	var it vo.DeleteIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "takeChildren":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("takeChildren"))
			it.TakeChildren, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueWorkHoursReq(ctx context.Context, obj interface{}) (vo.DeleteIssueWorkHoursReq, error) {
	var it vo.DeleteIssueWorkHoursReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueWorkHoursId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWorkHoursId"))
			it.IssueWorkHoursID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIterationReq(ctx context.Context, obj interface{}) (vo.DeleteIterationReq, error) {
	var it vo.DeleteIterationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIterationStatReq(ctx context.Context, obj interface{}) (vo.DeleteIterationStatReq, error) {
	var it vo.DeleteIterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteNoticeReq(ctx context.Context, obj interface{}) (vo.DeleteNoticeReq, error) {
	var it vo.DeleteNoticeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePermissionOperationReq(ctx context.Context, obj interface{}) (vo.DeletePermissionOperationReq, error) {
	var it vo.DeletePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePermissionReq(ctx context.Context, obj interface{}) (vo.DeletePermissionReq, error) {
	var it vo.DeletePermissionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectAttachmentReq(ctx context.Context, obj interface{}) (vo.DeleteProjectAttachmentReq, error) {
	var it vo.DeleteProjectAttachmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceIds"))
			it.ResourceIds, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectDayStatReq(ctx context.Context, obj interface{}) (vo.DeleteProjectDayStatReq, error) {
	var it vo.DeleteProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectDetailReq(ctx context.Context, obj interface{}) (vo.DeleteProjectDetailReq, error) {
	var it vo.DeleteProjectDetailReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectFolderReq(ctx context.Context, obj interface{}) (vo.DeleteProjectFolderReq, error) {
	var it vo.DeleteProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("folderIds"))
			it.FolderIds, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectReq(ctx context.Context, obj interface{}) (vo.DeleteProjectReq, error) {
	var it vo.DeleteProjectReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectResourceReq(ctx context.Context, obj interface{}) (vo.DeleteProjectResourceReq, error) {
	var it vo.DeleteProjectResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceIds"))
			it.ResourceIds, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "folderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("folderId"))
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteResourceReq(ctx context.Context, obj interface{}) (vo.DeleteResourceReq, error) {
	var it vo.DeleteResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteUserOrganizationReq(ctx context.Context, obj interface{}) (vo.DeleteUserOrganizationReq, error) {
	var it vo.DeleteUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentListReq(ctx context.Context, obj interface{}) (vo.DepartmentListReq, error) {
	var it vo.DepartmentListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isTop":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isTop"))
			it.IsTop, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "showHiding":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("showHiding"))
			it.ShowHiding, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "departmentIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("departmentIds"))
			it.DepartmentIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentMemberListReq(ctx context.Context, obj interface{}) (vo.DepartmentMemberListReq, error) {
	var it vo.DepartmentMemberListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "departmentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("departmentId"))
			it.DepartmentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentMembersListReq(ctx context.Context, obj interface{}) (vo.DepartmentMembersListReq, error) {
	var it vo.DepartmentMembersListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userIds"))
			it.UserIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "excludeProjectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("excludeProjectId"))
			it.ExcludeProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relationType"))
			it.RelationType, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEveryPermission(ctx context.Context, obj interface{}) (vo.EveryPermission, error) {
	var it vo.EveryPermission
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "permissionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("permissionId"))
			it.PermissionID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operationIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("operationIds"))
			it.OperationIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeiShuAuthReq(ctx context.Context, obj interface{}) (vo.FeiShuAuthReq, error) {
	var it vo.FeiShuAuthReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("codeType"))
			it.CodeType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetExportFieldsReq(ctx context.Context, obj interface{}) (vo.GetExportFieldsReq, error) {
	var it vo.GetExportFieldsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetFsProjectChatPushSettingsReq(ctx context.Context, obj interface{}) (vo.GetFsProjectChatPushSettingsReq, error) {
	var it vo.GetFsProjectChatPushSettingsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("chatId"))
			it.ChatID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetInviteCodeReq(ctx context.Context, obj interface{}) (vo.GetInviteCodeReq, error) {
	var it vo.GetInviteCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sourcePlatform":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourcePlatform"))
			it.SourcePlatform, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetInviteInfoReq(ctx context.Context, obj interface{}) (vo.GetInviteInfoReq, error) {
	var it vo.GetInviteInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "inviteCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("inviteCode"))
			it.InviteCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetIssueViewListReq(ctx context.Context, obj interface{}) (vo.GetIssueViewListReq, error) {
	var it vo.GetIssueViewListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ids"))
			it.Ids, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "viewName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("viewName"))
			it.ViewName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isPrivate"))
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectObjectTypeId"))
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortType"))
			it.SortType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
			it.Size, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetIssueWorkHoursInfoReq(ctx context.Context, obj interface{}) (vo.GetIssueWorkHoursInfoReq, error) {
	var it vo.GetIssueWorkHoursInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetMQTTChannelKeyReq(ctx context.Context, obj interface{}) (vo.GetMQTTChannelKeyReq, error) {
	var it vo.GetMQTTChannelKeyReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channelType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("channelType"))
			it.ChannelType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("appId"))
			it.AppID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetProjectMainChatIdReq(ctx context.Context, obj interface{}) (vo.GetProjectMainChatIDReq, error) {
	var it vo.GetProjectMainChatIDReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetWorkHourStatisticReq(ctx context.Context, obj interface{}) (vo.GetWorkHourStatisticReq, error) {
	var it vo.GetWorkHourStatisticReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectIds"))
			it.ProjectIds, err = ec.unmarshalOInt642ᚕᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueIds"))
			it.IssueIds, err = ec.unmarshalOInt642ᚕᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueStatus"))
			it.IssueStatus, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "issuePriorities":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issuePriorities"))
			it.IssuePriorities, err = ec.unmarshalOInt642ᚕᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "workerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("workerIds"))
			it.WorkerIds, err = ec.unmarshalOInt642ᚕᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "showResigned":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("showResigned"))
			it.ShowResigned, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
			it.Size, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHomeIssueInfoReq(ctx context.Context, obj interface{}) (vo.HomeIssueInfoReq, error) {
	var it vo.HomeIssueInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "relatedType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relatedType"))
			it.RelatedType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orderType"))
			it.OrderType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusList":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusList"))
			it.StatusList, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "trulyStatusIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("trulyStatusIds"))
			it.TrulyStatusIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isOverdue":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isOverdue"))
			it.IsOverdue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "processStatusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("processStatusId"))
			it.ProcessStatusID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerIds"))
			it.OwnerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creatorIds"))
			it.CreatorIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("participantIds"))
			it.ParticipantIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("followerIds"))
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeScope":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("timeScope"))
			it.TimeScope, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchCond":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("searchCond"))
			it.SearchCond, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planType"))
			it.PlanType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectObjectTypeId"))
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectObjectTypeIds"))
			it.ProjectObjectTypeIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("priorityId"))
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("priorityIds"))
			it.PriorityIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "combinedType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("combinedType"))
			it.CombinedType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueTagId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueTagId"))
			it.IssueTagID, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFiling":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isFiling"))
			it.IsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueIsFiling":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueIsFiling"))
			it.IssueIsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastUpdateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("lastUpdateTime"))
			it.LastUpdateTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "enableParentIssues":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enableParentIssues"))
			it.EnableParentIssues, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("periodStartTime"))
			it.PeriodStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("periodEndTime"))
			it.PeriodEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isParentBeforeChid":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isParentBeforeChid"))
			it.IsParentBeforeChid, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueObjectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueObjectId"))
			it.IssueObjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueObjectIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueObjectIds"))
			it.IssueObjectIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "issuePropertyId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issuePropertyId"))
			it.IssuePropertyID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issuePropertyIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issuePropertyIds"))
			it.IssuePropertyIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueSourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueSourceId"))
			it.IssueSourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueSourceIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueSourceIds"))
			it.IssueSourceIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueIds"))
			it.IssueIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "groupType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("groupType"))
			it.GroupType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueIdForBefore":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueIdForBefore"))
			it.IssueIDForBefore, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueIdForAfter":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueIdForAfter"))
			it.IssueIDForAfter, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditorIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("auditorIds"))
			it.AuditorIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "conds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("conds"))
			it.Conds, err = ec.unmarshalOCondsData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondsDataᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "condOrder":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("condOrder"))
			it.CondOrder, err = ec.unmarshalOCondOrder2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondOrderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessConds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("lessConds"))
			it.LessConds, err = ec.unmarshalOLessCondsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessCondsData(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessOrder":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("lessOrder"))
			it.LessOrder, err = ec.unmarshalOLessOrder2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessOrderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isOnlyPolaris":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isOnlyPolaris"))
			it.IsOnlyPolaris, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerChangeTimeStart":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerChangeTimeStart"))
			it.OwnerChangeTimeStart, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerChangeTimeEnd":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerChangeTimeEnd"))
			it.OwnerChangeTimeEnd, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "currentIssueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("currentIssueId"))
			it.CurrentIssueID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "menuAppId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("menuAppId"))
			it.MenuAppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tableId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
			it.TableID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filterColumns":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("filterColumns"))
			it.FilterColumns, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInitFeiShuAccountReq(ctx context.Context, obj interface{}) (vo.InitFeiShuAccountReq, error) {
	var it vo.InitFeiShuAccountReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "codeToken":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("codeToken"))
			it.CodeToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInviteUserData(ctx context.Context, obj interface{}) (vo.InviteUserData, error) {
	var it vo.InviteUserData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueAssignRankReq(ctx context.Context, obj interface{}) (vo.IssueAssignRankReq, error) {
	var it vo.IssueAssignRankReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "rankTop":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("rankTop"))
			it.RankTop, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueChildren(ctx context.Context, obj interface{}) (vo.IssueChildren, error) {
	var it vo.IssueChildren
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerId"))
			it.OwnerID, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("typeId"))
			it.TypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tableId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
			it.TableID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("priorityId"))
			it.PriorityID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planWorkHour":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planWorkHour"))
			it.PlanWorkHour, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusId"))
			it.StatusID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOIssueTagReqInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfoᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("followerIds"))
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceIds"))
			it.ResourceIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueObjectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueObjectId"))
			it.IssueObjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueSourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueSourceId"))
			it.IssueSourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issuePropertyId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issuePropertyId"))
			it.IssuePropertyID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("children"))
			it.Children, err = ec.unmarshalOIssueChildren2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx, v)
			if err != nil {
				return it, err
			}
		case "customField":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customField"))
			it.CustomField, err = ec.unmarshalOUpdateIssueCustionFieldData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueCustionFieldDataᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditorIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("auditorIds"))
			it.AuditorIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessCreateIssueReq":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("lessCreateIssueReq"))
			it.LessCreateIssueReq, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		case "extraInfo":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("extraInfo"))
			it.ExtraInfo, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueInfoNotDeleteReq(ctx context.Context, obj interface{}) (vo.IssueInfoNotDeleteReq, error) {
	var it vo.IssueInfoNotDeleteReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueStatusTypeStatReq(ctx context.Context, obj interface{}) (vo.IssueStatusTypeStatReq, error) {
	var it vo.IssueStatusTypeStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relationType"))
			it.RelationType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueTagReqInfo(ctx context.Context, obj interface{}) (vo.IssueTagReqInfo, error) {
	var it vo.IssueTagReqInfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueTagsReq(ctx context.Context, obj interface{}) (vo.IssueTagsReq, error) {
	var it vo.IssueTagsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationInfoReq(ctx context.Context, obj interface{}) (vo.IterationInfoReq, error) {
	var it vo.IterationInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationListReq(ctx context.Context, obj interface{}) (vo.IterationListReq, error) {
	var it vo.IterationListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusType"))
			it.StatusType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderBy":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orderBy"))
			it.OrderBy, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationStatReq(ctx context.Context, obj interface{}) (vo.IterationStatReq, error) {
	var it vo.IterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationStatusTypeStatReq(ctx context.Context, obj interface{}) (vo.IterationStatusTypeStatReq, error) {
	var it vo.IterationStatusTypeStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJoinOrgByInviteCodeReq(ctx context.Context, obj interface{}) (vo.JoinOrgByInviteCodeReq, error) {
	var it vo.JoinOrgByInviteCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "inviteCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("inviteCode"))
			it.InviteCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsApiSignReq(ctx context.Context, obj interface{}) (vo.JsAPISignReq, error) {
	var it vo.JsAPISignReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "corpId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("corpId"))
			it.CorpID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLessCondsData(ctx context.Context, obj interface{}) (vo.LessCondsData, error) {
	var it vo.LessCondsData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fieldType"))
			it.FieldType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("values"))
			it.Values, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "column":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "left":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("left"))
			it.Left, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "right":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("right"))
			it.Right, err = ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "conds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("conds"))
			it.Conds, err = ec.unmarshalOLessCondsData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessCondsDataᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "noPretreat":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("noPretreat"))
			it.NoPretreat, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLessOrder(ctx context.Context, obj interface{}) (vo.LessOrder, error) {
	var it vo.LessOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("asc"))
			it.Asc, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "column":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewPredicateWorkHour(ctx context.Context, obj interface{}) (vo.NewPredicateWorkHour, error) {
	var it vo.NewPredicateWorkHour
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "workerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("workerId"))
			it.WorkerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "needTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("needTime"))
			it.NeedTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgUserListReq(ctx context.Context, obj interface{}) (vo.OrgUserListReq, error) {
	var it vo.OrgUserListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "checkStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("checkStatus"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "useStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("useStatus"))
			it.UseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationInfoReq(ctx context.Context, obj interface{}) (vo.OrganizationInfoReq, error) {
	var it vo.OrganizationInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOssPostPolicyReq(ctx context.Context, obj interface{}) (vo.OssPostPolicyReq, error) {
	var it vo.OssPostPolicyReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policyType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("policyType"))
			it.PolicyType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("appId"))
			it.AppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "folderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("folderId"))
			it.FolderID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "columnId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("columnId"))
			it.ColumnID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tableId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
			it.TableID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectAttachmentInfoReq(ctx context.Context, obj interface{}) (vo.ProjectAttachmentInfoReq, error) {
	var it vo.ProjectAttachmentInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("appId"))
			it.AppID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileType"))
			it.FileType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectAttachmentReq(ctx context.Context, obj interface{}) (vo.ProjectAttachmentReq, error) {
	var it vo.ProjectAttachmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileType"))
			it.FileType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyWord":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("keyWord"))
			it.KeyWord, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectDayStatReq(ctx context.Context, obj interface{}) (vo.ProjectDayStatReq, error) {
	var it vo.ProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectFolderReq(ctx context.Context, obj interface{}) (vo.ProjectFolderReq, error) {
	var it vo.ProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectInfoReq(ctx context.Context, obj interface{}) (vo.ProjectInfoReq, error) {
	var it vo.ProjectInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectMemberIdListReq(ctx context.Context, obj interface{}) (vo.ProjectMemberIDListReq, error) {
	var it vo.ProjectMemberIDListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "includeAdmin":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeAdmin"))
			it.IncludeAdmin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectResourceReq(ctx context.Context, obj interface{}) (vo.ProjectResourceReq, error) {
	var it vo.ProjectResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("folderId"))
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectsReq(ctx context.Context, obj interface{}) (vo.ProjectsReq, error) {
	var it vo.ProjectsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectTypeId"))
			it.ProjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("priorityId"))
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFiling":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isFiling"))
			it.IsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusType"))
			it.StatusType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creatorIds"))
			it.CreatorIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerIds"))
			it.OwnerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "relateType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relateType"))
			it.RelateType, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "participants":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("participants"))
			it.Participants, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantDeptIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("participantDeptIds"))
			it.ParticipantDeptIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "followers":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("followers"))
			it.Followers, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isMember":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isMember"))
			it.IsMember, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectIds"))
			it.ProjectIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReadNoticeReq(ctx context.Context, obj interface{}) (vo.ReadNoticeReq, error) {
	var it vo.ReadNoticeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecoverRecycleBinRecordReq(ctx context.Context, obj interface{}) (vo.RecoverRecycleBinRecordReq, error) {
	var it vo.RecoverRecycleBinRecordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "recycleId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("recycleId"))
			it.RecycleID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relationId"))
			it.RelationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relationType"))
			it.RelationType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecycleBinListReq(ctx context.Context, obj interface{}) (vo.RecycleBinListReq, error) {
	var it vo.RecycleBinListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relationType"))
			it.RelationType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetPasswordReq(ctx context.Context, obj interface{}) (vo.ResetPasswordReq, error) {
	var it vo.ResetPasswordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "currentPassword":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("currentPassword"))
			it.CurrentPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "newPassword":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("newPassword"))
			it.NewPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRetrievePasswordReq(ctx context.Context, obj interface{}) (vo.RetrievePasswordReq, error) {
	var it vo.RetrievePasswordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "username":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "newPassword":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("newPassword"))
			it.NewPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendAuthCodeReq(ctx context.Context, obj interface{}) (vo.SendAuthCodeReq, error) {
	var it vo.SendAuthCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "authType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authType"))
			it.AuthType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressType"))
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("captchaId"))
			it.CaptchaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaPassword":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("captchaPassword"))
			it.CaptchaPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "yidunValidate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("yidunValidate"))
			it.YidunValidate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendSmsLoginCodeReq(ctx context.Context, obj interface{}) (vo.SendSmsLoginCodeReq, error) {
	var it vo.SendSmsLoginCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "phoneNumber":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("captchaId"))
			it.CaptchaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaPassword":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("captchaPassword"))
			it.CaptchaPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "yidunValidate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("yidunValidate"))
			it.YidunValidate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetPasswordReq(ctx context.Context, obj interface{}) (vo.SetPasswordReq, error) {
	var it vo.SetPasswordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "password":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetUserJoinIssueReq(ctx context.Context, obj interface{}) (vo.SetUserJoinIssueReq, error) {
	var it vo.SetUserJoinIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userId"))
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStatusTimeInfoReq(ctx context.Context, obj interface{}) (vo.StatusTimeInfoReq, error) {
	var it vo.StatusTimeInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "statusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusId"))
			it.StatusID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSwitchUserOrganizationReq(ctx context.Context, obj interface{}) (vo.SwitchUserOrganizationReq, error) {
	var it vo.SwitchUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrendReq(ctx context.Context, obj interface{}) (vo.TrendReq, error) {
	var it vo.TrendReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "lastTrendId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("lastTrendId"))
			it.LastTrendID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "objType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("objType"))
			it.ObjType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "objId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("objId"))
			it.ObjID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("operId"))
			it.OperID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
			it.Size, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orderType"))
			it.OrderType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnbindLoginNameReq(ctx context.Context, obj interface{}) (vo.UnbindLoginNameReq, error) {
	var it vo.UnbindLoginNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "addressType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressType"))
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authCode"))
			it.AuthCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAppInfoReq(ctx context.Context, obj interface{}) (vo.UpdateAppInfoReq, error) {
	var it vo.UpdateAppInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret1":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("secret1"))
			it.Secret1, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret2":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("secret2"))
			it.Secret2, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("checkStatus"))
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDepartmentReq(ctx context.Context, obj interface{}) (vo.UpdateDepartmentReq, error) {
	var it vo.UpdateDepartmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHide":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isHide"))
			it.IsHide, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourceChannel"))
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFsProjectChatPushSettingsOfTableParam(ctx context.Context, obj interface{}) (vo.UpdateFsProjectChatPushSettingsOfTableParam, error) {
	var it vo.UpdateFsProjectChatPushSettingsOfTableParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("appId"))
			it.AppID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tableId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tableId"))
			it.TableID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFsProjectChatPushSettingsReq(ctx context.Context, obj interface{}) (vo.UpdateFsProjectChatPushSettingsReq, error) {
	var it vo.UpdateFsProjectChatPushSettingsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("chatId"))
			it.ChatID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tables":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tables"))
			it.Tables, err = ec.unmarshalOUpdateFsProjectChatPushSettingsOfTableParam2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateFsProjectChatPushSettingsOfTableParam(ctx, v)
			if err != nil {
				return it, err
			}
		case "createIssue":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createIssue"))
			it.CreateIssue, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createIssueComment":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createIssueComment"))
			it.CreateIssueComment, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateIssueCase":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateIssueCase"))
			it.UpdateIssueCase, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifyColumnsOfSend":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("modifyColumnsOfSend"))
			it.ModifyColumnsOfSend, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueAndIssueRelateReq(ctx context.Context, obj interface{}) (vo.UpdateIssueAndIssueRelateReq, error) {
	var it vo.UpdateIssueAndIssueRelateReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "addRelateIssueIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addRelateIssueIds"))
			it.AddRelateIssueIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "delRelateIssueIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("delRelateIssueIds"))
			it.DelRelateIssueIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueCustionFieldData(ctx context.Context, obj interface{}) (vo.UpdateIssueCustionFieldData, error) {
	var it vo.UpdateIssueCustionFieldData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fieldId"))
			it.FieldID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalNAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssuePropertyReq(ctx context.Context, obj interface{}) (vo.UpdateIssuePropertyReq, error) {
	var it vo.UpdateIssuePropertyReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("langCode"))
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectObjectTypeId"))
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueStatusReq(ctx context.Context, obj interface{}) (vo.UpdateIssueStatusReq, error) {
	var it vo.UpdateIssueStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nextStatusId"))
			it.NextStatusID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nextStatusType"))
			it.NextStatusType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "needModifyChildStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("needModifyChildStatus"))
			it.NeedModifyChildStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueViewReq(ctx context.Context, obj interface{}) (vo.UpdateIssueViewReq, error) {
	var it vo.UpdateIssueViewReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "config":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("config"))
			it.Config, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isPrivate"))
			it.IsPrivate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "viewName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("viewName"))
			it.ViewName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sort"))
			it.Sort, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectObjectTypeId"))
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueWorkHoursReq(ctx context.Context, obj interface{}) (vo.UpdateIssueWorkHoursReq, error) {
	var it vo.UpdateIssueWorkHoursReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueWorkHoursId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWorkHoursId"))
			it.IssueWorkHoursID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "needTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("needTime"))
			it.NeedTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "workerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("workerId"))
			it.WorkerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remainTimeCalType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remainTimeCalType"))
			it.RemainTimeCalType, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remainTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remainTime"))
			it.RemainTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationReq(ctx context.Context, obj interface{}) (vo.UpdateIterationReq, error) {
	var it vo.UpdateIterationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationSortReq(ctx context.Context, obj interface{}) (vo.UpdateIterationSortReq, error) {
	var it vo.UpdateIterationSortReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("beforeId"))
			it.BeforeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "afterId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("afterId"))
			it.AfterID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationStatReq(ctx context.Context, obj interface{}) (vo.UpdateIterationStatReq, error) {
	var it vo.UpdateIterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueCount"))
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWaitCount"))
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueRunningCount"))
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueEndCount"))
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandCount"))
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandWaitCount"))
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandRunningCount"))
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandEndCount"))
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointCount"))
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointWaitCount"))
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointRunningCount"))
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointEndCount"))
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskCount"))
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskWaitCount"))
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskRunningCount"))
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskEndCount"))
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugCount"))
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugWaitCount"))
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugRunningCount"))
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugEndCount"))
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskCount"))
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskWaitCount"))
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskRunningCount"))
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskEndCount"))
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ext"))
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statDate"))
			it.StatDate, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationStatusReq(ctx context.Context, obj interface{}) (vo.UpdateIterationStatusReq, error) {
	var it vo.UpdateIterationStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nextStatusId"))
			it.NextStatusID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeStatusEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("beforeStatusEndTime"))
			it.BeforeStatusEndTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nextStatusStartTime"))
			it.NextStatusStartTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationStatusTimeReq(ctx context.Context, obj interface{}) (vo.UpdateIterationStatusTimeReq, error) {
	var it vo.UpdateIterationStatusTimeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "iterationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("iterationId"))
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusUpdate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusUpdate"))
			it.StatusUpdate, err = ec.unmarshalNStatusTimeInfoReq2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfoReqᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMultiIssueWorkHoursReq(ctx context.Context, obj interface{}) (vo.UpdateMultiIssueWorkHoursReq, error) {
	var it vo.UpdateMultiIssueWorkHoursReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalIssueWorkHourRecord":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("totalIssueWorkHourRecord"))
			it.TotalIssueWorkHourRecord, err = ec.unmarshalNUpdateOneMultiWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOneMultiWorkHourRecord(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWorkHourRecords":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWorkHourRecords"))
			it.IssueWorkHourRecords, err = ec.unmarshalOUpdateOneMultiWorkHourRecord2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOneMultiWorkHourRecord(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOneMultiWorkHourRecord(ctx context.Context, obj interface{}) (vo.UpdateOneMultiWorkHourRecord, error) {
	var it vo.UpdateOneMultiWorkHourRecord
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "workerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("workerId"))
			it.WorkerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "needTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("needTime"))
			it.NeedTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startTime"))
			it.StartTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endTime"))
			it.EndTime, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("desc"))
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrgMemberCheckStatusReq(ctx context.Context, obj interface{}) (vo.UpdateOrgMemberCheckStatusReq, error) {
	var it vo.UpdateOrgMemberCheckStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "memberIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("memberIds"))
			it.MemberIds, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("checkStatus"))
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrgMemberStatusReq(ctx context.Context, obj interface{}) (vo.UpdateOrgMemberStatusReq, error) {
	var it vo.UpdateOrgMemberStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "memberIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("memberIds"))
			it.MemberIds, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrganizationSettingsReq(ctx context.Context, obj interface{}) (vo.UpdateOrganizationSettingsReq, error) {
	var it vo.UpdateOrganizationSettingsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgName"))
			it.OrgName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industryId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("industryId"))
			it.IndustryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "scale":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scale"))
			it.Scale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("countryId"))
			it.CountryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "provinceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("provinceId"))
			it.ProvinceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cityId"))
			it.CityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logoUrl":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logoUrl"))
			it.LogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePermissionOperationReq(ctx context.Context, obj interface{}) (vo.UpdatePermissionOperationReq, error) {
	var it vo.UpdatePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("permissionId"))
			it.PermissionID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("langCode"))
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "operationCodes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("operationCodes"))
			it.OperationCodes, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isShow"))
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePermissionReq(ctx context.Context, obj interface{}) (vo.UpdatePermissionReq, error) {
	var it vo.UpdatePermissionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("langCode"))
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("path"))
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isShow"))
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectDayStatReq(ctx context.Context, obj interface{}) (vo.UpdateProjectDayStatReq, error) {
	var it vo.UpdateProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueCount"))
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueWaitCount"))
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueRunningCount"))
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueEndCount"))
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandCount"))
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandWaitCount"))
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandRunningCount"))
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("demandEndCount"))
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointCount"))
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointWaitCount"))
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointRunningCount"))
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("storyPointEndCount"))
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskCount"))
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskWaitCount"))
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskRunningCount"))
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskEndCount"))
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugCount"))
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugWaitCount"))
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugRunningCount"))
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bugEndCount"))
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskCount"))
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskWaitCount"))
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskRunningCount"))
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("testtaskEndCount"))
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ext"))
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statDate"))
			it.StatDate, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectDetailReq(ctx context.Context, obj interface{}) (vo.UpdateProjectDetailReq, error) {
	var it vo.UpdateProjectDetailReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("notice"))
			it.Notice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEnableWorkHours":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isEnableWorkHours"))
			it.IsEnableWorkHours, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncOutCalendar":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isSyncOutCalendar"))
			it.IsSyncOutCalendar, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectFileResourceReq(ctx context.Context, obj interface{}) (vo.UpdateProjectFileResourceReq, error) {
	var it vo.UpdateProjectFileResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("appId"))
			it.AppID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileName"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileSuffix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileSuffix"))
			it.FileSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileSize"))
			it.FileSize, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectFolderReq(ctx context.Context, obj interface{}) (vo.UpdateProjectFolderReq, error) {
	var it vo.UpdateProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("folderId"))
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentId"))
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileType"))
			it.FileType, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectReq(ctx context.Context, obj interface{}) (vo.UpdateProjectReq, error) {
	var it vo.UpdateProjectReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "preCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("preCode"))
			it.PreCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("owner"))
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerIds"))
			it.OwnerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("priorityId"))
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planStartTime"))
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("planEndTime"))
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publicStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("publicStatus"))
			it.PublicStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePath":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourcePath"))
			it.ResourcePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceType"))
			it.ResourceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("memberIds"))
			it.MemberIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberForDepartmentId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("memberForDepartmentId"))
			it.MemberForDepartmentID, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAllMember":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isAllMember"))
			it.IsAllMember, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("followerIds"))
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncOutCalendar":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isSyncOutCalendar"))
			it.IsSyncOutCalendar, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "syncCalendarStatusList":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("syncCalendarStatusList"))
			it.SyncCalendarStatusList, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCreateFsChat":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isCreateFsChat"))
			it.IsCreateFsChat, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "privacyStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("privacyStatus"))
			it.PrivacyStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectResourceFolderReq(ctx context.Context, obj interface{}) (vo.UpdateProjectResourceFolderReq, error) {
	var it vo.UpdateProjectResourceFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "currentFolderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("currentFolderId"))
			it.CurrentFolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetFolderId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetFolderId"))
			it.TargetFolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceIds"))
			it.ResourceIds, err = ec.unmarshalNInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectResourceNameReq(ctx context.Context, obj interface{}) (vo.UpdateProjectResourceNameReq, error) {
	var it vo.UpdateProjectResourceNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileName"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileSuffix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fileSuffix"))
			it.FileSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectStatusReq(ctx context.Context, obj interface{}) (vo.UpdateProjectStatusReq, error) {
	var it vo.UpdateProjectStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nextStatusId"))
			it.NextStatusID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateResourceReq(ctx context.Context, obj interface{}) (vo.UpdateResourceReq, error) {
	var it vo.UpdateResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("path"))
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "suffix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suffix"))
			it.Suffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "md5":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("md5"))
			it.Md5, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("size"))
			it.Size, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserConfigReq(ctx context.Context, obj interface{}) (vo.UpdateUserConfigReq, error) {
	var it vo.UpdateUserConfigReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dailyReportMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dailyReportMessageStatus"))
			it.DailyReportMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerRangeStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ownerRangeStatus"))
			it.OwnerRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantRangeStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("participantRangeStatus"))
			it.ParticipantRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "attentionRangeStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("attentionRangeStatus"))
			it.AttentionRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createRangeStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createRangeStatus"))
			it.CreateRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "collaborateMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("collaborateMessageStatus"))
			it.CollaborateMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remindMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remindMessageStatus"))
			it.RemindMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "commentAtMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("commentAtMessageStatus"))
			it.CommentAtMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifyMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("modifyMessageStatus"))
			it.ModifyMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("relationMessageStatus"))
			it.RelationMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "dailyProjectReportMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dailyProjectReportMessageStatus"))
			it.DailyProjectReportMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remindExpiring":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remindExpiring"))
			it.RemindExpiring, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserDefaultProjectConfigReq(ctx context.Context, obj interface{}) (vo.UpdateUserDefaultProjectConfigReq, error) {
	var it vo.UpdateUserDefaultProjectConfigReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "defaultProjectId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("defaultProjectId"))
			it.DefaultProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultProjectObjectTypeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("defaultProjectObjectTypeId"))
			it.DefaultProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInfoReq(ctx context.Context, obj interface{}) (vo.UpdateUserInfoReq, error) {
	var it vo.UpdateUserInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatar":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("avatar"))
			it.Avatar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("birthday"))
			it.Birthday, err = ec.unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remindBindPhone":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remindBindPhone"))
			it.RemindBindPhone, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserOrganizationReq(ctx context.Context, obj interface{}) (vo.UpdateUserOrganizationReq, error) {
	var it vo.UpdateUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgId"))
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userId"))
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("checkStatus"))
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "useStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("useStatus"))
			it.UseStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusChangerId"))
			it.StatusChangerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangeTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("statusChangeTime"))
			it.StatusChangeTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditorId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("auditorId"))
			it.AuditorID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("auditTime"))
			it.AuditTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creator"))
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createTime"))
			it.CreateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updator"))
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateTime"))
			it.UpdateTime, err = ec.unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("version"))
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDelete"))
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserPcConfigReq(ctx context.Context, obj interface{}) (vo.UpdateUserPcConfigReq, error) {
	var it vo.UpdateUserPcConfigReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "pcNoticeOpenStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pcNoticeOpenStatus"))
			it.PcNoticeOpenStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcIssueRemindMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pcIssueRemindMessageStatus"))
			it.PcIssueRemindMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcOrgMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pcOrgMessageStatus"))
			it.PcOrgMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcProjectMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pcProjectMessageStatus"))
			it.PcProjectMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcCommentAtMessageStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pcCommentAtMessageStatus"))
			it.PcCommentAtMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("updateFields"))
			it.UpdateFields, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUrgeAuditIssueReq(ctx context.Context, obj interface{}) (vo.UrgeAuditIssueReq, error) {
	var it vo.UrgeAuditIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isNeedAtIssueOwner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isNeedAtIssueOwner"))
			it.IsNeedAtIssueOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "urgeText":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("urgeText"))
			it.UrgeText, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUrgeIssueReq(ctx context.Context, obj interface{}) (vo.UrgeIssueReq, error) {
	var it vo.UrgeIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isNeedAtIssueOwner":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isNeedAtIssueOwner"))
			it.IsNeedAtIssueOwner, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "urgeText":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("urgeText"))
			it.UrgeText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginReq(ctx context.Context, obj interface{}) (vo.UserLoginReq, error) {
	var it vo.UserLoginReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "loginType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("loginType"))
			it.LoginType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "loginName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("loginName"))
			it.LoginName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("inviteCode"))
			it.InviteCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourceChannel"))
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourcePlatform":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourcePlatform"))
			it.SourcePlatform, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeToken":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("codeToken"))
			it.CodeToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRegisterReq(ctx context.Context, obj interface{}) (vo.UserRegisterReq, error) {
	var it vo.UserRegisterReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userName"))
			it.UserName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registerType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("registerType"))
			it.RegisterType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authCode"))
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourceChannel"))
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourcePlatform":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sourcePlatform"))
			it.SourcePlatform, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputViewAuditIssueReq(ctx context.Context, obj interface{}) (vo.ViewAuditIssueReq, error) {
	var it vo.ViewAuditIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWithdrawIssueReq(ctx context.Context, obj interface{}) (vo.WithdrawIssueReq, error) {
	var it vo.WithdrawIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueId"))
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputfsDocumentListReq(ctx context.Context, obj interface{}) (vo.FsDocumentListReq, error) {
	var it vo.FsDocumentListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "searchKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("searchKey"))
			it.SearchKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var actualListItemImplementors = []string{"ActualListItem"}

func (ec *executionContext) _ActualListItem(ctx context.Context, sel ast.SelectionSet, obj *vo.ActualListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actualListItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActualListItem")
		case "name":
			out.Values[i] = ec._ActualListItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualWorkHourDateList":
			out.Values[i] = ec._ActualListItem_actualWorkHourDateList(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var actualWorkHourDateItemImplementors = []string{"ActualWorkHourDateItem"}

func (ec *executionContext) _ActualWorkHourDateItem(ctx context.Context, sel ast.SelectionSet, obj *vo.ActualWorkHourDateItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actualWorkHourDateItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActualWorkHourDateItem")
		case "date":
			out.Values[i] = ec._ActualWorkHourDateItem_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workHour":
			out.Values[i] = ec._ActualWorkHourDateItem_workHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addIssueAttachmentFsRespImplementors = []string{"AddIssueAttachmentFsResp"}

func (ec *executionContext) _AddIssueAttachmentFsResp(ctx context.Context, sel ast.SelectionSet, obj *vo.AddIssueAttachmentFsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addIssueAttachmentFsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddIssueAttachmentFsResp")
		case "resources":
			out.Values[i] = ec._AddIssueAttachmentFsResp_resources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appInfoImplementors = []string{"AppInfo"}

func (ec *executionContext) _AppInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.AppInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppInfo")
		case "id":
			out.Values[i] = ec._AppInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AppInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._AppInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secret1":
			out.Values[i] = ec._AppInfo_secret1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secret2":
			out.Values[i] = ec._AppInfo_secret2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._AppInfo_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkStatus":
			out.Values[i] = ec._AppInfo_checkStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._AppInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._AppInfo_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._AppInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._AppInfo_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._AppInfo_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._AppInfo_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._AppInfo_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appInfoListImplementors = []string{"AppInfoList"}

func (ec *executionContext) _AppInfoList(ctx context.Context, sel ast.SelectionSet, obj *vo.AppInfoList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appInfoListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppInfoList")
		case "total":
			out.Values[i] = ec._AppInfoList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._AppInfoList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applyScopesRespImplementors = []string{"ApplyScopesResp"}

func (ec *executionContext) _ApplyScopesResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ApplyScopesResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applyScopesRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplyScopesResp")
		case "thirdCode":
			out.Values[i] = ec._ApplyScopesResp_thirdCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdMsg":
			out.Values[i] = ec._ApplyScopesResp_thirdMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var archiveIssueBatchRespImplementors = []string{"ArchiveIssueBatchResp"}

func (ec *executionContext) _ArchiveIssueBatchResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ArchiveIssueBatchResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, archiveIssueBatchRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArchiveIssueBatchResp")
		case "successIssues":
			out.Values[i] = ec._ArchiveIssueBatchResp_successIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noAuthIssues":
			out.Values[i] = ec._ArchiveIssueBatchResp_noAuthIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var areaLinkageListRespImplementors = []string{"AreaLinkageListResp"}

func (ec *executionContext) _AreaLinkageListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.AreaLinkageListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, areaLinkageListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AreaLinkageListResp")
		case "list":
			out.Values[i] = ec._AreaLinkageListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var areaLinkageRespImplementors = []string{"AreaLinkageResp"}

func (ec *executionContext) _AreaLinkageResp(ctx context.Context, sel ast.SelectionSet, obj *vo.AreaLinkageResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, areaLinkageRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AreaLinkageResp")
		case "id":
			out.Values[i] = ec._AreaLinkageResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AreaLinkageResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cname":
			out.Values[i] = ec._AreaLinkageResp_cname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._AreaLinkageResp_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._AreaLinkageResp_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachmentImplementors = []string{"Attachment"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *vo.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "id":
			out.Values[i] = ec._Attachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Attachment_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._Attachment_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Attachment_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "officeUrl":
			out.Values[i] = ec._Attachment_officeUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pathCompressed":
			out.Values[i] = ec._Attachment_pathCompressed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Attachment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Attachment_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._Attachment_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._Attachment_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suffix":
			out.Values[i] = ec._Attachment_suffix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "md5":
			out.Values[i] = ec._Attachment_md5(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileType":
			out.Values[i] = ec._Attachment_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Attachment_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Attachment_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Attachment_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Attachment_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Attachment_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Attachment_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueList":
			out.Values[i] = ec._Attachment_issueList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachmentListImplementors = []string{"AttachmentList"}

func (ec *executionContext) _AttachmentList(ctx context.Context, sel ast.SelectionSet, obj *vo.AttachmentList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttachmentList")
		case "total":
			out.Values[i] = ec._AttachmentList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._AttachmentList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var basicShowSettingImplementors = []string{"BasicShowSetting"}

func (ec *executionContext) _BasicShowSetting(ctx context.Context, sel ast.SelectionSet, obj *vo.BasicShowSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, basicShowSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BasicShowSetting")
		case "workBenchShow":
			out.Values[i] = ec._BasicShowSetting_workBenchShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sideBarShow":
			out.Values[i] = ec._BasicShowSetting_sideBarShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mirrorStat":
			out.Values[i] = ec._BasicShowSetting_mirrorStat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var boolRespImplementors = []string{"BoolResp"}

func (ec *executionContext) _BoolResp(ctx context.Context, sel ast.SelectionSet, obj *vo.BoolResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, boolRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BoolResp")
		case "isTrue":
			out.Values[i] = ec._BoolResp_isTrue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var buildInfoDefineImplementors = []string{"BuildInfoDefine"}

func (ec *executionContext) _BuildInfoDefine(ctx context.Context, sel ast.SelectionSet, obj *vo.BuildInfoDefine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildInfoDefineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildInfoDefine")
		case "gitCommitLog":
			out.Values[i] = ec._BuildInfoDefine_gitCommitLog(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gitStatus":
			out.Values[i] = ec._BuildInfoDefine_gitStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "buildTime":
			out.Values[i] = ec._BuildInfoDefine_buildTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "buildGoVersion":
			out.Values[i] = ec._BuildInfoDefine_buildGoVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var changeListImplementors = []string{"ChangeList"}

func (ec *executionContext) _ChangeList(ctx context.Context, sel ast.SelectionSet, obj *vo.ChangeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, changeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChangeList")
		case "field":
			out.Values[i] = ec._ChangeList_field(ctx, field, obj)
		case "fieldName":
			out.Values[i] = ec._ChangeList_fieldName(ctx, field, obj)
		case "oldValue":
			out.Values[i] = ec._ChangeList_oldValue(ctx, field, obj)
		case "newValue":
			out.Values[i] = ec._ChangeList_newValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chatDataImplementors = []string{"ChatData"}

func (ec *executionContext) _ChatData(ctx context.Context, sel ast.SelectionSet, obj *vo.ChatData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatData")
		case "outChatId":
			out.Values[i] = ec._ChatData_outChatId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ChatData_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ChatData_description(ctx, field, obj)
		case "relationId":
			out.Values[i] = ec._ChatData_relationId(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._ChatData_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isMain":
			out.Values[i] = ec._ChatData_isMain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkIsEnableWorkHourRespImplementors = []string{"CheckIsEnableWorkHourResp"}

func (ec *executionContext) _CheckIsEnableWorkHourResp(ctx context.Context, sel ast.SelectionSet, obj *vo.CheckIsEnableWorkHourResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkIsEnableWorkHourRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckIsEnableWorkHourResp")
		case "isEnable":
			out.Values[i] = ec._CheckIsEnableWorkHourResp_isEnable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkSpecificScopeRespImplementors = []string{"CheckSpecificScopeResp"}

func (ec *executionContext) _CheckSpecificScopeResp(ctx context.Context, sel ast.SelectionSet, obj *vo.CheckSpecificScopeResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkSpecificScopeRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckSpecificScopeResp")
		case "hasPower":
			out.Values[i] = ec._CheckSpecificScopeResp_hasPower(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkTokenValidityRespImplementors = []string{"CheckTokenValidityResp"}

func (ec *executionContext) _CheckTokenValidityResp(ctx context.Context, sel ast.SelectionSet, obj *vo.CheckTokenValidityResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkTokenValidityRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckTokenValidityResp")
		case "id":
			out.Values[i] = ec._CheckTokenValidityResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._CheckTokenValidityResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customValueImplementors = []string{"CustomValue"}

func (ec *executionContext) _CustomValue(ctx context.Context, sel ast.SelectionSet, obj *vo.CustomValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomValue")
		case "id":
			out.Values[i] = ec._CustomValue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._CustomValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._CustomValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fieldType":
			out.Values[i] = ec._CustomValue_fieldType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fieldValue":
			out.Values[i] = ec._CustomValue_fieldValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isOrgField":
			out.Values[i] = ec._CustomValue_isOrgField(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._CustomValue_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._CustomValue_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._CustomValue_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteIssueBatchRespImplementors = []string{"DeleteIssueBatchResp"}

func (ec *executionContext) _DeleteIssueBatchResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteIssueBatchResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIssueBatchRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIssueBatchResp")
		case "successIssues":
			out.Values[i] = ec._DeleteIssueBatchResp_successIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noAuthIssues":
			out.Values[i] = ec._DeleteIssueBatchResp_noAuthIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remainChildrenIssues":
			out.Values[i] = ec._DeleteIssueBatchResp_remainChildrenIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectAttachmentRespImplementors = []string{"DeleteProjectAttachmentResp"}

func (ec *executionContext) _DeleteProjectAttachmentResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteProjectAttachmentResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProjectAttachmentRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectAttachmentResp")
		case "resourceIds":
			out.Values[i] = ec._DeleteProjectAttachmentResp_resourceIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectFolderRespImplementors = []string{"DeleteProjectFolderResp"}

func (ec *executionContext) _DeleteProjectFolderResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteProjectFolderResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProjectFolderRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectFolderResp")
		case "folderIds":
			out.Values[i] = ec._DeleteProjectFolderResp_folderIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectResourceRespImplementors = []string{"DeleteProjectResourceResp"}

func (ec *executionContext) _DeleteProjectResourceResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteProjectResourceResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProjectResourceRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectResourceResp")
		case "resourceIds":
			out.Values[i] = ec._DeleteProjectResourceResp_resourceIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentImplementors = []string{"Department"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *vo.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "id":
			out.Values[i] = ec._Department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Department_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Department_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Department_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Department_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Department_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Department_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isHide":
			out.Values[i] = ec._Department_isHide(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceChannel":
			out.Values[i] = ec._Department_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Department_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Department_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentListImplementors = []string{"DepartmentList"}

func (ec *executionContext) _DepartmentList(ctx context.Context, sel ast.SelectionSet, obj *vo.DepartmentList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentList")
		case "total":
			out.Values[i] = ec._DepartmentList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._DepartmentList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMemberInfoImplementors = []string{"DepartmentMemberInfo"}

func (ec *executionContext) _DepartmentMemberInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.DepartmentMemberInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMemberInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMemberInfo")
		case "userId":
			out.Values[i] = ec._DepartmentMemberInfo_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._DepartmentMemberInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._DepartmentMemberInfo_namePy(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._DepartmentMemberInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._DepartmentMemberInfo_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unionId":
			out.Values[i] = ec._DepartmentMemberInfo_unionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departmentId":
			out.Values[i] = ec._DepartmentMemberInfo_departmentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserStatus":
			out.Values[i] = ec._DepartmentMemberInfo_orgUserStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMembersListRespImplementors = []string{"DepartmentMembersListResp"}

func (ec *executionContext) _DepartmentMembersListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DepartmentMembersListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMembersListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMembersListResp")
		case "total":
			out.Values[i] = ec._DepartmentMembersListResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._DepartmentMembersListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentSimpleInfoImplementors = []string{"DepartmentSimpleInfo"}

func (ec *executionContext) _DepartmentSimpleInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.DepartmentSimpleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentSimpleInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentSimpleInfo")
		case "id":
			out.Values[i] = ec._DepartmentSimpleInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._DepartmentSimpleInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userCount":
			out.Values[i] = ec._DepartmentSimpleInfo_userCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var exportIssueTemplateRespImplementors = []string{"ExportIssueTemplateResp"}

func (ec *executionContext) _ExportIssueTemplateResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ExportIssueTemplateResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, exportIssueTemplateRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExportIssueTemplateResp")
		case "url":
			out.Values[i] = ec._ExportIssueTemplateResp_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var exportWorkHourStatisticRespImplementors = []string{"ExportWorkHourStatisticResp"}

func (ec *executionContext) _ExportWorkHourStatisticResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ExportWorkHourStatisticResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, exportWorkHourStatisticRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExportWorkHourStatisticResp")
		case "url":
			out.Values[i] = ec._ExportWorkHourStatisticResp_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feiShuAuthCodeRespImplementors = []string{"FeiShuAuthCodeResp"}

func (ec *executionContext) _FeiShuAuthCodeResp(ctx context.Context, sel ast.SelectionSet, obj *vo.FeiShuAuthCodeResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feiShuAuthCodeRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeiShuAuthCodeResp")
		case "tenantKey":
			out.Values[i] = ec._FeiShuAuthCodeResp_tenantKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openId":
			out.Values[i] = ec._FeiShuAuthCodeResp_openId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._FeiShuAuthCodeResp_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "binding":
			out.Values[i] = ec._FeiShuAuthCodeResp_binding(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._FeiShuAuthCodeResp_refreshToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accessToken":
			out.Values[i] = ec._FeiShuAuthCodeResp_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":
			out.Values[i] = ec._FeiShuAuthCodeResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "codeToken":
			out.Values[i] = ec._FeiShuAuthCodeResp_codeToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._FeiShuAuthCodeResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._FeiShuAuthCodeResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outOrgName":
			out.Values[i] = ec._FeiShuAuthCodeResp_outOrgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._FeiShuAuthCodeResp_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._FeiShuAuthCodeResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._FeiShuAuthCodeResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feiShuAuthRespImplementors = []string{"FeiShuAuthResp"}

func (ec *executionContext) _FeiShuAuthResp(ctx context.Context, sel ast.SelectionSet, obj *vo.FeiShuAuthResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feiShuAuthRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeiShuAuthResp")
		case "token":
			out.Values[i] = ec._FeiShuAuthResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._FeiShuAuthResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._FeiShuAuthResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._FeiShuAuthResp_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._FeiShuAuthResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._FeiShuAuthResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tenantKey":
			out.Values[i] = ec._FeiShuAuthResp_tenantKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openId":
			out.Values[i] = ec._FeiShuAuthResp_openId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._FeiShuAuthResp_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var folderImplementors = []string{"Folder"}

func (ec *executionContext) _Folder(ctx context.Context, sel ast.SelectionSet, obj *vo.Folder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, folderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Folder")
		case "id":
			out.Values[i] = ec._Folder_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Folder_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Folder_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Folder_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Folder_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileType":
			out.Values[i] = ec._Folder_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Folder_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Folder_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._Folder_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Folder_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Folder_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Folder_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Folder_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Folder_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var folderListImplementors = []string{"FolderList"}

func (ec *executionContext) _FolderList(ctx context.Context, sel ast.SelectionSet, obj *vo.FolderList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, folderListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FolderList")
		case "total":
			out.Values[i] = ec._FolderList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._FolderList_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getAppTicketRespImplementors = []string{"GetAppTicketResp"}

func (ec *executionContext) _GetAppTicketResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetAppTicketResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getAppTicketRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetAppTicketResp")
		case "appId":
			out.Values[i] = ec._GetAppTicketResp_appId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appSecret":
			out.Values[i] = ec._GetAppTicketResp_appSecret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getExportFieldsRespImplementors = []string{"GetExportFieldsResp"}

func (ec *executionContext) _GetExportFieldsResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetExportFieldsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getExportFieldsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetExportFieldsResp")
		case "fields":
			out.Values[i] = ec._GetExportFieldsResp_fields(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getExportFieldsRespFieldsItemImplementors = []string{"GetExportFieldsRespFieldsItem"}

func (ec *executionContext) _GetExportFieldsRespFieldsItem(ctx context.Context, sel ast.SelectionSet, obj *vo.GetExportFieldsRespFieldsItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getExportFieldsRespFieldsItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetExportFieldsRespFieldsItem")
		case "fieldId":
			out.Values[i] = ec._GetExportFieldsRespFieldsItem_fieldId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._GetExportFieldsRespFieldsItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isMust":
			out.Values[i] = ec._GetExportFieldsRespFieldsItem_isMust(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defineType":
			out.Values[i] = ec._GetExportFieldsRespFieldsItem_defineType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getFsProjectChatPushSettingsOneChatImplementors = []string{"GetFsProjectChatPushSettingsOneChat"}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChat(ctx context.Context, sel ast.SelectionSet, obj *vo.GetFsProjectChatPushSettingsOneChat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getFsProjectChatPushSettingsOneChatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetFsProjectChatPushSettingsOneChat")
		case "tables":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChat_tables(ctx, field, obj)
		case "createIssue":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChat_createIssue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueComment":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChat_createIssueComment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueCase":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChat_updateIssueCase(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifyColumnsOfSend":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChat_modifyColumnsOfSend(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getFsProjectChatPushSettingsOneChatTablesImplementors = []string{"GetFsProjectChatPushSettingsOneChatTables"}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneChatTables(ctx context.Context, sel ast.SelectionSet, obj *vo.GetFsProjectChatPushSettingsOneChatTables) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getFsProjectChatPushSettingsOneChatTablesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetFsProjectChatPushSettingsOneChatTables")
		case "projectId":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChatTables_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tableId":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneChatTables_tableId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getFsProjectChatPushSettingsOneProOneTableImplementors = []string{"GetFsProjectChatPushSettingsOneProOneTable"}

func (ec *executionContext) _GetFsProjectChatPushSettingsOneProOneTable(ctx context.Context, sel ast.SelectionSet, obj *vo.GetFsProjectChatPushSettingsOneProOneTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getFsProjectChatPushSettingsOneProOneTableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetFsProjectChatPushSettingsOneProOneTable")
		case "tableIdStr":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneProOneTable_tableIdStr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssue":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneProOneTable_createIssue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueComment":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneProOneTable_createIssueComment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueCase":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneProOneTable_updateIssueCase(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifyColumnsOfSend":
			out.Values[i] = ec._GetFsProjectChatPushSettingsOneProOneTable_modifyColumnsOfSend(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getFsProjectChatPushSettingsRespImplementors = []string{"GetFsProjectChatPushSettingsResp"}

func (ec *executionContext) _GetFsProjectChatPushSettingsResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetFsProjectChatPushSettingsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getFsProjectChatPushSettingsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetFsProjectChatPushSettingsResp")
		case "outChatSettings":
			out.Values[i] = ec._GetFsProjectChatPushSettingsResp_outChatSettings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getInviteCodeRespImplementors = []string{"GetInviteCodeResp"}

func (ec *executionContext) _GetInviteCodeResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetInviteCodeResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getInviteCodeRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetInviteCodeResp")
		case "inviteCode":
			out.Values[i] = ec._GetInviteCodeResp_inviteCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expire":
			out.Values[i] = ec._GetInviteCodeResp_expire(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getInviteInfoRespImplementors = []string{"GetInviteInfoResp"}

func (ec *executionContext) _GetInviteInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetInviteInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getInviteInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetInviteInfoResp")
		case "orgId":
			out.Values[i] = ec._GetInviteInfoResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._GetInviteInfoResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviterId":
			out.Values[i] = ec._GetInviteInfoResp_inviterId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviterName":
			out.Values[i] = ec._GetInviteInfoResp_inviterName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getIssueViewListItemImplementors = []string{"GetIssueViewListItem"}

func (ec *executionContext) _GetIssueViewListItem(ctx context.Context, sel ast.SelectionSet, obj *vo.GetIssueViewListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getIssueViewListItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetIssueViewListItem")
		case "id":
			out.Values[i] = ec._GetIssueViewListItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._GetIssueViewListItem_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "config":
			out.Values[i] = ec._GetIssueViewListItem_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._GetIssueViewListItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPrivate":
			out.Values[i] = ec._GetIssueViewListItem_isPrivate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "viewName":
			out.Values[i] = ec._GetIssueViewListItem_viewName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._GetIssueViewListItem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._GetIssueViewListItem_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._GetIssueViewListItem_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getIssueWorkHoursInfoRespImplementors = []string{"GetIssueWorkHoursInfoResp"}

func (ec *executionContext) _GetIssueWorkHoursInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetIssueWorkHoursInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getIssueWorkHoursInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetIssueWorkHoursInfoResp")
		case "simplePredictWorkHour":
			out.Values[i] = ec._GetIssueWorkHoursInfoResp_simplePredictWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "predictWorkHourList":
			out.Values[i] = ec._GetIssueWorkHoursInfoResp_predictWorkHourList(ctx, field, obj)
		case "actualWorkHourList":
			out.Values[i] = ec._GetIssueWorkHoursInfoResp_actualWorkHourList(ctx, field, obj)
		case "actualNeedTimeTotal":
			out.Values[i] = ec._GetIssueWorkHoursInfoResp_actualNeedTimeTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getJsApiTicketRespImplementors = []string{"GetJsApiTicketResp"}

func (ec *executionContext) _GetJsApiTicketResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetJsAPITicketResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getJsApiTicketRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetJsApiTicketResp")
		case "ticket":
			out.Values[i] = ec._GetJsApiTicketResp_ticket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getMQTTChannelKeyRespImplementors = []string{"GetMQTTChannelKeyResp"}

func (ec *executionContext) _GetMQTTChannelKeyResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetMQTTChannelKeyResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getMQTTChannelKeyRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetMQTTChannelKeyResp")
		case "address":
			out.Values[i] = ec._GetMQTTChannelKeyResp_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._GetMQTTChannelKeyResp_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "port":
			out.Values[i] = ec._GetMQTTChannelKeyResp_port(ctx, field, obj)
		case "channel":
			out.Values[i] = ec._GetMQTTChannelKeyResp_channel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "key":
			out.Values[i] = ec._GetMQTTChannelKeyResp_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getPayRemindRespImplementors = []string{"GetPayRemindResp"}

func (ec *executionContext) _GetPayRemindResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetPayRemindResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getPayRemindRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetPayRemindResp")
		case "remindPayExpireMsg":
			out.Values[i] = ec._GetPayRemindResp_remindPayExpireMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getPersonalPermissionInfoRespImplementors = []string{"GetPersonalPermissionInfoResp"}

func (ec *executionContext) _GetPersonalPermissionInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetPersonalPermissionInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getPersonalPermissionInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetPersonalPermissionInfoResp")
		case "Data":
			out.Values[i] = ec._GetPersonalPermissionInfoResp_Data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getProjectMainChatIdRespImplementors = []string{"GetProjectMainChatIdResp"}

func (ec *executionContext) _GetProjectMainChatIdResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetProjectMainChatIDResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getProjectMainChatIdRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetProjectMainChatIdResp")
		case "chatId":
			out.Values[i] = ec._GetProjectMainChatIdResp_chatId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getWorkHourStatisticRespImplementors = []string{"GetWorkHourStatisticResp"}

func (ec *executionContext) _GetWorkHourStatisticResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetWorkHourStatisticResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getWorkHourStatisticRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetWorkHourStatisticResp")
		case "groupStatisticList":
			out.Values[i] = ec._GetWorkHourStatisticResp_groupStatisticList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetWorkHourStatisticResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "summary":
			out.Values[i] = ec._GetWorkHourStatisticResp_summary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getWorkHourStatisticSummaryImplementors = []string{"GetWorkHourStatisticSummary"}

func (ec *executionContext) _GetWorkHourStatisticSummary(ctx context.Context, sel ast.SelectionSet, obj *vo.GetWorkHourStatisticSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getWorkHourStatisticSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetWorkHourStatisticSummary")
		case "predictTotal":
			out.Values[i] = ec._GetWorkHourStatisticSummary_predictTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualTotal":
			out.Values[i] = ec._GetWorkHourStatisticSummary_actualTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueGroupImplementors = []string{"HomeIssueGroup"}

func (ec *executionContext) _HomeIssueGroup(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueGroup")
		case "id":
			out.Values[i] = ec._HomeIssueGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueGroup_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._HomeIssueGroup_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._HomeIssueGroup_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssueGroup_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeSpan":
			out.Values[i] = ec._HomeIssueGroup_timeSpan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fitTotal":
			out.Values[i] = ec._HomeIssueGroup_fitTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._HomeIssueGroup_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueInfoImplementors = []string{"HomeIssueInfo"}

func (ec *executionContext) _HomeIssueInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueInfo")
		case "issueId":
			out.Values[i] = ec._HomeIssueInfo_issueId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._HomeIssueInfo_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentInfo":
			out.Values[i] = ec._HomeIssueInfo_parentInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._HomeIssueInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAttach":
			out.Values[i] = ec._HomeIssueInfo_isAttach(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentIsMeetCondition":
			out.Values[i] = ec._HomeIssueInfo_parentIsMeetCondition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issue":
			out.Values[i] = ec._HomeIssueInfo_issue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project":
			out.Values[i] = ec._HomeIssueInfo_project(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._HomeIssueInfo_owner(ctx, field, obj)
		case "status":
			out.Values[i] = ec._HomeIssueInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":
			out.Values[i] = ec._HomeIssueInfo_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":
			out.Values[i] = ec._HomeIssueInfo_tags(ctx, field, obj)
		case "childsNum":
			out.Values[i] = ec._HomeIssueInfo_childsNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "childsFinishedNum":
			out.Values[i] = ec._HomeIssueInfo_childsFinishedNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeName":
			out.Values[i] = ec._HomeIssueInfo_projectObjectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allStatus":
			out.Values[i] = ec._HomeIssueInfo_allStatus(ctx, field, obj)
		case "sourceInfo":
			out.Values[i] = ec._HomeIssueInfo_sourceInfo(ctx, field, obj)
		case "propertyInfo":
			out.Values[i] = ec._HomeIssueInfo_propertyInfo(ctx, field, obj)
		case "typeInfo":
			out.Values[i] = ec._HomeIssueInfo_typeInfo(ctx, field, obj)
		case "iterationName":
			out.Values[i] = ec._HomeIssueInfo_iterationName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "followerInfos":
			out.Values[i] = ec._HomeIssueInfo_followerInfos(ctx, field, obj)
		case "relateIssueCount":
			out.Values[i] = ec._HomeIssueInfo_relateIssueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relateResourceCount":
			out.Values[i] = ec._HomeIssueInfo_relateResourceCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relateCommentCount":
			out.Values[i] = ec._HomeIssueInfo_relateCommentCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customField":
			out.Values[i] = ec._HomeIssueInfo_customField(ctx, field, obj)
		case "workHourInfo":
			out.Values[i] = ec._HomeIssueInfo_workHourInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditorsInfo":
			out.Values[i] = ec._HomeIssueInfo_auditorsInfo(ctx, field, obj)
		case "afterIssueIds":
			out.Values[i] = ec._HomeIssueInfo_afterIssueIds(ctx, field, obj)
		case "lessData":
			out.Values[i] = ec._HomeIssueInfo_lessData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueInfoGroupRespImplementors = []string{"HomeIssueInfoGroupResp"}

func (ec *executionContext) _HomeIssueInfoGroupResp(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueInfoGroupResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueInfoGroupRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueInfoGroupResp")
		case "total":
			out.Values[i] = ec._HomeIssueInfoGroupResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualTotal":
			out.Values[i] = ec._HomeIssueInfoGroupResp_actualTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeSpan":
			out.Values[i] = ec._HomeIssueInfoGroupResp_timeSpan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._HomeIssueInfoGroupResp_group(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueInfoRespImplementors = []string{"HomeIssueInfoResp"}

func (ec *executionContext) _HomeIssueInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueInfoResp")
		case "total":
			out.Values[i] = ec._HomeIssueInfoResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualTotal":
			out.Values[i] = ec._HomeIssueInfoResp_actualTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._HomeIssueInfoResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueOwnerInfoImplementors = []string{"HomeIssueOwnerInfo"}

func (ec *executionContext) _HomeIssueOwnerInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueOwnerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueOwnerInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueOwnerInfo")
		case "id":
			out.Values[i] = ec._HomeIssueOwnerInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._HomeIssueOwnerInfo_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueOwnerInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._HomeIssueOwnerInfo_avatar(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._HomeIssueOwnerInfo_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDisabled":
			out.Values[i] = ec._HomeIssueOwnerInfo_isDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssuePriorityInfoImplementors = []string{"HomeIssuePriorityInfo"}

func (ec *executionContext) _HomeIssuePriorityInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssuePriorityInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssuePriorityInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssuePriorityInfo")
		case "id":
			out.Values[i] = ec._HomeIssuePriorityInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssuePriorityInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._HomeIssuePriorityInfo_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssuePriorityInfo_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueProjectInfoImplementors = []string{"HomeIssueProjectInfo"}

func (ec *executionContext) _HomeIssueProjectInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueProjectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueProjectInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueProjectInfo")
		case "id":
			out.Values[i] = ec._HomeIssueProjectInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appId":
			out.Values[i] = ec._HomeIssueProjectInfo_appId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueProjectInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFilling":
			out.Values[i] = ec._HomeIssueProjectInfo_isFilling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeId":
			out.Values[i] = ec._HomeIssueProjectInfo_projectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "privacyStatus":
			out.Values[i] = ec._HomeIssueProjectInfo_privacyStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueStatusInfoImplementors = []string{"HomeIssueStatusInfo"}

func (ec *executionContext) _HomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueStatusInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueStatusInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueStatusInfo")
		case "id":
			out.Values[i] = ec._HomeIssueStatusInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueStatusInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._HomeIssueStatusInfo_displayName(ctx, field, obj)
		case "bgStyle":
			out.Values[i] = ec._HomeIssueStatusInfo_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssueStatusInfo_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._HomeIssueStatusInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._HomeIssueStatusInfo_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueTagInfoImplementors = []string{"HomeIssueTagInfo"}

func (ec *executionContext) _HomeIssueTagInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueTagInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueTagInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueTagInfo")
		case "id":
			out.Values[i] = ec._HomeIssueTagInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueTagInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._HomeIssueTagInfo_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssueTagInfo_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueWorkHourInfoImplementors = []string{"HomeIssueWorkHourInfo"}

func (ec *executionContext) _HomeIssueWorkHourInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueWorkHourInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, homeIssueWorkHourInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueWorkHourInfo")
		case "predictWorkHour":
			out.Values[i] = ec._HomeIssueWorkHourInfo_predictWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualWorkHour":
			out.Values[i] = ec._HomeIssueWorkHourInfo_actualWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "predictList":
			out.Values[i] = ec._HomeIssueWorkHourInfo_predictList(ctx, field, obj)
		case "actualList":
			out.Values[i] = ec._HomeIssueWorkHourInfo_actualList(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryListRespImplementors = []string{"IndustryListResp"}

func (ec *executionContext) _IndustryListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IndustryListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, industryListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndustryListResp")
		case "list":
			out.Values[i] = ec._IndustryListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryRespImplementors = []string{"IndustryResp"}

func (ec *executionContext) _IndustryResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IndustryResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, industryRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndustryResp")
		case "id":
			out.Values[i] = ec._IndustryResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IndustryResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cname":
			out.Values[i] = ec._IndustryResp_cname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var internalAuthRespImplementors = []string{"InternalAuthResp"}

func (ec *executionContext) _InternalAuthResp(ctx context.Context, sel ast.SelectionSet, obj *vo.InternalAuthResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalAuthRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalAuthResp")
		case "hasPermission":
			out.Values[i] = ec._InternalAuthResp_hasPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var inviteUserInfoImplementors = []string{"InviteUserInfo"}

func (ec *executionContext) _InviteUserInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.InviteUserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteUserInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteUserInfo")
		case "id":
			out.Values[i] = ec._InviteUserInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._InviteUserInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._InviteUserInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviteTime":
			out.Values[i] = ec._InviteUserInfo_inviteTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isInvitedRecent":
			out.Values[i] = ec._InviteUserInfo_isInvitedRecent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var inviteUserRespImplementors = []string{"InviteUserResp"}

func (ec *executionContext) _InviteUserResp(ctx context.Context, sel ast.SelectionSet, obj *vo.InviteUserResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteUserRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteUserResp")
		case "successEmail":
			out.Values[i] = ec._InviteUserResp_successEmail(ctx, field, obj)
		case "invitedEmail":
			out.Values[i] = ec._InviteUserResp_invitedEmail(ctx, field, obj)
		case "isUserEmail":
			out.Values[i] = ec._InviteUserResp_isUserEmail(ctx, field, obj)
		case "invalidEmail":
			out.Values[i] = ec._InviteUserResp_invalidEmail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueImplementors = []string{"Issue"}

func (ec *executionContext) _Issue(ctx context.Context, sel ast.SelectionSet, obj *vo.Issue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issue")
		case "id":
			out.Values[i] = ec._Issue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Issue_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Issue_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Issue_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._Issue_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Issue_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFiling":
			out.Values[i] = ec._Issue_isFiling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Issue_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owners":
			out.Values[i] = ec._Issue_owners(ctx, field, obj)
		case "priorityId":
			out.Values[i] = ec._Issue_priorityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceId":
			out.Values[i] = ec._Issue_sourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueObjectTypeId":
			out.Values[i] = ec._Issue_issueObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "propertyId":
			out.Values[i] = ec._Issue_propertyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._Issue_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._Issue_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._Issue_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._Issue_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planWorkHour":
			out.Values[i] = ec._Issue_planWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationId":
			out.Values[i] = ec._Issue_iterationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "versionId":
			out.Values[i] = ec._Issue_versionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moduleId":
			out.Values[i] = ec._Issue_moduleId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Issue_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentTitle":
			out.Values[i] = ec._Issue_parentTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentInfo":
			out.Values[i] = ec._Issue_parentInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Issue_remark(ctx, field, obj)
		case "remarkDetail":
			out.Values[i] = ec._Issue_remarkDetail(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Issue_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Issue_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Issue_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Issue_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Issue_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Issue_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Issue_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditStatus":
			out.Values[i] = ec._Issue_auditStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueIds":
			out.Values[i] = ec._Issue_issueIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tableId":
			out.Values[i] = ec._Issue_tableId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataId":
			out.Values[i] = ec._Issue_dataId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueAssignRankInfoImplementors = []string{"IssueAssignRankInfo"}

func (ec *executionContext) _IssueAssignRankInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueAssignRankInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueAssignRankInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueAssignRankInfo")
		case "name":
			out.Values[i] = ec._IssueAssignRankInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._IssueAssignRankInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._IssueAssignRankInfo_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "incompleteissueCount":
			out.Values[i] = ec._IssueAssignRankInfo_incompleteissueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueDailyPersonalWorkCompletionStatDataImplementors = []string{"IssueDailyPersonalWorkCompletionStatData"}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatData(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueDailyPersonalWorkCompletionStatData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueDailyPersonalWorkCompletionStatDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueDailyPersonalWorkCompletionStatData")
		case "statDate":
			out.Values[i] = ec._IssueDailyPersonalWorkCompletionStatData_statDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedCount":
			out.Values[i] = ec._IssueDailyPersonalWorkCompletionStatData_completedCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueInfoImplementors = []string{"IssueInfo"}

func (ec *executionContext) _IssueInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueInfo")
		case "issue":
			out.Values[i] = ec._IssueInfo_issue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project":
			out.Values[i] = ec._IssueInfo_project(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IssueInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":
			out.Values[i] = ec._IssueInfo_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._IssueInfo_owner(ctx, field, obj)
		case "creatorInfo":
			out.Values[i] = ec._IssueInfo_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participantInfos":
			out.Values[i] = ec._IssueInfo_participantInfos(ctx, field, obj)
		case "followerInfos":
			out.Values[i] = ec._IssueInfo_followerInfos(ctx, field, obj)
		case "nextStatus":
			out.Values[i] = ec._IssueInfo_nextStatus(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._IssueInfo_tags(ctx, field, obj)
		case "sourceInfo":
			out.Values[i] = ec._IssueInfo_sourceInfo(ctx, field, obj)
		case "propertyInfo":
			out.Values[i] = ec._IssueInfo_propertyInfo(ctx, field, obj)
		case "typeInfo":
			out.Values[i] = ec._IssueInfo_typeInfo(ctx, field, obj)
		case "iterationName":
			out.Values[i] = ec._IssueInfo_iterationName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "childsNum":
			out.Values[i] = ec._IssueInfo_childsNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "childsFinishedNum":
			out.Values[i] = ec._IssueInfo_childsFinishedNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeName":
			out.Values[i] = ec._IssueInfo_projectObjectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tableName":
			out.Values[i] = ec._IssueInfo_tableName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allStatus":
			out.Values[i] = ec._IssueInfo_allStatus(ctx, field, obj)
		case "relateIssueCount":
			out.Values[i] = ec._IssueInfo_relateIssueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relateResourceCount":
			out.Values[i] = ec._IssueInfo_relateResourceCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relateCommentCount":
			out.Values[i] = ec._IssueInfo_relateCommentCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customField":
			out.Values[i] = ec._IssueInfo_customField(ctx, field, obj)
		case "workHourInfo":
			out.Values[i] = ec._IssueInfo_workHourInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditorsInfo":
			out.Values[i] = ec._IssueInfo_auditorsInfo(ctx, field, obj)
		case "lastUrgeTime":
			out.Values[i] = ec._IssueInfo_lastUrgeTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastUrgeTimeForIssue":
			out.Values[i] = ec._IssueInfo_lastUrgeTimeForIssue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lessData":
			out.Values[i] = ec._IssueInfo_lessData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueListImplementors = []string{"IssueList"}

func (ec *executionContext) _IssueList(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueList")
		case "total":
			out.Values[i] = ec._IssueList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueObjectTypeInfoImplementors = []string{"IssueObjectTypeInfo"}

func (ec *executionContext) _IssueObjectTypeInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueObjectTypeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueObjectTypeInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueObjectTypeInfo")
		case "id":
			out.Values[i] = ec._IssueObjectTypeInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueObjectTypeInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issuePropertyImplementors = []string{"IssueProperty"}

func (ec *executionContext) _IssueProperty(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issuePropertyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueProperty")
		case "id":
			out.Values[i] = ec._IssueProperty_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._IssueProperty_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._IssueProperty_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._IssueProperty_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._IssueProperty_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueProperty_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._IssueProperty_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IssueProperty_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._IssueProperty_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._IssueProperty_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._IssueProperty_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._IssueProperty_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issuePropertyInfoImplementors = []string{"IssuePropertyInfo"}

func (ec *executionContext) _IssuePropertyInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssuePropertyInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issuePropertyInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssuePropertyInfo")
		case "id":
			out.Values[i] = ec._IssuePropertyInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssuePropertyInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueRestInfoImplementors = []string{"IssueRestInfo"}

func (ec *executionContext) _IssueRestInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueRestInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueRestInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueRestInfo")
		case "id":
			out.Values[i] = ec._IssueRestInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._IssueRestInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerId":
			out.Values[i] = ec._IssueRestInfo_ownerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerName":
			out.Values[i] = ec._IssueRestInfo_ownerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerAvatar":
			out.Values[i] = ec._IssueRestInfo_ownerAvatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerIsDeleted":
			out.Values[i] = ec._IssueRestInfo_ownerIsDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerIsDisabled":
			out.Values[i] = ec._IssueRestInfo_ownerIsDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finished":
			out.Values[i] = ec._IssueRestInfo_finished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusId":
			out.Values[i] = ec._IssueRestInfo_statusId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueRestInfo_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationId":
			out.Values[i] = ec._IssueRestInfo_iterationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusName":
			out.Values[i] = ec._IssueRestInfo_statusName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._IssueRestInfo_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._IssueRestInfo_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._IssueRestInfo_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityInfo":
			out.Values[i] = ec._IssueRestInfo_priorityInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusInfo":
			out.Values[i] = ec._IssueRestInfo_statusInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeName":
			out.Values[i] = ec._IssueRestInfo_projectObjectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationName":
			out.Values[i] = ec._IssueRestInfo_iterationName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allStatus":
			out.Values[i] = ec._IssueRestInfo_allStatus(ctx, field, obj)
		case "type":
			out.Values[i] = ec._IssueRestInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditStatus":
			out.Values[i] = ec._IssueRestInfo_auditStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeId":
			out.Values[i] = ec._IssueRestInfo_projectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueSourceImplementors = []string{"IssueSource"}

func (ec *executionContext) _IssueSource(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueSourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueSource")
		case "id":
			out.Values[i] = ec._IssueSource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._IssueSource_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._IssueSource_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._IssueSource_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueSource_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._IssueSource_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueSource_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._IssueSource_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IssueSource_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._IssueSource_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._IssueSource_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._IssueSource_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._IssueSource_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueSourceInfoImplementors = []string{"IssueSourceInfo"}

func (ec *executionContext) _IssueSourceInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueSourceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueSourceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueSourceInfo")
		case "id":
			out.Values[i] = ec._IssueSourceInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueSourceInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueStatByObjectTypeImplementors = []string{"IssueStatByObjectType"}

func (ec *executionContext) _IssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueStatByObjectType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueStatByObjectTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueStatByObjectType")
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueStatByObjectType_projectObjectTypeId(ctx, field, obj)
		case "projectObjectTypeName":
			out.Values[i] = ec._IssueStatByObjectType_projectObjectTypeName(ctx, field, obj)
		case "total":
			out.Values[i] = ec._IssueStatByObjectType_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueStatusTypeStatDetailRespImplementors = []string{"IssueStatusTypeStatDetailResp"}

func (ec *executionContext) _IssueStatusTypeStatDetailResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueStatusTypeStatDetailResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueStatusTypeStatDetailRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueStatusTypeStatDetailResp")
		case "notStart":
			out.Values[i] = ec._IssueStatusTypeStatDetailResp_notStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processing":
			out.Values[i] = ec._IssueStatusTypeStatDetailResp_processing(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completed":
			out.Values[i] = ec._IssueStatusTypeStatDetailResp_completed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueStatusTypeStatRespImplementors = []string{"IssueStatusTypeStatResp"}

func (ec *executionContext) _IssueStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueStatusTypeStatResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueStatusTypeStatRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueStatusTypeStatResp")
		case "notStartTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_notStartTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processingTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_processingTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_completedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedTodayTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_completedTodayTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueTomorrowTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueTomorrowTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueCompletedTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueCompletedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._IssueStatusTypeStatResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueTodayTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueTodayTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "beAboutToOverdueSum":
			out.Values[i] = ec._IssueStatusTypeStatResp_beAboutToOverdueSum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "todayCount":
			out.Values[i] = ec._IssueStatusTypeStatResp_todayCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "todayCreateCount":
			out.Values[i] = ec._IssueStatusTypeStatResp_todayCreateCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "callMeTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_callMeTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "waitConfirmedTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_waitConfirmedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueStatusTypeStatResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueWorkHoursImplementors = []string{"IssueWorkHours"}

func (ec *executionContext) _IssueWorkHours(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueWorkHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueWorkHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueWorkHours")
		case "id":
			out.Values[i] = ec._IssueWorkHours_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._IssueWorkHours_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workerId":
			out.Values[i] = ec._IssueWorkHours_workerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "needTime":
			out.Values[i] = ec._IssueWorkHours_needTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._IssueWorkHours_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._IssueWorkHours_endTime(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._IssueWorkHours_desc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationImplementors = []string{"Iteration"}

func (ec *executionContext) _Iteration(ctx context.Context, sel ast.SelectionSet, obj *vo.Iteration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iterationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Iteration")
		case "id":
			out.Values[i] = ec._Iteration_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Iteration_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Iteration_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Iteration_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Iteration_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Iteration_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "versionId":
			out.Values[i] = ec._Iteration_versionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._Iteration_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._Iteration_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planWorkHour":
			out.Values[i] = ec._Iteration_planWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPoint":
			out.Values[i] = ec._Iteration_storyPoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Iteration_remark(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Iteration_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Iteration_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Iteration_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Iteration_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Iteration_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerInfo":
			out.Values[i] = ec._Iteration_ownerInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusInfo":
			out.Values[i] = ec._Iteration_statusInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allIssueCount":
			out.Values[i] = ec._Iteration_allIssueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finishedIssueCount":
			out.Values[i] = ec._Iteration_finishedIssueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationInfoRespImplementors = []string{"IterationInfoResp"}

func (ec *executionContext) _IterationInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iterationInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationInfoResp")
		case "iteration":
			out.Values[i] = ec._IterationInfoResp_iteration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project":
			out.Values[i] = ec._IterationInfoResp_project(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IterationInfoResp_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._IterationInfoResp_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nextStatus":
			out.Values[i] = ec._IterationInfoResp_nextStatus(ctx, field, obj)
		case "iterStatusList":
			out.Values[i] = ec._IterationInfoResp_iterStatusList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusTimeInfo":
			out.Values[i] = ec._IterationInfoResp_statusTimeInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationListImplementors = []string{"IterationList"}

func (ec *executionContext) _IterationList(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iterationListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationList")
		case "total":
			out.Values[i] = ec._IterationList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IterationList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationStatImplementors = []string{"IterationStat"}

func (ec *executionContext) _IterationStat(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iterationStatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationStat")
		case "id":
			out.Values[i] = ec._IterationStat_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._IterationStat_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._IterationStat_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationId":
			out.Values[i] = ec._IterationStat_iterationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueCount":
			out.Values[i] = ec._IterationStat_issueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueWaitCount":
			out.Values[i] = ec._IterationStat_issueWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueRunningCount":
			out.Values[i] = ec._IterationStat_issueRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueOverdueCount":
			out.Values[i] = ec._IterationStat_issueOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueEndCount":
			out.Values[i] = ec._IterationStat_issueEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandCount":
			out.Values[i] = ec._IterationStat_demandCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandWaitCount":
			out.Values[i] = ec._IterationStat_demandWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandRunningCount":
			out.Values[i] = ec._IterationStat_demandRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandOverdueCount":
			out.Values[i] = ec._IterationStat_demandOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandEndCount":
			out.Values[i] = ec._IterationStat_demandEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointCount":
			out.Values[i] = ec._IterationStat_storyPointCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointWaitCount":
			out.Values[i] = ec._IterationStat_storyPointWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointRunningCount":
			out.Values[i] = ec._IterationStat_storyPointRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointOverdueCount":
			out.Values[i] = ec._IterationStat_storyPointOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointEndCount":
			out.Values[i] = ec._IterationStat_storyPointEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskCount":
			out.Values[i] = ec._IterationStat_taskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskWaitCount":
			out.Values[i] = ec._IterationStat_taskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskRunningCount":
			out.Values[i] = ec._IterationStat_taskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskOverdueCount":
			out.Values[i] = ec._IterationStat_taskOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskEndCount":
			out.Values[i] = ec._IterationStat_taskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugCount":
			out.Values[i] = ec._IterationStat_bugCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugWaitCount":
			out.Values[i] = ec._IterationStat_bugWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugRunningCount":
			out.Values[i] = ec._IterationStat_bugRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugOverdueCount":
			out.Values[i] = ec._IterationStat_bugOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugEndCount":
			out.Values[i] = ec._IterationStat_bugEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskCount":
			out.Values[i] = ec._IterationStat_testtaskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskWaitCount":
			out.Values[i] = ec._IterationStat_testtaskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskRunningCount":
			out.Values[i] = ec._IterationStat_testtaskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskOverdueCount":
			out.Values[i] = ec._IterationStat_testtaskOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskEndCount":
			out.Values[i] = ec._IterationStat_testtaskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ext":
			out.Values[i] = ec._IterationStat_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statDate":
			out.Values[i] = ec._IterationStat_statDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IterationStat_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._IterationStat_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._IterationStat_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationStatListImplementors = []string{"IterationStatList"}

func (ec *executionContext) _IterationStatList(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationStatList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iterationStatListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationStatList")
		case "total":
			out.Values[i] = ec._IterationStatList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IterationStatList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationStatSimpleImplementors = []string{"IterationStatSimple"}

func (ec *executionContext) _IterationStatSimple(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationStatSimple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iterationStatSimpleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationStatSimple")
		case "id":
			out.Values[i] = ec._IterationStatSimple_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IterationStatSimple_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allIssues":
			out.Values[i] = ec._IterationStatSimple_allIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueIssues":
			out.Values[i] = ec._IterationStatSimple_overdueIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finishIssues":
			out.Values[i] = ec._IterationStatSimple_finishIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jsApiSignRespImplementors = []string{"JsApiSignResp"}

func (ec *executionContext) _JsApiSignResp(ctx context.Context, sel ast.SelectionSet, obj *vo.JsAPISignResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jsApiSignRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JsApiSignResp")
		case "agentId":
			out.Values[i] = ec._JsApiSignResp_agentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeStamp":
			out.Values[i] = ec._JsApiSignResp_timeStamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noceStr":
			out.Values[i] = ec._JsApiSignResp_noceStr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signature":
			out.Values[i] = ec._JsApiSignResp_signature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memberInfoImplementors = []string{"MemberInfo"}

func (ec *executionContext) _MemberInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.MemberInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberInfo")
		case "id":
			out.Values[i] = ec._MemberInfo_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MemberInfo_name(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._MemberInfo_avatar(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moveIssueBatchRespImplementors = []string{"MoveIssueBatchResp"}

func (ec *executionContext) _MoveIssueBatchResp(ctx context.Context, sel ast.SelectionSet, obj *vo.MoveIssueBatchResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moveIssueBatchRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoveIssueBatchResp")
		case "successIssues":
			out.Values[i] = ec._MoveIssueBatchResp_successIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noAuthIssues":
			out.Values[i] = ec._MoveIssueBatchResp_noAuthIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remainChildrenIssues":
			out.Values[i] = ec._MoveIssueBatchResp_remainChildrenIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "childrenIssues":
			out.Values[i] = ec._MoveIssueBatchResp_childrenIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "sendSmsLoginCode":
			out.Values[i] = ec._Mutation_sendSmsLoginCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendAuthCode":
			out.Values[i] = ec._Mutation_sendAuthCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retrievePassword":
			out.Values[i] = ec._Mutation_retrievePassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPassword":
			out.Values[i] = ec._Mutation_resetPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setPassword":
			out.Values[i] = ec._Mutation_setPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unbindLoginName":
			out.Values[i] = ec._Mutation_unbindLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindLoginName":
			out.Values[i] = ec._Mutation_bindLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkLoginName":
			out.Values[i] = ec._Mutation_checkLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifyOldName":
			out.Values[i] = ec._Mutation_verifyOldName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changeLoginName":
			out.Values[i] = ec._Mutation_changeLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authFs":
			out.Values[i] = ec._Mutation_authFs(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authFsCode":
			out.Values[i] = ec._Mutation_authFsCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "boundFs":
			out.Values[i] = ec._Mutation_boundFs(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "boundFsAccount":
			out.Values[i] = ec._Mutation_boundFsAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "initFsAccount":
			out.Values[i] = ec._Mutation_initFsAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userLogin":
			out.Values[i] = ec._Mutation_userLogin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userRegister":
			out.Values[i] = ec._Mutation_userRegister(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userQuit":
			out.Values[i] = ec._Mutation_userQuit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectStatus":
			out.Values[i] = ec._Mutation_updateProjectStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archiveProject":
			out.Values[i] = ec._Mutation_archiveProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelArchivedProject":
			out.Values[i] = ec._Mutation_cancelArchivedProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProject":
			out.Values[i] = ec._Mutation_deleteProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserConfig":
			out.Values[i] = ec._Mutation_updateUserConfig(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserPcConfig":
			out.Values[i] = ec._Mutation_updateUserPcConfig(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIterationStatus":
			out.Values[i] = ec._Mutation_updateIterationStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrg":
			out.Values[i] = ec._Mutation_createOrg(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueComment":
			out.Values[i] = ec._Mutation_createIssueComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssue":
			out.Values[i] = ec._Mutation_deleteIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssueBatch":
			out.Values[i] = ec._Mutation_deleteIssueBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProject":
			out.Values[i] = ec._Mutation_createProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProject":
			out.Values[i] = ec._Mutation_updateProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIteration":
			out.Values[i] = ec._Mutation_createIteration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIteration":
			out.Values[i] = ec._Mutation_updateIteration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIteration":
			out.Values[i] = ec._Mutation_deleteIteration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIterationSort":
			out.Values[i] = ec._Mutation_updateIterationSort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectDetail":
			out.Values[i] = ec._Mutation_updateProjectDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "switchUserOrganization":
			out.Values[i] = ec._Mutation_switchUserOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationSetting":
			out.Values[i] = ec._Mutation_updateOrganizationSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrgMemberStatus":
			out.Values[i] = ec._Mutation_updateOrgMemberStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrgMemberCheckStatus":
			out.Values[i] = ec._Mutation_updateOrgMemberCheckStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserInfo":
			out.Values[i] = ec._Mutation_updateUserInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectResourceFolder":
			out.Values[i] = ec._Mutation_updateProjectResourceFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectResourceName":
			out.Values[i] = ec._Mutation_updateProjectResourceName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectFileResource":
			out.Values[i] = ec._Mutation_updateProjectFileResource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectResource":
			out.Values[i] = ec._Mutation_deleteProjectResource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProjectFolder":
			out.Values[i] = ec._Mutation_createProjectFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectFolder":
			out.Values[i] = ec._Mutation_deleteProjectFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectFolder":
			out.Values[i] = ec._Mutation_updateProjectFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectAttachment":
			out.Values[i] = ec._Mutation_deleteProjectAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIterationStatusTime":
			out.Values[i] = ec._Mutation_updateIterationStatusTime(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recoverRecycleBinRecord":
			out.Values[i] = ec._Mutation_recoverRecycleBinRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completeDelete":
			out.Values[i] = ec._Mutation_completeDelete(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIssueAttachmentFs":
			out.Values[i] = ec._Mutation_addIssueAttachmentFs(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "convertIssueToParent":
			out.Values[i] = ec._Mutation_convertIssueToParent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changeParentIssue":
			out.Values[i] = ec._Mutation_changeParentIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueWorkHours":
			out.Values[i] = ec._Mutation_createIssueWorkHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createMultiIssueWorkHours":
			out.Values[i] = ec._Mutation_createMultiIssueWorkHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueWorkHours":
			out.Values[i] = ec._Mutation_updateIssueWorkHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateMultiIssueWorkHours":
			out.Values[i] = ec._Mutation_updateMultiIssueWorkHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssueWorkHours":
			out.Values[i] = ec._Mutation_deleteIssueWorkHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setUserJoinIssue":
			out.Values[i] = ec._Mutation_setUserJoinIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFsProjectChatPushSettings":
			out.Values[i] = ec._Mutation_updateFsProjectChatPushSettings(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "urgeIssue":
			out.Values[i] = ec._Mutation_urgeIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditIssue":
			out.Values[i] = ec._Mutation_auditIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "viewAuditIssue":
			out.Values[i] = ec._Mutation_viewAuditIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "withdrawIssue":
			out.Values[i] = ec._Mutation_withdrawIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "urgeAuditIssue":
			out.Values[i] = ec._Mutation_urgeAuditIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applyScopes":
			out.Values[i] = ec._Mutation_applyScopes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "joinOrgByInviteCode":
			out.Values[i] = ec._Mutation_joinOrgByInviteCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var noticeImplementors = []string{"Notice"}

func (ec *executionContext) _Notice(ctx context.Context, sel ast.SelectionSet, obj *vo.Notice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, noticeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notice")
		case "id":
			out.Values[i] = ec._Notice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Notice_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Notice_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationType":
			out.Values[i] = ec._Notice_relationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ext":
			out.Values[i] = ec._Notice_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Notice_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueId":
			out.Values[i] = ec._Notice_issueId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trendsId":
			out.Values[i] = ec._Notice_trendsId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._Notice_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noticer":
			out.Values[i] = ec._Notice_noticer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Notice_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Notice_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Notice_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._Notice_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectName":
			out.Values[i] = ec._Notice_projectName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueName":
			out.Values[i] = ec._Notice_issueName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentIssueId":
			out.Values[i] = ec._Notice_parentIssueId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oneActualWorkHourRecordImplementors = []string{"OneActualWorkHourRecord"}

func (ec *executionContext) _OneActualWorkHourRecord(ctx context.Context, sel ast.SelectionSet, obj *vo.OneActualWorkHourRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oneActualWorkHourRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OneActualWorkHourRecord")
		case "id":
			out.Values[i] = ec._OneActualWorkHourRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._OneActualWorkHourRecord_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "worker":
			out.Values[i] = ec._OneActualWorkHourRecord_worker(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "needTime":
			out.Values[i] = ec._OneActualWorkHourRecord_needTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._OneActualWorkHourRecord_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._OneActualWorkHourRecord_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._OneActualWorkHourRecord_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._OneActualWorkHourRecord_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "desc":
			out.Values[i] = ec._OneActualWorkHourRecord_desc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isEnable":
			out.Values[i] = ec._OneActualWorkHourRecord_isEnable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oneDateWorkHourImplementors = []string{"OneDateWorkHour"}

func (ec *executionContext) _OneDateWorkHour(ctx context.Context, sel ast.SelectionSet, obj *vo.OneDateWorkHour) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oneDateWorkHourImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OneDateWorkHour")
		case "date":
			out.Values[i] = ec._OneDateWorkHour_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weekDay":
			out.Values[i] = ec._OneDateWorkHour_weekDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "time":
			out.Values[i] = ec._OneDateWorkHour_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var onePersonWorkHourStatisticInfoImplementors = []string{"OnePersonWorkHourStatisticInfo"}

func (ec *executionContext) _OnePersonWorkHourStatisticInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.OnePersonWorkHourStatisticInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, onePersonWorkHourStatisticInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OnePersonWorkHourStatisticInfo")
		case "workerId":
			out.Values[i] = ec._OnePersonWorkHourStatisticInfo_workerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._OnePersonWorkHourStatisticInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "predictHourTotal":
			out.Values[i] = ec._OnePersonWorkHourStatisticInfo_predictHourTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualHourTotal":
			out.Values[i] = ec._OnePersonWorkHourStatisticInfo_actualHourTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateWorkHourList":
			out.Values[i] = ec._OnePersonWorkHourStatisticInfo_dateWorkHourList(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oneWorkHourRecordImplementors = []string{"OneWorkHourRecord"}

func (ec *executionContext) _OneWorkHourRecord(ctx context.Context, sel ast.SelectionSet, obj *vo.OneWorkHourRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oneWorkHourRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OneWorkHourRecord")
		case "id":
			out.Values[i] = ec._OneWorkHourRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._OneWorkHourRecord_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "worker":
			out.Values[i] = ec._OneWorkHourRecord_worker(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "needTime":
			out.Values[i] = ec._OneWorkHourRecord_needTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._OneWorkHourRecord_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._OneWorkHourRecord_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "desc":
			out.Values[i] = ec._OneWorkHourRecord_desc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isEnable":
			out.Values[i] = ec._OneWorkHourRecord_isEnable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgConfigImplementors = []string{"OrgConfig"}

func (ec *executionContext) _OrgConfig(ctx context.Context, sel ast.SelectionSet, obj *vo.OrgConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgConfig")
		case "id":
			out.Values[i] = ec._OrgConfig_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._OrgConfig_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payLevel":
			out.Values[i] = ec._OrgConfig_payLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payStartTime":
			out.Values[i] = ec._OrgConfig_payStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payEndTime":
			out.Values[i] = ec._OrgConfig_payEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payLevelTrue":
			out.Values[i] = ec._OrgConfig_payLevelTrue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._OrgConfig_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgMemberNumber":
			out.Values[i] = ec._OrgConfig_orgMemberNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isGrayLevel":
			out.Values[i] = ec._OrgConfig_isGrayLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "summaryAppId":
			out.Values[i] = ec._OrgConfig_summaryAppId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "basicShowSetting":
			out.Values[i] = ec._OrgConfig_basicShowSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logo":
			out.Values[i] = ec._OrgConfig_logo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgProjectMemberInfoRespImplementors = []string{"OrgProjectMemberInfoResp"}

func (ec *executionContext) _OrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgProjectMemberInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgProjectMemberInfoResp")
		case "userId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outUserId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_outUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outOrgId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_outOrgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._OrgProjectMemberInfoResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._OrgProjectMemberInfoResp_namePy(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._OrgProjectMemberInfoResp_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOutInfo":
			out.Values[i] = ec._OrgProjectMemberInfoResp_hasOutInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOrgOutInfo":
			out.Values[i] = ec._OrgProjectMemberInfoResp_hasOrgOutInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserIsDelete":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgUserIsDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserStatus":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgUserStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserCheckStatus":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgUserCheckStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationInfoRespImplementors = []string{"OrganizationInfoResp"}

func (ec *executionContext) _OrganizationInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OrganizationInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationInfoResp")
		case "orgId":
			out.Values[i] = ec._OrganizationInfoResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._OrganizationInfoResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._OrganizationInfoResp_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "webSite":
			out.Values[i] = ec._OrganizationInfoResp_webSite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industryId":
			out.Values[i] = ec._OrganizationInfoResp_industryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industryName":
			out.Values[i] = ec._OrganizationInfoResp_industryName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scale":
			out.Values[i] = ec._OrganizationInfoResp_scale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryId":
			out.Values[i] = ec._OrganizationInfoResp_countryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCname":
			out.Values[i] = ec._OrganizationInfoResp_countryCname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provinceId":
			out.Values[i] = ec._OrganizationInfoResp_provinceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provinceCname":
			out.Values[i] = ec._OrganizationInfoResp_provinceCname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cityId":
			out.Values[i] = ec._OrganizationInfoResp_cityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cityCname":
			out.Values[i] = ec._OrganizationInfoResp_cityCname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._OrganizationInfoResp_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logoUrl":
			out.Values[i] = ec._OrganizationInfoResp_logoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._OrganizationInfoResp_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerInfo":
			out.Values[i] = ec._OrganizationInfoResp_ownerInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._OrganizationInfoResp_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdCode":
			out.Values[i] = ec._OrganizationInfoResp_thirdCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationUserImplementors = []string{"OrganizationUser"}

func (ec *executionContext) _OrganizationUser(ctx context.Context, sel ast.SelectionSet, obj *vo.OrganizationUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationUser")
		case "id":
			out.Values[i] = ec._OrganizationUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._OrganizationUser_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._OrganizationUser_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkStatus":
			out.Values[i] = ec._OrganizationUser_checkStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "useStatus":
			out.Values[i] = ec._OrganizationUser_useStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._OrganizationUser_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusChangerId":
			out.Values[i] = ec._OrganizationUser_statusChangerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusChangeTime":
			out.Values[i] = ec._OrganizationUser_statusChangeTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditorId":
			out.Values[i] = ec._OrganizationUser_auditorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditTime":
			out.Values[i] = ec._OrganizationUser_auditTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._OrganizationUser_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._OrganizationUser_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._OrganizationUser_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._OrganizationUser_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userInfo":
			out.Values[i] = ec._OrganizationUser_userInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditorInfo":
			out.Values[i] = ec._OrganizationUser_auditorInfo(ctx, field, obj)
		case "userRole":
			out.Values[i] = ec._OrganizationUser_userRole(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ossPostPolicyRespImplementors = []string{"OssPostPolicyResp"}

func (ec *executionContext) _OssPostPolicyResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OssPostPolicyResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ossPostPolicyRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OssPostPolicyResp")
		case "policy":
			out.Values[i] = ec._OssPostPolicyResp_policy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signature":
			out.Values[i] = ec._OssPostPolicyResp_signature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dir":
			out.Values[i] = ec._OssPostPolicyResp_dir(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expire":
			out.Values[i] = ec._OssPostPolicyResp_expire(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accessId":
			out.Values[i] = ec._OssPostPolicyResp_accessId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._OssPostPolicyResp_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region":
			out.Values[i] = ec._OssPostPolicyResp_region(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bucket":
			out.Values[i] = ec._OssPostPolicyResp_bucket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileName":
			out.Values[i] = ec._OssPostPolicyResp_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxFileSize":
			out.Values[i] = ec._OssPostPolicyResp_maxFileSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "callback":
			out.Values[i] = ec._OssPostPolicyResp_callback(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var parentInfoImplementors = []string{"ParentInfo"}

func (ec *executionContext) _ParentInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.ParentInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, parentInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ParentInfo")
		case "id":
			out.Values[i] = ec._ParentInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._ParentInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._ParentInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payLimitNumRespImplementors = []string{"PayLimitNumResp"}

func (ec *executionContext) _PayLimitNumResp(ctx context.Context, sel ast.SelectionSet, obj *vo.PayLimitNumResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payLimitNumRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayLimitNumResp")
		case "projectNum":
			out.Values[i] = ec._PayLimitNumResp_projectNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueNum":
			out.Values[i] = ec._PayLimitNumResp_issueNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileSize":
			out.Values[i] = ec._PayLimitNumResp_fileSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *vo.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "id":
			out.Values[i] = ec._Permission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Permission_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._Permission_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Permission_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Permission_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Permission_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Permission_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Permission_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isShow":
			out.Values[i] = ec._Permission_isShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Permission_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Permission_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Permission_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Permission_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Permission_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Permission_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionListImplementors = []string{"PermissionList"}

func (ec *executionContext) _PermissionList(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionList")
		case "total":
			out.Values[i] = ec._PermissionList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._PermissionList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionOperationImplementors = []string{"PermissionOperation"}

func (ec *executionContext) _PermissionOperation(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionOperation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionOperationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionOperation")
		case "id":
			out.Values[i] = ec._PermissionOperation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._PermissionOperation_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permissionId":
			out.Values[i] = ec._PermissionOperation_permissionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._PermissionOperation_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PermissionOperation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operationCodes":
			out.Values[i] = ec._PermissionOperation_operationCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._PermissionOperation_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isShow":
			out.Values[i] = ec._PermissionOperation_isShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._PermissionOperation_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._PermissionOperation_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._PermissionOperation_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._PermissionOperation_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._PermissionOperation_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionOperationListRespImplementors = []string{"PermissionOperationListResp"}

func (ec *executionContext) _PermissionOperationListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionOperationListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionOperationListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionOperationListResp")
		case "permissionInfo":
			out.Values[i] = ec._PermissionOperationListResp_permissionInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operationList":
			out.Values[i] = ec._PermissionOperationListResp_operationList(ctx, field, obj)
		case "permissionHave":
			out.Values[i] = ec._PermissionOperationListResp_permissionHave(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personalInfoImplementors = []string{"PersonalInfo"}

func (ec *executionContext) _PersonalInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.PersonalInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personalInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonalInfo")
		case "id":
			out.Values[i] = ec._PersonalInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._PersonalInfo_emplId(ctx, field, obj)
		case "orgId":
			out.Values[i] = ec._PersonalInfo_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._PersonalInfo_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._PersonalInfo_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PersonalInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdName":
			out.Values[i] = ec._PersonalInfo_thirdName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginName":
			out.Values[i] = ec._PersonalInfo_loginName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginNameEditCount":
			out.Values[i] = ec._PersonalInfo_loginNameEditCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._PersonalInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mobile":
			out.Values[i] = ec._PersonalInfo_mobile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "birthday":
			out.Values[i] = ec._PersonalInfo_birthday(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sex":
			out.Values[i] = ec._PersonalInfo_sex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rimanente":
			out.Values[i] = ec._PersonalInfo_rimanente(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "level":
			out.Values[i] = ec._PersonalInfo_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "levelName":
			out.Values[i] = ec._PersonalInfo_levelName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._PersonalInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceChannel":
			out.Values[i] = ec._PersonalInfo_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "language":
			out.Values[i] = ec._PersonalInfo_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "motto":
			out.Values[i] = ec._PersonalInfo_motto(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastLoginIp":
			out.Values[i] = ec._PersonalInfo_lastLoginIp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastLoginTime":
			out.Values[i] = ec._PersonalInfo_lastLoginTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginFailCount":
			out.Values[i] = ec._PersonalInfo_loginFailCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._PersonalInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._PersonalInfo_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passwordSet":
			out.Values[i] = ec._PersonalInfo_passwordSet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remindBindPhone":
			out.Values[i] = ec._PersonalInfo_remindBindPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._PersonalInfo_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isManager":
			out.Values[i] = ec._PersonalInfo_isManager(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "functions":
			out.Values[i] = ec._PersonalInfo_functions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "extraDataMap":
			out.Values[i] = ec._PersonalInfo_extraDataMap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var predictListItemImplementors = []string{"PredictListItem"}

func (ec *executionContext) _PredictListItem(ctx context.Context, sel ast.SelectionSet, obj *vo.PredictListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, predictListItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PredictListItem")
		case "name":
			out.Values[i] = ec._PredictListItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workHour":
			out.Values[i] = ec._PredictListItem_workHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priorityImplementors = []string{"Priority"}

func (ec *executionContext) _Priority(ctx context.Context, sel ast.SelectionSet, obj *vo.Priority) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priorityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Priority")
		case "id":
			out.Values[i] = ec._Priority_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Priority_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._Priority_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Priority_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Priority_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Priority_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._Priority_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._Priority_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._Priority_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Priority_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Priority_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Priority_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Priority_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Priority_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Priority_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Priority_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Priority_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priorityListImplementors = []string{"PriorityList"}

func (ec *executionContext) _PriorityList(ctx context.Context, sel ast.SelectionSet, obj *vo.PriorityList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priorityListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriorityList")
		case "total":
			out.Values[i] = ec._PriorityList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._PriorityList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectImplementors = []string{"Project"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *vo.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appId":
			out.Values[i] = ec._Project_appId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Project_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Project_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preCode":
			out.Values[i] = ec._Project_preCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Project_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeId":
			out.Values[i] = ec._Project_projectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityId":
			out.Values[i] = ec._Project_priorityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._Project_planStartTime(ctx, field, obj)
		case "planEndTime":
			out.Values[i] = ec._Project_planEndTime(ctx, field, obj)
		case "publicStatus":
			out.Values[i] = ec._Project_publicStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceId":
			out.Values[i] = ec._Project_resourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFiling":
			out.Values[i] = ec._Project_isFiling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Project_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Project_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusType":
			out.Values[i] = ec._Project_statusType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Project_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Project_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Project_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Project_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Project_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Project_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._Project_creatorInfo(ctx, field, obj)
		case "ownerInfo":
			out.Values[i] = ec._Project_ownerInfo(ctx, field, obj)
		case "ownersInfo":
			out.Values[i] = ec._Project_ownersInfo(ctx, field, obj)
		case "memberInfo":
			out.Values[i] = ec._Project_memberInfo(ctx, field, obj)
		case "followerInfo":
			out.Values[i] = ec._Project_followerInfo(ctx, field, obj)
		case "resourcePath":
			out.Values[i] = ec._Project_resourcePath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceCompressedPath":
			out.Values[i] = ec._Project_resourceCompressedPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allIssues":
			out.Values[i] = ec._Project_allIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finishIssues":
			out.Values[i] = ec._Project_finishIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueIssues":
			out.Values[i] = ec._Project_overdueIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationStat":
			out.Values[i] = ec._Project_iterationStat(ctx, field, obj)
		case "allStatus":
			out.Values[i] = ec._Project_allStatus(ctx, field, obj)
		case "projectTypeName":
			out.Values[i] = ec._Project_projectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeLangCode":
			out.Values[i] = ec._Project_projectTypeLangCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSyncOutCalendar":
			out.Values[i] = ec._Project_isSyncOutCalendar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isStar":
			out.Values[i] = ec._Project_isStar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relateUnfinish":
			out.Values[i] = ec._Project_relateUnfinish(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._Project_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDayStatImplementors = []string{"ProjectDayStat"}

func (ec *executionContext) _ProjectDayStat(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDayStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectDayStatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDayStat")
		case "id":
			out.Values[i] = ec._ProjectDayStat_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectDayStat_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._ProjectDayStat_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueCount":
			out.Values[i] = ec._ProjectDayStat_issueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueWaitCount":
			out.Values[i] = ec._ProjectDayStat_issueWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueRunningCount":
			out.Values[i] = ec._ProjectDayStat_issueRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueOverdueCount":
			out.Values[i] = ec._ProjectDayStat_issueOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueEndCount":
			out.Values[i] = ec._ProjectDayStat_issueEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandCount":
			out.Values[i] = ec._ProjectDayStat_demandCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandWaitCount":
			out.Values[i] = ec._ProjectDayStat_demandWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandRunningCount":
			out.Values[i] = ec._ProjectDayStat_demandRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandOverdueCount":
			out.Values[i] = ec._ProjectDayStat_demandOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandEndCount":
			out.Values[i] = ec._ProjectDayStat_demandEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointCount":
			out.Values[i] = ec._ProjectDayStat_storyPointCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointWaitCount":
			out.Values[i] = ec._ProjectDayStat_storyPointWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointRunningCount":
			out.Values[i] = ec._ProjectDayStat_storyPointRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointOverdueCount":
			out.Values[i] = ec._ProjectDayStat_storyPointOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointEndCount":
			out.Values[i] = ec._ProjectDayStat_storyPointEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskCount":
			out.Values[i] = ec._ProjectDayStat_taskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskWaitCount":
			out.Values[i] = ec._ProjectDayStat_taskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskRunningCount":
			out.Values[i] = ec._ProjectDayStat_taskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskOverdueCount":
			out.Values[i] = ec._ProjectDayStat_taskOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskEndCount":
			out.Values[i] = ec._ProjectDayStat_taskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugCount":
			out.Values[i] = ec._ProjectDayStat_bugCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugWaitCount":
			out.Values[i] = ec._ProjectDayStat_bugWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugRunningCount":
			out.Values[i] = ec._ProjectDayStat_bugRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugOverdueCount":
			out.Values[i] = ec._ProjectDayStat_bugOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugEndCount":
			out.Values[i] = ec._ProjectDayStat_bugEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskCount":
			out.Values[i] = ec._ProjectDayStat_testtaskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskWaitCount":
			out.Values[i] = ec._ProjectDayStat_testtaskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskRunningCount":
			out.Values[i] = ec._ProjectDayStat_testtaskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskOverdueCount":
			out.Values[i] = ec._ProjectDayStat_testtaskOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskEndCount":
			out.Values[i] = ec._ProjectDayStat_testtaskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ext":
			out.Values[i] = ec._ProjectDayStat_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statDate":
			out.Values[i] = ec._ProjectDayStat_statDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectDayStat_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectDayStat_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectDayStat_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectDayStat_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectDayStat_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._ProjectDayStat_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._ProjectDayStat_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDayStatListImplementors = []string{"ProjectDayStatList"}

func (ec *executionContext) _ProjectDayStatList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDayStatList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectDayStatListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDayStatList")
		case "total":
			out.Values[i] = ec._ProjectDayStatList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectDayStatList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDetailImplementors = []string{"ProjectDetail"}

func (ec *executionContext) _ProjectDetail(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDetail")
		case "id":
			out.Values[i] = ec._ProjectDetail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectDetail_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._ProjectDetail_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notice":
			out.Values[i] = ec._ProjectDetail_notice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isEnableWorkHours":
			out.Values[i] = ec._ProjectDetail_isEnableWorkHours(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSyncOutCalendar":
			out.Values[i] = ec._ProjectDetail_isSyncOutCalendar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectDetail_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectDetail_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectDetail_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectDetail_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDetailListImplementors = []string{"ProjectDetailList"}

func (ec *executionContext) _ProjectDetailList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDetailList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectDetailListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDetailList")
		case "total":
			out.Values[i] = ec._ProjectDetailList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectDetailList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectInfoImplementors = []string{"ProjectInfo"}

func (ec *executionContext) _ProjectInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectInfo")
		case "id":
			out.Values[i] = ec._ProjectInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appId":
			out.Values[i] = ec._ProjectInfo_appId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectInfo_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._ProjectInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProjectInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preCode":
			out.Values[i] = ec._ProjectInfo_preCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._ProjectInfo_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeId":
			out.Values[i] = ec._ProjectInfo_projectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityId":
			out.Values[i] = ec._ProjectInfo_priorityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._ProjectInfo_planStartTime(ctx, field, obj)
		case "planEndTime":
			out.Values[i] = ec._ProjectInfo_planEndTime(ctx, field, obj)
		case "publicStatus":
			out.Values[i] = ec._ProjectInfo_publicStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceId":
			out.Values[i] = ec._ProjectInfo_resourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFiling":
			out.Values[i] = ec._ProjectInfo_isFiling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ProjectInfo_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectInfo_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectInfo_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectInfo_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._ProjectInfo_creatorInfo(ctx, field, obj)
		case "ownerInfo":
			out.Values[i] = ec._ProjectInfo_ownerInfo(ctx, field, obj)
		case "ownersInfo":
			out.Values[i] = ec._ProjectInfo_ownersInfo(ctx, field, obj)
		case "memberInfo":
			out.Values[i] = ec._ProjectInfo_memberInfo(ctx, field, obj)
		case "memberDepartmentInfo":
			out.Values[i] = ec._ProjectInfo_memberDepartmentInfo(ctx, field, obj)
		case "followerInfo":
			out.Values[i] = ec._ProjectInfo_followerInfo(ctx, field, obj)
		case "resourcePath":
			out.Values[i] = ec._ProjectInfo_resourcePath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allStatus":
			out.Values[i] = ec._ProjectInfo_allStatus(ctx, field, obj)
		case "isSyncOutCalendar":
			out.Values[i] = ec._ProjectInfo_isSyncOutCalendar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "syncCalendarStatusList":
			out.Values[i] = ec._ProjectInfo_syncCalendarStatusList(ctx, field, obj)
		case "isCreateFsChat":
			out.Values[i] = ec._ProjectInfo_isCreateFsChat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isStar":
			out.Values[i] = ec._ProjectInfo_isStar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "privacyStatus":
			out.Values[i] = ec._ProjectInfo_privacyStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._ProjectInfo_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._ProjectInfo_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectListImplementors = []string{"ProjectList"}

func (ec *executionContext) _ProjectList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectList")
		case "total":
			out.Values[i] = ec._ProjectList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectMemberIdListRespImplementors = []string{"ProjectMemberIdListResp"}

func (ec *executionContext) _ProjectMemberIdListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectMemberIDListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectMemberIdListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectMemberIdListResp")
		case "departmentIds":
			out.Values[i] = ec._ProjectMemberIdListResp_departmentIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userIds":
			out.Values[i] = ec._ProjectMemberIdListResp_userIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectTypeImplementors = []string{"ProjectType"}

func (ec *executionContext) _ProjectType(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectType")
		case "id":
			out.Values[i] = ec._ProjectType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectType_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._ProjectType_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProjectType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._ProjectType_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cover":
			out.Values[i] = ec._ProjectType_cover(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultProcessId":
			out.Values[i] = ec._ProjectType_defaultProcessId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isReadonly":
			out.Values[i] = ec._ProjectType_isReadonly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ProjectType_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectType_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectType_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectType_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectType_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectType_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectTypeListImplementors = []string{"ProjectTypeList"}

func (ec *executionContext) _ProjectTypeList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectTypeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTypeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTypeList")
		case "total":
			out.Values[i] = ec._ProjectTypeList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectTypeList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "personalInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personalInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOrgConfig":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrgConfig(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPayRemind":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPayRemind(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userConfigInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userConfigInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueInfoNotDelete":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueInfoNotDelete(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueStatusTypeStat":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueStatusTypeStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueStatusTypeStatDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueStatusTypeStatDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueAssignRank":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueAssignRank(ctx, field)
				return res
			})
		case "fsDocumentList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fsDocumentList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "trendList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trendList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterationInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterationInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOssPostPolicy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOssPostPolicy(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getInviteCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getInviteCode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getInviteInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getInviteInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMQTTChannelKey":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMQTTChannelKey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projects":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projects(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterationStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterationStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectDayStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectDayStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "departments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "departmentMembers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departmentMembers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "departmentMembersList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departmentMembersList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userOrganizationList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userOrganizationList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "areaLinkageList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_areaLinkageList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "industryList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_industryList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "exportIssueTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_exportIssueTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orgUserList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgUserList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "exportData":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_exportData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectResource":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectResource(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectFolder":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectFolder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectAttachment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectAttachment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectAttachmentInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectAttachmentInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPersonalPermissionInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPersonalPermissionInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recycleBinList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recycleBinList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "payLimitNum":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payLimitNum(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getIssueWorkHoursInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getIssueWorkHoursInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getWorkHourStatistic":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkHourStatistic(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "checkIsIssueMember":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkIsIssueMember(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "checkIsEnableWorkHour":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkIsEnableWorkHour(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "exportWorkHourStatistic":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_exportWorkHourStatistic(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectMainChatId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectMainChatId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getFsProjectChatPushSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFsProjectChatPushSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectMemberIdList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectMemberIdList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAppTicket":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAppTicket(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getIssueViewList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getIssueViewList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "checkSpecificScope":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkSpecificScope(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "checkTokenValidity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkTokenValidity(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getJsApiTicket":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getJsApiTicket(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recycleBinImplementors = []string{"RecycleBin"}

func (ec *executionContext) _RecycleBin(ctx context.Context, sel ast.SelectionSet, obj *vo.RecycleBin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recycleBinImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecycleBin")
		case "id":
			out.Values[i] = ec._RecycleBin_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._RecycleBin_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._RecycleBin_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationId":
			out.Values[i] = ec._RecycleBin_relationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationType":
			out.Values[i] = ec._RecycleBin_relationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._RecycleBin_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._RecycleBin_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._RecycleBin_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._RecycleBin_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._RecycleBin_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._RecycleBin_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isCanDo":
			out.Values[i] = ec._RecycleBin_isCanDo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceInfo":
			out.Values[i] = ec._RecycleBin_resourceInfo(ctx, field, obj)
		case "tagInfo":
			out.Values[i] = ec._RecycleBin_tagInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recycleBinListImplementors = []string{"RecycleBinList"}

func (ec *executionContext) _RecycleBinList(ctx context.Context, sel ast.SelectionSet, obj *vo.RecycleBinList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recycleBinListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecycleBinList")
		case "total":
			out.Values[i] = ec._RecycleBinList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._RecycleBinList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var relationIssueImplementors = []string{"RelationIssue"}

func (ec *executionContext) _RelationIssue(ctx context.Context, sel ast.SelectionSet, obj *vo.RelationIssue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relationIssueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelationIssue")
		case "id":
			out.Values[i] = ec._RelationIssue_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._RelationIssue_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var relationTypeImplementors = []string{"RelationType"}

func (ec *executionContext) _RelationType(ctx context.Context, sel ast.SelectionSet, obj *vo.RelationType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relationTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelationType")
		case "userId":
			out.Values[i] = ec._RelationType_userId(ctx, field, obj)
		case "relationType":
			out.Values[i] = ec._RelationType_relationType(ctx, field, obj)
		case "projectId":
			out.Values[i] = ec._RelationType_projectId(ctx, field, obj)
		case "outOrgUserId":
			out.Values[i] = ec._RelationType_outOrgUserId(ctx, field, obj)
		case "outUserId":
			out.Values[i] = ec._RelationType_outUserId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._RelationType_name(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._RelationType_avatar(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceImplementors = []string{"Resource"}

func (ec *executionContext) _Resource(ctx context.Context, sel ast.SelectionSet, obj *vo.Resource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Resource")
		case "id":
			out.Values[i] = ec._Resource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Resource_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._Resource_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Resource_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "officeUrl":
			out.Values[i] = ec._Resource_officeUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pathCompressed":
			out.Values[i] = ec._Resource_pathCompressed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Resource_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Resource_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._Resource_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._Resource_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suffix":
			out.Values[i] = ec._Resource_suffix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "md5":
			out.Values[i] = ec._Resource_md5(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileType":
			out.Values[i] = ec._Resource_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Resource_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Resource_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Resource_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Resource_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Resource_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Resource_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceInfoImplementors = []string{"ResourceInfo"}

func (ec *executionContext) _ResourceInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.ResourceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceInfo")
		case "url":
			out.Values[i] = ec._ResourceInfo_url(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ResourceInfo_name(ctx, field, obj)
		case "size":
			out.Values[i] = ec._ResourceInfo_size(ctx, field, obj)
		case "uploadTime":
			out.Values[i] = ec._ResourceInfo_uploadTime(ctx, field, obj)
		case "suffix":
			out.Values[i] = ec._ResourceInfo_suffix(ctx, field, obj)
		case "creator":
			out.Values[i] = ec._ResourceInfo_creator(ctx, field, obj)
		case "creatorName":
			out.Values[i] = ec._ResourceInfo_creatorName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceListImplementors = []string{"ResourceList"}

func (ec *executionContext) _ResourceList(ctx context.Context, sel ast.SelectionSet, obj *vo.ResourceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceList")
		case "total":
			out.Values[i] = ec._ResourceList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ResourceList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *vo.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Role_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._Role_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Role_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isReadonly":
			out.Values[i] = ec._Role_isReadonly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isModifyPermission":
			out.Values[i] = ec._Role_isModifyPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._Role_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleGroupId":
			out.Values[i] = ec._Role_roleGroupId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Role_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Role_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Role_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Role_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Role_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var simpleTagInfoImplementors = []string{"SimpleTagInfo"}

func (ec *executionContext) _SimpleTagInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.SimpleTagInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, simpleTagInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SimpleTagInfo")
		case "id":
			out.Values[i] = ec._SimpleTagInfo_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SimpleTagInfo_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statCommonImplementors = []string{"StatCommon"}

func (ec *executionContext) _StatCommon(ctx context.Context, sel ast.SelectionSet, obj *vo.StatCommon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statCommonImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatCommon")
		case "name":
			out.Values[i] = ec._StatCommon_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._StatCommon_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statDataImplementors = []string{"StatData"}

func (ec *executionContext) _StatData(ctx context.Context, sel ast.SelectionSet, obj *vo.StatData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatData")
		case "issueCount":
			out.Values[i] = ec._StatData_issueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueWaitCount":
			out.Values[i] = ec._StatData_issueWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueRunningCount":
			out.Values[i] = ec._StatData_issueRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueEndCount":
			out.Values[i] = ec._StatData_issueEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointCount":
			out.Values[i] = ec._StatData_storyPointCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointWaitCount":
			out.Values[i] = ec._StatData_storyPointWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointRunningCount":
			out.Values[i] = ec._StatData_storyPointRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointEndCount":
			out.Values[i] = ec._StatData_storyPointEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statExtRespImplementors = []string{"StatExtResp"}

func (ec *executionContext) _StatExtResp(ctx context.Context, sel ast.SelectionSet, obj *vo.StatExtResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statExtRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatExtResp")
		case "issue":
			out.Values[i] = ec._StatExtResp_issue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statIssueExtImplementors = []string{"StatIssueExt"}

func (ec *executionContext) _StatIssueExt(ctx context.Context, sel ast.SelectionSet, obj *vo.StatIssueExt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statIssueExtImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatIssueExt")
		case "data":
			out.Values[i] = ec._StatIssueExt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statusTimeInfoImplementors = []string{"StatusTimeInfo"}

func (ec *executionContext) _StatusTimeInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.StatusTimeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusTimeInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatusTimeInfo")
		case "statusId":
			out.Values[i] = ec._StatusTimeInfo_statusId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusName":
			out.Values[i] = ec._StatusTimeInfo_statusName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusType":
			out.Values[i] = ec._StatusTimeInfo_statusType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._StatusTimeInfo_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._StatusTimeInfo_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._StatusTimeInfo_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._StatusTimeInfo_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *vo.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Tag_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Tag_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePinyin":
			out.Values[i] = ec._Tag_namePinyin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._Tag_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._Tag_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usedNum":
			out.Values[i] = ec._Tag_usedNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Tag_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Tag_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var thirdAccountBindListRespImplementors = []string{"ThirdAccountBindListResp"}

func (ec *executionContext) _ThirdAccountBindListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ThirdAccountBindListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thirdAccountBindListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThirdAccountBindListResp")
		case "sourceChannel":
			out.Values[i] = ec._ThirdAccountBindListResp_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ThirdAccountBindListResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._ThirdAccountBindListResp_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendImplementors = []string{"Trend"}

func (ec *executionContext) _Trend(ctx context.Context, sel ast.SelectionSet, obj *vo.Trend) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Trend")
		case "id":
			out.Values[i] = ec._Trend_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Trend_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module1":
			out.Values[i] = ec._Trend_module1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module2Id":
			out.Values[i] = ec._Trend_module2Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module2":
			out.Values[i] = ec._Trend_module2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module3Id":
			out.Values[i] = ec._Trend_module3Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module3":
			out.Values[i] = ec._Trend_module3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operCode":
			out.Values[i] = ec._Trend_operCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjId":
			out.Values[i] = ec._Trend_operObjId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjType":
			out.Values[i] = ec._Trend_operObjType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjProperty":
			out.Values[i] = ec._Trend_operObjProperty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationObjId":
			out.Values[i] = ec._Trend_relationObjId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationObjType":
			out.Values[i] = ec._Trend_relationObjType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationType":
			out.Values[i] = ec._Trend_relationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newValue":
			out.Values[i] = ec._Trend_newValue(ctx, field, obj)
		case "oldValue":
			out.Values[i] = ec._Trend_oldValue(ctx, field, obj)
		case "ext":
			out.Values[i] = ec._Trend_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Trend_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Trend_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjName":
			out.Values[i] = ec._Trend_operObjName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._Trend_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._Trend_comment(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._Trend_extension(ctx, field, obj)
		case "objIsDelete":
			out.Values[i] = ec._Trend_objIsDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendAuditInfoImplementors = []string{"TrendAuditInfo"}

func (ec *executionContext) _TrendAuditInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.TrendAuditInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendAuditInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendAuditInfo")
		case "status":
			out.Values[i] = ec._TrendAuditInfo_status(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._TrendAuditInfo_remark(ctx, field, obj)
		case "attachments":
			out.Values[i] = ec._TrendAuditInfo_attachments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendExtensionImplementors = []string{"TrendExtension"}

func (ec *executionContext) _TrendExtension(ctx context.Context, sel ast.SelectionSet, obj *vo.TrendExtension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendExtensionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendExtension")
		case "issueType":
			out.Values[i] = ec._TrendExtension_issueType(ctx, field, obj)
		case "ObjName":
			out.Values[i] = ec._TrendExtension_ObjName(ctx, field, obj)
		case "changeList":
			out.Values[i] = ec._TrendExtension_changeList(ctx, field, obj)
		case "memberInfo":
			out.Values[i] = ec._TrendExtension_memberInfo(ctx, field, obj)
		case "tagInfo":
			out.Values[i] = ec._TrendExtension_tagInfo(ctx, field, obj)
		case "relationIssue":
			out.Values[i] = ec._TrendExtension_relationIssue(ctx, field, obj)
		case "resourceInfo":
			out.Values[i] = ec._TrendExtension_resourceInfo(ctx, field, obj)
		case "commonChange":
			out.Values[i] = ec._TrendExtension_commonChange(ctx, field, obj)
		case "folderId":
			out.Values[i] = ec._TrendExtension_folderId(ctx, field, obj)
		case "fieldIds":
			out.Values[i] = ec._TrendExtension_fieldIds(ctx, field, obj)
		case "auditInfo":
			out.Values[i] = ec._TrendExtension_auditInfo(ctx, field, obj)
		case "addedFormFields":
			out.Values[i] = ec._TrendExtension_addedFormFields(ctx, field, obj)
		case "deletedFormFields":
			out.Values[i] = ec._TrendExtension_deletedFormFields(ctx, field, obj)
		case "updatedFormFields":
			out.Values[i] = ec._TrendExtension_updatedFormFields(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendsListImplementors = []string{"TrendsList"}

func (ec *executionContext) _TrendsList(ctx context.Context, sel ast.SelectionSet, obj *vo.TrendsList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendsListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendsList")
		case "total":
			out.Values[i] = ec._TrendsList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "page":
			out.Values[i] = ec._TrendsList_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._TrendsList_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastTrendId":
			out.Values[i] = ec._TrendsList_lastTrendId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._TrendsList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectFolderRespImplementors = []string{"UpdateProjectFolderResp"}

func (ec *executionContext) _UpdateProjectFolderResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateProjectFolderResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProjectFolderRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectFolderResp")
		case "folderId":
			out.Values[i] = ec._UpdateProjectFolderResp_folderId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectResourceFolderRespImplementors = []string{"UpdateProjectResourceFolderResp"}

func (ec *executionContext) _UpdateProjectResourceFolderResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateProjectResourceFolderResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProjectResourceFolderRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectResourceFolderResp")
		case "resourceIds":
			out.Values[i] = ec._UpdateProjectResourceFolderResp_resourceIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserConfigRespImplementors = []string{"UpdateUserConfigResp"}

func (ec *executionContext) _UpdateUserConfigResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateUserConfigResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserConfigRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserConfigResp")
		case "id":
			out.Values[i] = ec._UpdateUserConfigResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userConfigImplementors = []string{"UserConfig"}

func (ec *executionContext) _UserConfig(ctx context.Context, sel ast.SelectionSet, obj *vo.UserConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConfig")
		case "id":
			out.Values[i] = ec._UserConfig_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dailyReportMessageStatus":
			out.Values[i] = ec._UserConfig_dailyReportMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerRangeStatus":
			out.Values[i] = ec._UserConfig_ownerRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "collaborateMessageStatus":
			out.Values[i] = ec._UserConfig_collaborateMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participantRangeStatus":
			out.Values[i] = ec._UserConfig_participantRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attentionRangeStatus":
			out.Values[i] = ec._UserConfig_attentionRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRangeStatus":
			out.Values[i] = ec._UserConfig_createRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remindMessageStatus":
			out.Values[i] = ec._UserConfig_remindMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commentAtMessageStatus":
			out.Values[i] = ec._UserConfig_commentAtMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifyMessageStatus":
			out.Values[i] = ec._UserConfig_modifyMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationMessageStatus":
			out.Values[i] = ec._UserConfig_relationMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dailyProjectReportMessageStatus":
			out.Values[i] = ec._UserConfig_dailyProjectReportMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultProjectId":
			out.Values[i] = ec._UserConfig_defaultProjectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultProjectObjectTypeId":
			out.Values[i] = ec._UserConfig_defaultProjectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcNoticeOpenStatus":
			out.Values[i] = ec._UserConfig_pcNoticeOpenStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcIssueRemindMessageStatus":
			out.Values[i] = ec._UserConfig_pcIssueRemindMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcOrgMessageStatus":
			out.Values[i] = ec._UserConfig_pcOrgMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcProjectMessageStatus":
			out.Values[i] = ec._UserConfig_pcProjectMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcCommentAtMessageStatus":
			out.Values[i] = ec._UserConfig_pcCommentAtMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remindExpiring":
			out.Values[i] = ec._UserConfig_remindExpiring(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userDepartmentDataImplementors = []string{"UserDepartmentData"}

func (ec *executionContext) _UserDepartmentData(ctx context.Context, sel ast.SelectionSet, obj *vo.UserDepartmentData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDepartmentDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDepartmentData")
		case "departmentId":
			out.Values[i] = ec._UserDepartmentData_departmentId(ctx, field, obj)
		case "isLeader":
			out.Values[i] = ec._UserDepartmentData_isLeader(ctx, field, obj)
		case "deparmentName":
			out.Values[i] = ec._UserDepartmentData_deparmentName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userIdInfoImplementors = []string{"UserIdInfo"}

func (ec *executionContext) _UserIdInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.UserIDInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userIdInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserIdInfo")
		case "id":
			out.Values[i] = ec._UserIdInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._UserIdInfo_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserIdInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._UserIdInfo_namePy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserIdInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._UserIdInfo_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unionId":
			out.Values[i] = ec._UserIdInfo_unionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeleted":
			out.Values[i] = ec._UserIdInfo_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDisabled":
			out.Values[i] = ec._UserIdInfo_isDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userIdInfoExtraForIssueAuditImplementors = []string{"UserIdInfoExtraForIssueAudit"}

func (ec *executionContext) _UserIdInfoExtraForIssueAudit(ctx context.Context, sel ast.SelectionSet, obj *vo.UserIDInfoExtraForIssueAudit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userIdInfoExtraForIssueAuditImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserIdInfoExtraForIssueAudit")
		case "id":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_namePy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unionId":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_unionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeleted":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDisabled":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_isDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditStatus":
			out.Values[i] = ec._UserIdInfoExtraForIssueAudit_auditStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userInfoImplementors = []string{"UserInfo"}

func (ec *executionContext) _UserInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.UserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserInfo")
		case "userID":
			out.Values[i] = ec._UserInfo_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._UserInfo_namePy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._UserInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._UserInfo_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departmentList":
			out.Values[i] = ec._UserInfo_departmentList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleList":
			out.Values[i] = ec._UserInfo_roleList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._UserInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._UserInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusChangeTime":
			out.Values[i] = ec._UserInfo_statusChangeTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isCreator":
			out.Values[i] = ec._UserInfo_isCreator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLoginRespImplementors = []string{"UserLoginResp"}

func (ec *executionContext) _UserLoginResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UserLoginResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLoginRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLoginResp")
		case "token":
			out.Values[i] = ec._UserLoginResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._UserLoginResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._UserLoginResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._UserLoginResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._UserLoginResp_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserLoginResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserLoginResp_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "needInitOrg":
			out.Values[i] = ec._UserLoginResp_needInitOrg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notFsMobile":
			out.Values[i] = ec._UserLoginResp_notFsMobile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationImplementors = []string{"UserOrganization"}

func (ec *executionContext) _UserOrganization(ctx context.Context, sel ast.SelectionSet, obj *vo.UserOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganization")
		case "id":
			out.Values[i] = ec._UserOrganization_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserOrganization_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._UserOrganization_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "webSite":
			out.Values[i] = ec._UserOrganization_webSite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industryId":
			out.Values[i] = ec._UserOrganization_industryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scale":
			out.Values[i] = ec._UserOrganization_scale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourcePlatform":
			out.Values[i] = ec._UserOrganization_sourcePlatform(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceChannel":
			out.Values[i] = ec._UserOrganization_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryId":
			out.Values[i] = ec._UserOrganization_countryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provinceId":
			out.Values[i] = ec._UserOrganization_provinceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cityId":
			out.Values[i] = ec._UserOrganization_cityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._UserOrganization_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logoUrl":
			out.Values[i] = ec._UserOrganization_logoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resorceId":
			out.Values[i] = ec._UserOrganization_resorceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._UserOrganization_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "IsAuthenticated":
			out.Values[i] = ec._UserOrganization_IsAuthenticated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._UserOrganization_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._UserOrganization_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isShow":
			out.Values[i] = ec._UserOrganization_isShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._UserOrganization_isDelete(ctx, field, obj)
		case "OrgIsEnabled":
			out.Values[i] = ec._UserOrganization_OrgIsEnabled(ctx, field, obj)
		case "functions":
			out.Values[i] = ec._UserOrganization_functions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationListImplementors = []string{"UserOrganizationList"}

func (ec *executionContext) _UserOrganizationList(ctx context.Context, sel ast.SelectionSet, obj *vo.UserOrganizationList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userOrganizationListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganizationList")
		case "total":
			out.Values[i] = ec._UserOrganizationList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._UserOrganizationList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationListRespImplementors = []string{"UserOrganizationListResp"}

func (ec *executionContext) _UserOrganizationListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UserOrganizationListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userOrganizationListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganizationListResp")
		case "list":
			out.Values[i] = ec._UserOrganizationListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRegisterRespImplementors = []string{"UserRegisterResp"}

func (ec *executionContext) _UserRegisterResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UserRegisterResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRegisterRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRegisterResp")
		case "token":
			out.Values[i] = ec._UserRegisterResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRoleDataImplementors = []string{"UserRoleData"}

func (ec *executionContext) _UserRoleData(ctx context.Context, sel ast.SelectionSet, obj *vo.UserRoleData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRoleData")
		case "RoleId":
			out.Values[i] = ec._UserRoleData_RoleId(ctx, field, obj)
		case "RoleName":
			out.Values[i] = ec._UserRoleData_RoleName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRoleInfoImplementors = []string{"UserRoleInfo"}

func (ec *executionContext) _UserRoleInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.UserRoleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRoleInfo")
		case "id":
			out.Values[i] = ec._UserRoleInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserRoleInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._UserRoleInfo_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voidImplementors = []string{"Void"}

func (ec *executionContext) _Void(ctx context.Context, sel ast.SelectionSet, obj *vo.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Void")
		case "id":
			out.Values[i] = ec._Void_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var workHourWorkerImplementors = []string{"WorkHourWorker"}

func (ec *executionContext) _WorkHourWorker(ctx context.Context, sel ast.SelectionSet, obj *vo.WorkHourWorker) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workHourWorkerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkHourWorker")
		case "userId":
			out.Values[i] = ec._WorkHourWorker_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._WorkHourWorker_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._WorkHourWorker_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fsDocumentDataImplementors = []string{"fsDocumentData"}

func (ec *executionContext) _fsDocumentData(ctx context.Context, sel ast.SelectionSet, obj *vo.FsDocumentData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fsDocumentDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("fsDocumentData")
		case "title":
			out.Values[i] = ec._fsDocumentData_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "docsType":
			out.Values[i] = ec._fsDocumentData_docsType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "docsToken":
			out.Values[i] = ec._fsDocumentData_docsToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "docsUrl":
			out.Values[i] = ec._fsDocumentData_docsUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerName":
			out.Values[i] = ec._fsDocumentData_ownerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerId":
			out.Values[i] = ec._fsDocumentData_ownerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fsDocumentListRespImplementors = []string{"fsDocumentListResp"}

func (ec *executionContext) _fsDocumentListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.FsDocumentListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fsDocumentListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("fsDocumentListResp")
		case "total":
			out.Values[i] = ec._fsDocumentListResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._fsDocumentListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getIssueViewListRespImplementors = []string{"getIssueViewListResp"}

func (ec *executionContext) _getIssueViewListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetIssueViewListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getIssueViewListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getIssueViewListResp")
		case "total":
			out.Values[i] = ec._getIssueViewListResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._getIssueViewListResp_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueListStatDataImplementors = []string{"issueListStatData"}

func (ec *executionContext) _issueListStatData(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueListStatData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueListStatDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("issueListStatData")
		case "projectObjectTypeId":
			out.Values[i] = ec._issueListStatData_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeName":
			out.Values[i] = ec._issueListStatData_projectObjectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._issueListStatData_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finishedCount":
			out.Values[i] = ec._issueListStatData_finishedCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueCount":
			out.Values[i] = ec._issueListStatData_overdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectUserImplementors = []string{"projectUser"}

func (ec *executionContext) _projectUser(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("projectUser")
		case "creator":
			out.Values[i] = ec._projectUser_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._projectUser_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userInfo":
			out.Values[i] = ec._projectUser_userInfo(ctx, field, obj)
		case "creatorInfo":
			out.Values[i] = ec._projectUser_creatorInfo(ctx, field, obj)
		case "userRole":
			out.Values[i] = ec._projectUser_userRole(ctx, field, obj)
		case "type":
			out.Values[i] = ec._projectUser_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departmentInfo":
			out.Values[i] = ec._projectUser_departmentInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActualListItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualListItem(ctx context.Context, sel ast.SelectionSet, v *vo.ActualListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ActualListItem(ctx, sel, v)
}

func (ec *executionContext) marshalNActualWorkHourDateItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualWorkHourDateItem(ctx context.Context, sel ast.SelectionSet, v *vo.ActualWorkHourDateItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ActualWorkHourDateItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAddIssueAttachmentFsData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsDataᚄ(ctx context.Context, v interface{}) ([]*vo.AddIssueAttachmentFsData, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.AddIssueAttachmentFsData, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNAddIssueAttachmentFsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsData(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddIssueAttachmentFsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsData(ctx context.Context, v interface{}) (*vo.AddIssueAttachmentFsData, error) {
	res, err := ec.unmarshalInputAddIssueAttachmentFsData(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddIssueAttachmentFsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsReq(ctx context.Context, v interface{}) (vo.AddIssueAttachmentFsReq, error) {
	res, err := ec.unmarshalInputAddIssueAttachmentFsReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAddIssueAttachmentFsResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsResp(ctx context.Context, sel ast.SelectionSet, v vo.AddIssueAttachmentFsResp) graphql.Marshaler {
	return ec._AddIssueAttachmentFsResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNAddIssueAttachmentFsResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAddIssueAttachmentFsResp(ctx context.Context, sel ast.SelectionSet, v *vo.AddIssueAttachmentFsResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AddIssueAttachmentFsResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNAppInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx context.Context, sel ast.SelectionSet, v *vo.AppInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNApplyScopesResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐApplyScopesResp(ctx context.Context, sel ast.SelectionSet, v vo.ApplyScopesResp) graphql.Marshaler {
	return ec._ApplyScopesResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplyScopesResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐApplyScopesResp(ctx context.Context, sel ast.SelectionSet, v *vo.ApplyScopesResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApplyScopesResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAreaLinkageListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListReq(ctx context.Context, v interface{}) (vo.AreaLinkageListReq, error) {
	res, err := ec.unmarshalInputAreaLinkageListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAreaLinkageListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListResp(ctx context.Context, sel ast.SelectionSet, v vo.AreaLinkageListResp) graphql.Marshaler {
	return ec._AreaLinkageListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNAreaLinkageListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListResp(ctx context.Context, sel ast.SelectionSet, v *vo.AreaLinkageListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AreaLinkageListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNAreaLinkageResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx context.Context, sel ast.SelectionSet, v *vo.AreaLinkageResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AreaLinkageResp(ctx, sel, v)
}

func (ec *executionContext) marshalNAttachment2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx context.Context, sel ast.SelectionSet, v vo.Attachment) graphql.Marshaler {
	return ec._Attachment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachment2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *vo.Attachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) marshalNAttachmentList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentList(ctx context.Context, sel ast.SelectionSet, v vo.AttachmentList) graphql.Marshaler {
	return ec._AttachmentList(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachmentList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentList(ctx context.Context, sel ast.SelectionSet, v *vo.AttachmentList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AttachmentList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAttachmentSimpleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentSimpleInfo(ctx context.Context, v interface{}) (*vo.AttachmentSimpleInfo, error) {
	res, err := ec.unmarshalInputAttachmentSimpleInfo(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAuditIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAuditIssueReq(ctx context.Context, v interface{}) (vo.AuditIssueReq, error) {
	res, err := ec.unmarshalInputAuditIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBasicShowSetting2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBasicShowSetting(ctx context.Context, sel ast.SelectionSet, v *vo.BasicShowSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BasicShowSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBindLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBindLoginNameReq(ctx context.Context, v interface{}) (vo.BindLoginNameReq, error) {
	res, err := ec.unmarshalInputBindLoginNameReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBoolResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx context.Context, sel ast.SelectionSet, v vo.BoolResp) graphql.Marshaler {
	return ec._BoolResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNBoolResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoolResp(ctx context.Context, sel ast.SelectionSet, v *vo.BoolResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BoolResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoundFeiShuAccountReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoundFeiShuAccountReq(ctx context.Context, v interface{}) (vo.BoundFeiShuAccountReq, error) {
	res, err := ec.unmarshalInputBoundFeiShuAccountReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoundFeiShuReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBoundFeiShuReq(ctx context.Context, v interface{}) (vo.BoundFeiShuReq, error) {
	res, err := ec.unmarshalInputBoundFeiShuReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNChangeParentIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeParentIssueReq(ctx context.Context, v interface{}) (vo.ChangeParentIssueReq, error) {
	res, err := ec.unmarshalInputChangeParentIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCheckIsEnableWorkHourReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsEnableWorkHourReq(ctx context.Context, v interface{}) (vo.CheckIsEnableWorkHourReq, error) {
	res, err := ec.unmarshalInputCheckIsEnableWorkHourReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCheckIsEnableWorkHourResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsEnableWorkHourResp(ctx context.Context, sel ast.SelectionSet, v vo.CheckIsEnableWorkHourResp) graphql.Marshaler {
	return ec._CheckIsEnableWorkHourResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCheckIsEnableWorkHourResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsEnableWorkHourResp(ctx context.Context, sel ast.SelectionSet, v *vo.CheckIsEnableWorkHourResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckIsEnableWorkHourResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCheckIsIssueMemberReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckIsIssueMemberReq(ctx context.Context, v interface{}) (vo.CheckIsIssueMemberReq, error) {
	res, err := ec.unmarshalInputCheckIsIssueMemberReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCheckLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckLoginNameReq(ctx context.Context, v interface{}) (vo.CheckLoginNameReq, error) {
	res, err := ec.unmarshalInputCheckLoginNameReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCheckSpecificScopeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckSpecificScopeReq(ctx context.Context, v interface{}) (vo.CheckSpecificScopeReq, error) {
	res, err := ec.unmarshalInputCheckSpecificScopeReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCheckSpecificScopeResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckSpecificScopeResp(ctx context.Context, sel ast.SelectionSet, v vo.CheckSpecificScopeResp) graphql.Marshaler {
	return ec._CheckSpecificScopeResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCheckSpecificScopeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckSpecificScopeResp(ctx context.Context, sel ast.SelectionSet, v *vo.CheckSpecificScopeResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckSpecificScopeResp(ctx, sel, v)
}

func (ec *executionContext) marshalNCheckTokenValidityResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckTokenValidityResp(ctx context.Context, sel ast.SelectionSet, v vo.CheckTokenValidityResp) graphql.Marshaler {
	return ec._CheckTokenValidityResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNCheckTokenValidityResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckTokenValidityResp(ctx context.Context, sel ast.SelectionSet, v *vo.CheckTokenValidityResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckTokenValidityResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCondOrder2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondOrder(ctx context.Context, v interface{}) (*vo.CondOrder, error) {
	res, err := ec.unmarshalInputCondOrder(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCondsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondsData(ctx context.Context, v interface{}) (*vo.CondsData, error) {
	res, err := ec.unmarshalInputCondsData(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNConvertIssueToParentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertIssueToParentReq(ctx context.Context, v interface{}) (vo.ConvertIssueToParentReq, error) {
	res, err := ec.unmarshalInputConvertIssueToParentReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateIssueCommentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueCommentReq(ctx context.Context, v interface{}) (vo.CreateIssueCommentReq, error) {
	res, err := ec.unmarshalInputCreateIssueCommentReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateIterationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIterationReq(ctx context.Context, v interface{}) (vo.CreateIterationReq, error) {
	res, err := ec.unmarshalInputCreateIterationReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateOrgReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateOrgReq(ctx context.Context, v interface{}) (vo.CreateOrgReq, error) {
	res, err := ec.unmarshalInputCreateOrgReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectFolderReq(ctx context.Context, v interface{}) (vo.CreateProjectFolderReq, error) {
	res, err := ec.unmarshalInputCreateProjectFolderReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectReq(ctx context.Context, v interface{}) (vo.CreateProjectReq, error) {
	res, err := ec.unmarshalInputCreateProjectReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCustomValue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCustomValue(ctx context.Context, sel ast.SelectionSet, v *vo.CustomValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomValue(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteIssueBatchReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueBatchReq(ctx context.Context, v interface{}) (vo.DeleteIssueBatchReq, error) {
	res, err := ec.unmarshalInputDeleteIssueBatchReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteIssueBatchResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueBatchResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteIssueBatchResp) graphql.Marshaler {
	return ec._DeleteIssueBatchResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteIssueBatchResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueBatchResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteIssueBatchResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteIssueBatchResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueReq(ctx context.Context, v interface{}) (vo.DeleteIssueReq, error) {
	res, err := ec.unmarshalInputDeleteIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteIterationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIterationReq(ctx context.Context, v interface{}) (vo.DeleteIterationReq, error) {
	res, err := ec.unmarshalInputDeleteIterationReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteProjectAttachmentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentReq(ctx context.Context, v interface{}) (vo.DeleteProjectAttachmentReq, error) {
	res, err := ec.unmarshalInputDeleteProjectAttachmentReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteProjectAttachmentResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteProjectAttachmentResp) graphql.Marshaler {
	return ec._DeleteProjectAttachmentResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProjectAttachmentResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteProjectAttachmentResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProjectAttachmentResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderReq(ctx context.Context, v interface{}) (vo.DeleteProjectFolderReq, error) {
	res, err := ec.unmarshalInputDeleteProjectFolderReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteProjectFolderResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteProjectFolderResp) graphql.Marshaler {
	return ec._DeleteProjectFolderResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProjectFolderResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteProjectFolderResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProjectFolderResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProjectResourceReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceReq(ctx context.Context, v interface{}) (vo.DeleteProjectResourceReq, error) {
	res, err := ec.unmarshalInputDeleteProjectResourceReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteProjectResourceResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteProjectResourceResp) graphql.Marshaler {
	return ec._DeleteProjectResourceResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProjectResourceResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteProjectResourceResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProjectResourceResp(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartment2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *vo.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentList(ctx context.Context, sel ast.SelectionSet, v vo.DepartmentList) graphql.Marshaler {
	return ec._DepartmentList(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentList(ctx context.Context, sel ast.SelectionSet, v *vo.DepartmentList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentList(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentMemberInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.DepartmentMemberInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentMemberInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDepartmentMemberInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx context.Context, sel ast.SelectionSet, v *vo.DepartmentMemberInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentMemberInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepartmentMemberListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberListReq(ctx context.Context, v interface{}) (vo.DepartmentMemberListReq, error) {
	res, err := ec.unmarshalInputDepartmentMemberListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDepartmentMembersListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMembersListResp(ctx context.Context, sel ast.SelectionSet, v vo.DepartmentMembersListResp) graphql.Marshaler {
	return ec._DepartmentMembersListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentMembersListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMembersListResp(ctx context.Context, sel ast.SelectionSet, v *vo.DepartmentMembersListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentMembersListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNExportIssueTemplateResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx context.Context, sel ast.SelectionSet, v vo.ExportIssueTemplateResp) graphql.Marshaler {
	return ec._ExportIssueTemplateResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNExportIssueTemplateResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx context.Context, sel ast.SelectionSet, v *vo.ExportIssueTemplateResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExportIssueTemplateResp(ctx, sel, v)
}

func (ec *executionContext) marshalNExportWorkHourStatisticResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportWorkHourStatisticResp(ctx context.Context, sel ast.SelectionSet, v vo.ExportWorkHourStatisticResp) graphql.Marshaler {
	return ec._ExportWorkHourStatisticResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNExportWorkHourStatisticResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportWorkHourStatisticResp(ctx context.Context, sel ast.SelectionSet, v *vo.ExportWorkHourStatisticResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExportWorkHourStatisticResp(ctx, sel, v)
}

func (ec *executionContext) marshalNFeiShuAuthCodeResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthCodeResp(ctx context.Context, sel ast.SelectionSet, v vo.FeiShuAuthCodeResp) graphql.Marshaler {
	return ec._FeiShuAuthCodeResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNFeiShuAuthCodeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthCodeResp(ctx context.Context, sel ast.SelectionSet, v *vo.FeiShuAuthCodeResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FeiShuAuthCodeResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFeiShuAuthReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthReq(ctx context.Context, v interface{}) (vo.FeiShuAuthReq, error) {
	res, err := ec.unmarshalInputFeiShuAuthReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNFeiShuAuthResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthResp(ctx context.Context, sel ast.SelectionSet, v vo.FeiShuAuthResp) graphql.Marshaler {
	return ec._FeiShuAuthResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNFeiShuAuthResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFeiShuAuthResp(ctx context.Context, sel ast.SelectionSet, v *vo.FeiShuAuthResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FeiShuAuthResp(ctx, sel, v)
}

func (ec *executionContext) marshalNFolder2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Folder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFolder2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFolder2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx context.Context, sel ast.SelectionSet, v *vo.Folder) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Folder(ctx, sel, v)
}

func (ec *executionContext) marshalNFolderList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderList(ctx context.Context, sel ast.SelectionSet, v vo.FolderList) graphql.Marshaler {
	return ec._FolderList(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolderList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderList(ctx context.Context, sel ast.SelectionSet, v *vo.FolderList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FolderList(ctx, sel, v)
}

func (ec *executionContext) marshalNGetAppTicketResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetAppTicketResp(ctx context.Context, sel ast.SelectionSet, v vo.GetAppTicketResp) graphql.Marshaler {
	return ec._GetAppTicketResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetAppTicketResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetAppTicketResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetAppTicketResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetAppTicketResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetFsProjectChatPushSettingsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsReq(ctx context.Context, v interface{}) (vo.GetFsProjectChatPushSettingsReq, error) {
	res, err := ec.unmarshalInputGetFsProjectChatPushSettingsReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetFsProjectChatPushSettingsResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsResp(ctx context.Context, sel ast.SelectionSet, v vo.GetFsProjectChatPushSettingsResp) graphql.Marshaler {
	return ec._GetFsProjectChatPushSettingsResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetFsProjectChatPushSettingsResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetFsProjectChatPushSettingsResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetFsProjectChatPushSettingsResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetInviteCodeResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeResp(ctx context.Context, sel ast.SelectionSet, v vo.GetInviteCodeResp) graphql.Marshaler {
	return ec._GetInviteCodeResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetInviteCodeResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetInviteCodeResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetInviteCodeResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetInviteInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoReq(ctx context.Context, v interface{}) (vo.GetInviteInfoReq, error) {
	res, err := ec.unmarshalInputGetInviteInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetInviteInfoResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.GetInviteInfoResp) graphql.Marshaler {
	return ec._GetInviteInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetInviteInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetInviteInfoResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetInviteInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetIssueViewListItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.GetIssueViewListItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetIssueViewListItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGetIssueViewListItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListItem(ctx context.Context, sel ast.SelectionSet, v *vo.GetIssueViewListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetIssueViewListItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetIssueViewListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListReq(ctx context.Context, v interface{}) (vo.GetIssueViewListReq, error) {
	res, err := ec.unmarshalInputGetIssueViewListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetIssueWorkHoursInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueWorkHoursInfoReq(ctx context.Context, v interface{}) (vo.GetIssueWorkHoursInfoReq, error) {
	res, err := ec.unmarshalInputGetIssueWorkHoursInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetIssueWorkHoursInfoResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueWorkHoursInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.GetIssueWorkHoursInfoResp) graphql.Marshaler {
	return ec._GetIssueWorkHoursInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetIssueWorkHoursInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueWorkHoursInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetIssueWorkHoursInfoResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetIssueWorkHoursInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetJsApiTicketResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetJsAPITicketResp(ctx context.Context, sel ast.SelectionSet, v vo.GetJsAPITicketResp) graphql.Marshaler {
	return ec._GetJsApiTicketResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetJsApiTicketResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetJsAPITicketResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetJsAPITicketResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetJsApiTicketResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetMQTTChannelKeyReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyReq(ctx context.Context, v interface{}) (vo.GetMQTTChannelKeyReq, error) {
	res, err := ec.unmarshalInputGetMQTTChannelKeyReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetMQTTChannelKeyResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyResp(ctx context.Context, sel ast.SelectionSet, v vo.GetMQTTChannelKeyResp) graphql.Marshaler {
	return ec._GetMQTTChannelKeyResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetMQTTChannelKeyResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetMQTTChannelKeyResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetMQTTChannelKeyResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetPayRemindResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPayRemindResp(ctx context.Context, sel ast.SelectionSet, v vo.GetPayRemindResp) graphql.Marshaler {
	return ec._GetPayRemindResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetPayRemindResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPayRemindResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetPayRemindResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetPayRemindResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetPersonalPermissionInfoResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPersonalPermissionInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.GetPersonalPermissionInfoResp) graphql.Marshaler {
	return ec._GetPersonalPermissionInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetPersonalPermissionInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPersonalPermissionInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetPersonalPermissionInfoResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetPersonalPermissionInfoResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetProjectMainChatIdReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetProjectMainChatIDReq(ctx context.Context, v interface{}) (vo.GetProjectMainChatIDReq, error) {
	res, err := ec.unmarshalInputGetProjectMainChatIdReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetProjectMainChatIdResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetProjectMainChatIDResp(ctx context.Context, sel ast.SelectionSet, v vo.GetProjectMainChatIDResp) graphql.Marshaler {
	return ec._GetProjectMainChatIdResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetProjectMainChatIdResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetProjectMainChatIDResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetProjectMainChatIDResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetProjectMainChatIdResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetWorkHourStatisticReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticReq(ctx context.Context, v interface{}) (vo.GetWorkHourStatisticReq, error) {
	res, err := ec.unmarshalInputGetWorkHourStatisticReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetWorkHourStatisticResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticResp(ctx context.Context, sel ast.SelectionSet, v vo.GetWorkHourStatisticResp) graphql.Marshaler {
	return ec._GetWorkHourStatisticResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetWorkHourStatisticResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetWorkHourStatisticResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetWorkHourStatisticResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetWorkHourStatisticSummary2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetWorkHourStatisticSummary(ctx context.Context, sel ast.SelectionSet, v *vo.GetWorkHourStatisticSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetWorkHourStatisticSummary(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueGroup2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueGroup(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueOwnerInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueOwnerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueOwnerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssuePriorityInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssuePriorityInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssuePriorityInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueProjectInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueProjectInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueProjectInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueStatusInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueStatusInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueStatusInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueTagInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueTagInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueTagInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueWorkHourInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueWorkHourInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueWorkHourInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueWorkHourInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNIndustryListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryListResp(ctx context.Context, sel ast.SelectionSet, v vo.IndustryListResp) graphql.Marshaler {
	return ec._IndustryListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndustryListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryListResp(ctx context.Context, sel ast.SelectionSet, v *vo.IndustryListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndustryListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIndustryResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx context.Context, sel ast.SelectionSet, v *vo.IndustryResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndustryResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInitFeiShuAccountReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐInitFeiShuAccountReq(ctx context.Context, v interface{}) (vo.InitFeiShuAccountReq, error) {
	res, err := ec.unmarshalInputInitFeiShuAccountReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNInt642int64(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt642ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt642int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNIssue2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx context.Context, sel ast.SelectionSet, v vo.Issue) graphql.Marshaler {
	return ec._Issue(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Issue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx context.Context, sel ast.SelectionSet, v *vo.Issue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Issue(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueAssignRankInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueAssignRankInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueAssignRankInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIssueAssignRankReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankReq(ctx context.Context, v interface{}) (vo.IssueAssignRankReq, error) {
	res, err := ec.unmarshalInputIssueAssignRankReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNIssueInfo2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfo(ctx context.Context, sel ast.SelectionSet, v vo.IssueInfo) graphql.Marshaler {
	return ec._IssueInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIssueInfoNotDeleteReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfoNotDeleteReq(ctx context.Context, v interface{}) (vo.IssueInfoNotDeleteReq, error) {
	res, err := ec.unmarshalInputIssueInfoNotDeleteReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNIssueStatByObjectType2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueStatByObjectType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIssueStatByObjectType2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIssueStatusTypeStatDetailResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatDetailResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueStatusTypeStatDetailResp) graphql.Marshaler {
	return ec._IssueStatusTypeStatDetailResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueStatusTypeStatDetailResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatDetailResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueStatusTypeStatDetailResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueStatusTypeStatDetailResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueStatusTypeStatResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueStatusTypeStatResp) graphql.Marshaler {
	return ec._IssueStatusTypeStatResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueStatusTypeStatResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueStatusTypeStatResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueStatusTypeStatResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIssueTagReqInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx context.Context, v interface{}) (*vo.IssueTagReqInfo, error) {
	res, err := ec.unmarshalInputIssueTagReqInfo(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNIteration2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx context.Context, sel ast.SelectionSet, v *vo.Iteration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Iteration(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIterationInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoReq(ctx context.Context, v interface{}) (vo.IterationInfoReq, error) {
	res, err := ec.unmarshalInputIterationInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNIterationInfoResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.IterationInfoResp) graphql.Marshaler {
	return ec._IterationInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.IterationInfoResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIterationList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationList(ctx context.Context, sel ast.SelectionSet, v vo.IterationList) graphql.Marshaler {
	return ec._IterationList(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationList(ctx context.Context, sel ast.SelectionSet, v *vo.IterationList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationList(ctx, sel, v)
}

func (ec *executionContext) marshalNIterationStat2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx context.Context, sel ast.SelectionSet, v *vo.IterationStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationStat(ctx, sel, v)
}

func (ec *executionContext) marshalNIterationStatList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatList(ctx context.Context, sel ast.SelectionSet, v vo.IterationStatList) graphql.Marshaler {
	return ec._IterationStatList(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationStatList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatList(ctx context.Context, sel ast.SelectionSet, v *vo.IterationStatList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationStatList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIterationStatReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatReq(ctx context.Context, v interface{}) (vo.IterationStatReq, error) {
	res, err := ec.unmarshalInputIterationStatReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNJoinOrgByInviteCodeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐJoinOrgByInviteCodeReq(ctx context.Context, v interface{}) (vo.JoinOrgByInviteCodeReq, error) {
	res, err := ec.unmarshalInputJoinOrgByInviteCodeReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNLessCondsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessCondsData(ctx context.Context, v interface{}) (*vo.LessCondsData, error) {
	res, err := ec.unmarshalInputLessCondsData(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNLessOrder2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessOrder(ctx context.Context, v interface{}) (*vo.LessOrder, error) {
	res, err := ec.unmarshalInputLessOrder(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMap2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNMap2map(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNMap2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNMap2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNNewPredicateWorkHour2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNewPredicateWorkHour(ctx context.Context, v interface{}) (*vo.NewPredicateWorkHour, error) {
	res, err := ec.unmarshalInputNewPredicateWorkHour(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNOneDateWorkHour2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneDateWorkHour(ctx context.Context, sel ast.SelectionSet, v *vo.OneDateWorkHour) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OneDateWorkHour(ctx, sel, v)
}

func (ec *executionContext) marshalNOnePersonWorkHourStatisticInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOnePersonWorkHourStatisticInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.OnePersonWorkHourStatisticInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOnePersonWorkHourStatisticInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOnePersonWorkHourStatisticInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOneWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneWorkHourRecord(ctx context.Context, sel ast.SelectionSet, v *vo.OneWorkHourRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OneWorkHourRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNOrgConfig2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgConfig(ctx context.Context, sel ast.SelectionSet, v vo.OrgConfig) graphql.Marshaler {
	return ec._OrgConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrgConfig2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgConfig(ctx context.Context, sel ast.SelectionSet, v *vo.OrgConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrgConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrgUserListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgUserListReq(ctx context.Context, v interface{}) (vo.OrgUserListReq, error) {
	res, err := ec.unmarshalInputOrgUserListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoReq(ctx context.Context, v interface{}) (vo.OrganizationInfoReq, error) {
	res, err := ec.unmarshalInputOrganizationInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationInfoResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.OrganizationInfoResp) graphql.Marshaler {
	return ec._OrganizationInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationInfoResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.OrganizationInfoResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationUser2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx context.Context, sel ast.SelectionSet, v *vo.OrganizationUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOssPostPolicyReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyReq(ctx context.Context, v interface{}) (vo.OssPostPolicyReq, error) {
	res, err := ec.unmarshalInputOssPostPolicyReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNOssPostPolicyResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyResp(ctx context.Context, sel ast.SelectionSet, v vo.OssPostPolicyResp) graphql.Marshaler {
	return ec._OssPostPolicyResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOssPostPolicyResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyResp(ctx context.Context, sel ast.SelectionSet, v *vo.OssPostPolicyResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OssPostPolicyResp(ctx, sel, v)
}

func (ec *executionContext) marshalNParentInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐParentInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.ParentInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParentInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐParentInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNParentInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐParentInfo(ctx context.Context, sel ast.SelectionSet, v *vo.ParentInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ParentInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPayLimitNumResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPayLimitNumResp(ctx context.Context, sel ast.SelectionSet, v vo.PayLimitNumResp) graphql.Marshaler {
	return ec._PayLimitNumResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayLimitNumResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPayLimitNumResp(ctx context.Context, sel ast.SelectionSet, v *vo.PayLimitNumResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PayLimitNumResp(ctx, sel, v)
}

func (ec *executionContext) marshalNPermission2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx context.Context, sel ast.SelectionSet, v *vo.Permission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) marshalNPermissionOperation2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx context.Context, sel ast.SelectionSet, v *vo.PermissionOperation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PermissionOperation(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonalInfo2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v vo.PersonalInfo) graphql.Marshaler {
	return ec._PersonalInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v *vo.PersonalInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PersonalInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPredictListItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPredictListItem(ctx context.Context, sel ast.SelectionSet, v *vo.PredictListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PredictListItem(ctx, sel, v)
}

func (ec *executionContext) marshalNPriority2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx context.Context, sel ast.SelectionSet, v *vo.Priority) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Priority(ctx, sel, v)
}

func (ec *executionContext) marshalNProject2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx context.Context, sel ast.SelectionSet, v vo.Project) graphql.Marshaler {
	return ec._Project(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx context.Context, sel ast.SelectionSet, v *vo.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectAttachmentInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectAttachmentInfoReq(ctx context.Context, v interface{}) (vo.ProjectAttachmentInfoReq, error) {
	res, err := ec.unmarshalInputProjectAttachmentInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectAttachmentReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectAttachmentReq(ctx context.Context, v interface{}) (vo.ProjectAttachmentReq, error) {
	res, err := ec.unmarshalInputProjectAttachmentReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNProjectDayStat2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectDayStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectDayStat(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectDayStatList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatList(ctx context.Context, sel ast.SelectionSet, v vo.ProjectDayStatList) graphql.Marshaler {
	return ec._ProjectDayStatList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectDayStatList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatList(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectDayStatList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectDayStatList(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectDetail2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx context.Context, sel ast.SelectionSet, v vo.ProjectDetail) graphql.Marshaler {
	return ec._ProjectDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectDetail2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectFolderReq(ctx context.Context, v interface{}) (vo.ProjectFolderReq, error) {
	res, err := ec.unmarshalInputProjectFolderReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNProjectInfo2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfo(ctx context.Context, sel ast.SelectionSet, v vo.ProjectInfo) graphql.Marshaler {
	return ec._ProjectInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfo(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfoReq(ctx context.Context, v interface{}) (vo.ProjectInfoReq, error) {
	res, err := ec.unmarshalInputProjectInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNProjectList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectList(ctx context.Context, sel ast.SelectionSet, v vo.ProjectList) graphql.Marshaler {
	return ec._ProjectList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectList(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectMemberIdListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectMemberIDListReq(ctx context.Context, v interface{}) (vo.ProjectMemberIDListReq, error) {
	res, err := ec.unmarshalInputProjectMemberIdListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNProjectMemberIdListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectMemberIDListResp(ctx context.Context, sel ast.SelectionSet, v vo.ProjectMemberIDListResp) graphql.Marshaler {
	return ec._ProjectMemberIdListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectMemberIdListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectMemberIDListResp(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectMemberIDListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectMemberIdListResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectResourceReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectResourceReq(ctx context.Context, v interface{}) (vo.ProjectResourceReq, error) {
	res, err := ec.unmarshalInputProjectResourceReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNProjectType2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecoverRecycleBinRecordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecoverRecycleBinRecordReq(ctx context.Context, v interface{}) (vo.RecoverRecycleBinRecordReq, error) {
	res, err := ec.unmarshalInputRecoverRecycleBinRecordReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNRecycleBin2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBin(ctx context.Context, sel ast.SelectionSet, v *vo.RecycleBin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecycleBin(ctx, sel, v)
}

func (ec *executionContext) marshalNRecycleBinList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinList(ctx context.Context, sel ast.SelectionSet, v vo.RecycleBinList) graphql.Marshaler {
	return ec._RecycleBinList(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecycleBinList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinList(ctx context.Context, sel ast.SelectionSet, v *vo.RecycleBinList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecycleBinList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecycleBinListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinListReq(ctx context.Context, v interface{}) (vo.RecycleBinListReq, error) {
	res, err := ec.unmarshalInputRecycleBinListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNResetPasswordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResetPasswordReq(ctx context.Context, v interface{}) (vo.ResetPasswordReq, error) {
	res, err := ec.unmarshalInputResetPasswordReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNResource2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Resource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResource2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNResource2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx context.Context, sel ast.SelectionSet, v *vo.Resource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Resource(ctx, sel, v)
}

func (ec *executionContext) marshalNResourceList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx context.Context, sel ast.SelectionSet, v vo.ResourceList) graphql.Marshaler {
	return ec._ResourceList(ctx, sel, &v)
}

func (ec *executionContext) marshalNResourceList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx context.Context, sel ast.SelectionSet, v *vo.ResourceList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResourceList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRetrievePasswordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRetrievePasswordReq(ctx context.Context, v interface{}) (vo.RetrievePasswordReq, error) {
	res, err := ec.unmarshalInputRetrievePasswordReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNSendAuthCodeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendAuthCodeReq(ctx context.Context, v interface{}) (vo.SendAuthCodeReq, error) {
	res, err := ec.unmarshalInputSendAuthCodeReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNSendSmsLoginCodeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendSmsLoginCodeReq(ctx context.Context, v interface{}) (vo.SendSmsLoginCodeReq, error) {
	res, err := ec.unmarshalInputSendSmsLoginCodeReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetPasswordReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSetPasswordReq(ctx context.Context, v interface{}) (vo.SetPasswordReq, error) {
	res, err := ec.unmarshalInputSetPasswordReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetUserJoinIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSetUserJoinIssueReq(ctx context.Context, v interface{}) (vo.SetUserJoinIssueReq, error) {
	res, err := ec.unmarshalInputSetUserJoinIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNStatCommon2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx context.Context, sel ast.SelectionSet, v *vo.StatCommon) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatCommon(ctx, sel, v)
}

func (ec *executionContext) marshalNStatIssueExt2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatIssueExt(ctx context.Context, sel ast.SelectionSet, v *vo.StatIssueExt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatIssueExt(ctx, sel, v)
}

func (ec *executionContext) marshalNStatusTimeInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfo(ctx context.Context, sel ast.SelectionSet, v *vo.StatusTimeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatusTimeInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStatusTimeInfoReq2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfoReqᚄ(ctx context.Context, v interface{}) ([]*vo.StatusTimeInfoReq, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.StatusTimeInfoReq, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNStatusTimeInfoReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfoReq(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNStatusTimeInfoReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfoReq(ctx context.Context, v interface{}) (*vo.StatusTimeInfoReq, error) {
	res, err := ec.unmarshalInputStatusTimeInfoReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNSwitchUserOrganizationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSwitchUserOrganizationReq(ctx context.Context, v interface{}) (vo.SwitchUserOrganizationReq, error) {
	res, err := ec.unmarshalInputSwitchUserOrganizationReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, v interface{}) (types.Time, error) {
	var res types.Time
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNTime2giteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, sel ast.SelectionSet, v types.Time) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTrendsList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendsList(ctx context.Context, sel ast.SelectionSet, v vo.TrendsList) graphql.Marshaler {
	return ec._TrendsList(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrendsList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendsList(ctx context.Context, sel ast.SelectionSet, v *vo.TrendsList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TrendsList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUnbindLoginNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUnbindLoginNameReq(ctx context.Context, v interface{}) (vo.UnbindLoginNameReq, error) {
	res, err := ec.unmarshalInputUnbindLoginNameReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateFsProjectChatPushSettingsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateFsProjectChatPushSettingsReq(ctx context.Context, v interface{}) (vo.UpdateFsProjectChatPushSettingsReq, error) {
	res, err := ec.unmarshalInputUpdateFsProjectChatPushSettingsReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateIssueCustionFieldData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueCustionFieldData(ctx context.Context, v interface{}) (*vo.UpdateIssueCustionFieldData, error) {
	res, err := ec.unmarshalInputUpdateIssueCustionFieldData(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateIterationReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationReq(ctx context.Context, v interface{}) (vo.UpdateIterationReq, error) {
	res, err := ec.unmarshalInputUpdateIterationReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateIterationSortReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationSortReq(ctx context.Context, v interface{}) (vo.UpdateIterationSortReq, error) {
	res, err := ec.unmarshalInputUpdateIterationSortReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateIterationStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationStatusReq(ctx context.Context, v interface{}) (vo.UpdateIterationStatusReq, error) {
	res, err := ec.unmarshalInputUpdateIterationStatusReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateIterationStatusTimeReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationStatusTimeReq(ctx context.Context, v interface{}) (vo.UpdateIterationStatusTimeReq, error) {
	res, err := ec.unmarshalInputUpdateIterationStatusTimeReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateOneMultiWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOneMultiWorkHourRecord(ctx context.Context, v interface{}) (*vo.UpdateOneMultiWorkHourRecord, error) {
	res, err := ec.unmarshalInputUpdateOneMultiWorkHourRecord(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateOrgMemberCheckStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberCheckStatusReq(ctx context.Context, v interface{}) (vo.UpdateOrgMemberCheckStatusReq, error) {
	res, err := ec.unmarshalInputUpdateOrgMemberCheckStatusReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateOrgMemberStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberStatusReq(ctx context.Context, v interface{}) (vo.UpdateOrgMemberStatusReq, error) {
	res, err := ec.unmarshalInputUpdateOrgMemberStatusReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateOrganizationSettingsReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrganizationSettingsReq(ctx context.Context, v interface{}) (vo.UpdateOrganizationSettingsReq, error) {
	res, err := ec.unmarshalInputUpdateOrganizationSettingsReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectDetailReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectDetailReq(ctx context.Context, v interface{}) (vo.UpdateProjectDetailReq, error) {
	res, err := ec.unmarshalInputUpdateProjectDetailReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectFileResourceReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFileResourceReq(ctx context.Context, v interface{}) (vo.UpdateProjectFileResourceReq, error) {
	res, err := ec.unmarshalInputUpdateProjectFileResourceReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderReq(ctx context.Context, v interface{}) (vo.UpdateProjectFolderReq, error) {
	res, err := ec.unmarshalInputUpdateProjectFolderReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateProjectFolderResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateProjectFolderResp) graphql.Marshaler {
	return ec._UpdateProjectFolderResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProjectFolderResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateProjectFolderResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProjectFolderResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProjectReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectReq(ctx context.Context, v interface{}) (vo.UpdateProjectReq, error) {
	res, err := ec.unmarshalInputUpdateProjectReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectResourceFolderReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderReq(ctx context.Context, v interface{}) (vo.UpdateProjectResourceFolderReq, error) {
	res, err := ec.unmarshalInputUpdateProjectResourceFolderReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateProjectResourceFolderResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateProjectResourceFolderResp) graphql.Marshaler {
	return ec._UpdateProjectResourceFolderResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProjectResourceFolderResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateProjectResourceFolderResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProjectResourceFolderResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProjectResourceNameReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceNameReq(ctx context.Context, v interface{}) (vo.UpdateProjectResourceNameReq, error) {
	res, err := ec.unmarshalInputUpdateProjectResourceNameReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectStatusReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectStatusReq(ctx context.Context, v interface{}) (vo.UpdateProjectStatusReq, error) {
	res, err := ec.unmarshalInputUpdateProjectStatusReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserConfigReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigReq(ctx context.Context, v interface{}) (vo.UpdateUserConfigReq, error) {
	res, err := ec.unmarshalInputUpdateUserConfigReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateUserConfigResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateUserConfigResp) graphql.Marshaler {
	return ec._UpdateUserConfigResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateUserConfigResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateUserConfigResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateUserConfigResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateUserInfoReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserInfoReq(ctx context.Context, v interface{}) (vo.UpdateUserInfoReq, error) {
	res, err := ec.unmarshalInputUpdateUserInfoReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserPcConfigReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserPcConfigReq(ctx context.Context, v interface{}) (vo.UpdateUserPcConfigReq, error) {
	res, err := ec.unmarshalInputUpdateUserPcConfigReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUrgeAuditIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUrgeAuditIssueReq(ctx context.Context, v interface{}) (vo.UrgeAuditIssueReq, error) {
	res, err := ec.unmarshalInputUrgeAuditIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUrgeIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUrgeIssueReq(ctx context.Context, v interface{}) (vo.UrgeIssueReq, error) {
	res, err := ec.unmarshalInputUrgeIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUserConfig2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserConfig(ctx context.Context, sel ast.SelectionSet, v vo.UserConfig) graphql.Marshaler {
	return ec._UserConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserConfig2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserConfig(ctx context.Context, sel ast.SelectionSet, v *vo.UserConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserConfig(ctx, sel, v)
}

func (ec *executionContext) marshalNUserDepartmentData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserDepartmentDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.UserDepartmentData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserDepartmentData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserDepartmentData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserDepartmentData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserDepartmentData(ctx context.Context, sel ast.SelectionSet, v *vo.UserDepartmentData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserDepartmentData(ctx, sel, v)
}

func (ec *executionContext) marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v *vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserIdInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNUserIdInfoExtraForIssueAudit2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoExtraForIssueAudit(ctx context.Context, sel ast.SelectionSet, v *vo.UserIDInfoExtraForIssueAudit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserIdInfoExtraForIssueAudit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserLoginReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginReq(ctx context.Context, v interface{}) (vo.UserLoginReq, error) {
	res, err := ec.unmarshalInputUserLoginReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUserLoginResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginResp(ctx context.Context, sel ast.SelectionSet, v vo.UserLoginResp) graphql.Marshaler {
	return ec._UserLoginResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserLoginResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginResp(ctx context.Context, sel ast.SelectionSet, v *vo.UserLoginResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserLoginResp(ctx, sel, v)
}

func (ec *executionContext) marshalNUserOrganization2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx context.Context, sel ast.SelectionSet, v *vo.UserOrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserOrganization(ctx, sel, v)
}

func (ec *executionContext) marshalNUserOrganizationList2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationList(ctx context.Context, sel ast.SelectionSet, v vo.UserOrganizationList) graphql.Marshaler {
	return ec._UserOrganizationList(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserOrganizationList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationList(ctx context.Context, sel ast.SelectionSet, v *vo.UserOrganizationList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserOrganizationList(ctx, sel, v)
}

func (ec *executionContext) marshalNUserOrganizationListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationListResp(ctx context.Context, sel ast.SelectionSet, v vo.UserOrganizationListResp) graphql.Marshaler {
	return ec._UserOrganizationListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserOrganizationListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationListResp(ctx context.Context, sel ast.SelectionSet, v *vo.UserOrganizationListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserOrganizationListResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRegisterReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterReq(ctx context.Context, v interface{}) (vo.UserRegisterReq, error) {
	res, err := ec.unmarshalInputUserRegisterReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUserRegisterResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterResp(ctx context.Context, sel ast.SelectionSet, v vo.UserRegisterResp) graphql.Marshaler {
	return ec._UserRegisterResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserRegisterResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterResp(ctx context.Context, sel ast.SelectionSet, v *vo.UserRegisterResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserRegisterResp(ctx, sel, v)
}

func (ec *executionContext) marshalNUserRoleData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.UserRoleData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserRoleData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserRoleData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleData(ctx context.Context, sel ast.SelectionSet, v *vo.UserRoleData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserRoleData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNViewAuditIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐViewAuditIssueReq(ctx context.Context, v interface{}) (vo.ViewAuditIssueReq, error) {
	res, err := ec.unmarshalInputViewAuditIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNVoid2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx context.Context, sel ast.SelectionSet, v vo.Void) graphql.Marshaler {
	return ec._Void(ctx, sel, &v)
}

func (ec *executionContext) marshalNVoid2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx context.Context, sel ast.SelectionSet, v *vo.Void) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Void(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWithdrawIssueReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐWithdrawIssueReq(ctx context.Context, v interface{}) (vo.WithdrawIssueReq, error) {
	res, err := ec.unmarshalInputWithdrawIssueReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNWorkHourWorker2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐWorkHourWorker(ctx context.Context, sel ast.SelectionSet, v *vo.WorkHourWorker) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WorkHourWorker(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNfsDocumentData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentData(ctx context.Context, sel ast.SelectionSet, v *vo.FsDocumentData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._fsDocumentData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNfsDocumentListReq2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentListReq(ctx context.Context, v interface{}) (vo.FsDocumentListReq, error) {
	res, err := ec.unmarshalInputfsDocumentListReq(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNfsDocumentListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentListResp(ctx context.Context, sel ast.SelectionSet, v vo.FsDocumentListResp) graphql.Marshaler {
	return ec._fsDocumentListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNfsDocumentListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentListResp(ctx context.Context, sel ast.SelectionSet, v *vo.FsDocumentListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._fsDocumentListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNgetIssueViewListResp2giteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListResp(ctx context.Context, sel ast.SelectionSet, v vo.GetIssueViewListResp) graphql.Marshaler {
	return ec._getIssueViewListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNgetIssueViewListResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueViewListResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetIssueViewListResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._getIssueViewListResp(ctx, sel, v)
}

func (ec *executionContext) marshalOActualListItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.ActualListItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActualListItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOActualWorkHourDateItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualWorkHourDateItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.ActualWorkHourDateItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActualWorkHourDateItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐActualWorkHourDateItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalAny(v)
}

func (ec *executionContext) marshalOAppInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.AppInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAreaLinkageResp2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageRespᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.AreaLinkageResp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAreaLinkageResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAttachment2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttachment2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAttachmentSimpleInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentSimpleInfoᚄ(ctx context.Context, v interface{}) ([]*vo.AttachmentSimpleInfo, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.AttachmentSimpleInfo, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNAttachmentSimpleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentSimpleInfo(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOChangeList2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx context.Context, sel ast.SelectionSet, v []*vo.ChangeList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChangeList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOChangeList2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx context.Context, sel ast.SelectionSet, v *vo.ChangeList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChangeList(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCondOrder2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondOrderᚄ(ctx context.Context, v interface{}) ([]*vo.CondOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.CondOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCondOrder2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondOrder(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCondsData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondsDataᚄ(ctx context.Context, v interface{}) ([]*vo.CondsData, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.CondsData, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCondsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCondsData(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCreateIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueWorkHoursReq(ctx context.Context, v interface{}) (*vo.CreateIssueWorkHoursReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateIssueWorkHoursReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateMultiIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateMultiIssueWorkHoursReq(ctx context.Context, v interface{}) (*vo.CreateMultiIssueWorkHoursReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateMultiIssueWorkHoursReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOCustomValue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCustomValueᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.CustomValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomValue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCustomValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODeleteIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueWorkHoursReq(ctx context.Context, v interface{}) (*vo.DeleteIssueWorkHoursReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeleteIssueWorkHoursReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODepartment2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODepartmentListReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentListReq(ctx context.Context, v interface{}) (*vo.DepartmentListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentListReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentMemberInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.DepartmentMemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentMemberInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODepartmentMembersListReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMembersListReq(ctx context.Context, v interface{}) (*vo.DepartmentMembersListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentMembersListReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentSimpleInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentSimpleInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.DepartmentSimpleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODepartmentSimpleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentSimpleInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODepartmentSimpleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentSimpleInfo(ctx context.Context, sel ast.SelectionSet, v *vo.DepartmentSimpleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentSimpleInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOGetExportFieldsRespFieldsItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetExportFieldsRespFieldsItem(ctx context.Context, sel ast.SelectionSet, v []*vo.GetExportFieldsRespFieldsItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetExportFieldsRespFieldsItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetExportFieldsRespFieldsItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGetExportFieldsRespFieldsItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetExportFieldsRespFieldsItem(ctx context.Context, sel ast.SelectionSet, v *vo.GetExportFieldsRespFieldsItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetExportFieldsRespFieldsItem(ctx, sel, v)
}

func (ec *executionContext) marshalOGetFsProjectChatPushSettingsOneChat2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsOneChat(ctx context.Context, sel ast.SelectionSet, v *vo.GetFsProjectChatPushSettingsOneChat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetFsProjectChatPushSettingsOneChat(ctx, sel, v)
}

func (ec *executionContext) marshalOGetFsProjectChatPushSettingsOneChatTables2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsOneChatTables(ctx context.Context, sel ast.SelectionSet, v []*vo.GetFsProjectChatPushSettingsOneChatTables) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetFsProjectChatPushSettingsOneChatTables2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsOneChatTables(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGetFsProjectChatPushSettingsOneChatTables2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetFsProjectChatPushSettingsOneChatTables(ctx context.Context, sel ast.SelectionSet, v *vo.GetFsProjectChatPushSettingsOneChatTables) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetFsProjectChatPushSettingsOneChatTables(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGetInviteCodeReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeReq(ctx context.Context, v interface{}) (*vo.GetInviteCodeReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetInviteCodeReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOHomeIssueGroup2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueGroup2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHomeIssueInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHomeIssueOwnerInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueOwnerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueOwnerInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHomeIssueStatusInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueStatusInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueStatusInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHomeIssueTagInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueTagInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueTagInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIndustryResp2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryRespᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.IndustryResp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIndustryResp2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt642ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNInt642int64(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt642int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚕᚖint64(ctx context.Context, v interface{}) ([]*int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOInt642ᚖint64(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕᚖint64(ctx context.Context, sel ast.SelectionSet, v []*int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt642ᚖint64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) marshalOIssue2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIssueAssignRankInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueAssignRankInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueAssignRankInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIssueChildren2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx context.Context, v interface{}) ([]*vo.IssueChildren, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.IssueChildren, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOIssueChildren2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIssueChildren2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx context.Context, v interface{}) (*vo.IssueChildren, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIssueChildren(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOIssueObjectTypeInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueObjectTypeInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueObjectTypeInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOIssuePropertyInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssuePropertyInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssuePropertyInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssuePropertyInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOIssueSourceInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueSourceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueSourceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOIssueStatByObjectType2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, v *vo.IssueStatByObjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueStatByObjectType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIssueStatusTypeStatReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx context.Context, v interface{}) (*vo.IssueStatusTypeStatReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIssueStatusTypeStatReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOIssueTagReqInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfoᚄ(ctx context.Context, v interface{}) ([]*vo.IssueTagReqInfo, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.IssueTagReqInfo, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNIssueTagReqInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOIteration2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Iteration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIteration2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIterationListReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationListReq(ctx context.Context, v interface{}) (*vo.IterationListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIterationListReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOIterationStat2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.IterationStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIterationStat2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIterationStatSimple2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatSimple(ctx context.Context, sel ast.SelectionSet, v *vo.IterationStatSimple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IterationStatSimple(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLessCondsData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessCondsDataᚄ(ctx context.Context, v interface{}) ([]*vo.LessCondsData, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.LessCondsData, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNLessCondsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessCondsData(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLessCondsData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessCondsData(ctx context.Context, v interface{}) (*vo.LessCondsData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLessCondsData(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOLessOrder2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessOrderᚄ(ctx context.Context, v interface{}) ([]*vo.LessOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.LessOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNLessOrder2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐLessOrder(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalMap(v)
}

func (ec *executionContext) marshalOMemberInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.MemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMemberInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMemberInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx context.Context, sel ast.SelectionSet, v *vo.MemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MemberInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewPredicateWorkHour2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNewPredicateWorkHourᚄ(ctx context.Context, v interface{}) ([]*vo.NewPredicateWorkHour, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.NewPredicateWorkHour, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNNewPredicateWorkHour2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNewPredicateWorkHour(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOneActualWorkHourRecord2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneActualWorkHourRecord(ctx context.Context, sel ast.SelectionSet, v []*vo.OneActualWorkHourRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOneActualWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneActualWorkHourRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOneActualWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneActualWorkHourRecord(ctx context.Context, sel ast.SelectionSet, v *vo.OneActualWorkHourRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OneActualWorkHourRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOOneDateWorkHour2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneDateWorkHourᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.OneDateWorkHour) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOneDateWorkHour2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneDateWorkHour(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOnePersonWorkHourStatisticInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOnePersonWorkHourStatisticInfo(ctx context.Context, sel ast.SelectionSet, v *vo.OnePersonWorkHourStatisticInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OnePersonWorkHourStatisticInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOOneWorkHourRecord2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneWorkHourRecord(ctx context.Context, sel ast.SelectionSet, v []*vo.OneWorkHourRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOneWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneWorkHourRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOneWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOneWorkHourRecord(ctx context.Context, sel ast.SelectionSet, v *vo.OneWorkHourRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OneWorkHourRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationUser2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.OrganizationUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationUser2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermission2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermission2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermissionOperation2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.PermissionOperation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermissionOperation2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPersonalInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v *vo.PersonalInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonalInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOPredictListItem2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPredictListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.PredictListItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPredictListItem2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPredictListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPriority2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Priority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPriority2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProject2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProject2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectDayStat2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectDayStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectDayStat2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOProjectDayStatReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatReq(ctx context.Context, v interface{}) (*vo.ProjectDayStatReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectDayStatReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOProjectDetail2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectDetail2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectType2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectType2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOProjectsReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectsReq(ctx context.Context, v interface{}) (*vo.ProjectsReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectsReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalORecycleBin2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBinᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.RecycleBin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecycleBin2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRecycleBin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORelationIssue2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelationIssue(ctx context.Context, sel ast.SelectionSet, v *vo.RelationIssue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RelationIssue(ctx, sel, v)
}

func (ec *executionContext) marshalOResource2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.Resource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResource2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOResourceInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.ResourceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOResourceInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOResourceInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx context.Context, sel ast.SelectionSet, v *vo.ResourceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOSimpleTagInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSimpleTagInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.SimpleTagInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSimpleTagInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSimpleTagInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSimpleTagInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSimpleTagInfo(ctx context.Context, sel ast.SelectionSet, v *vo.SimpleTagInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SimpleTagInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOStatCommon2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommonᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.StatCommon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatCommon2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStatusTimeInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.StatusTimeInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatusTimeInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatusTimeInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTag2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx context.Context, sel ast.SelectionSet, v *vo.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, v interface{}) (*types.Time, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.Time)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, sel ast.SelectionSet, v *types.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOTrend2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx context.Context, sel ast.SelectionSet, v []*vo.Trend) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTrend2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTrend2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx context.Context, sel ast.SelectionSet, v *vo.Trend) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Trend(ctx, sel, v)
}

func (ec *executionContext) marshalOTrendAuditInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendAuditInfo(ctx context.Context, sel ast.SelectionSet, v *vo.TrendAuditInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrendAuditInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOTrendExtension2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendExtension(ctx context.Context, sel ast.SelectionSet, v *vo.TrendExtension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrendExtension(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTrendReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendReq(ctx context.Context, v interface{}) (*vo.TrendReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTrendReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateFsProjectChatPushSettingsOfTableParam2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateFsProjectChatPushSettingsOfTableParam(ctx context.Context, v interface{}) ([]*vo.UpdateFsProjectChatPushSettingsOfTableParam, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.UpdateFsProjectChatPushSettingsOfTableParam, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOUpdateFsProjectChatPushSettingsOfTableParam2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateFsProjectChatPushSettingsOfTableParam(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUpdateFsProjectChatPushSettingsOfTableParam2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateFsProjectChatPushSettingsOfTableParam(ctx context.Context, v interface{}) (*vo.UpdateFsProjectChatPushSettingsOfTableParam, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateFsProjectChatPushSettingsOfTableParam(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateIssueCustionFieldData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueCustionFieldDataᚄ(ctx context.Context, v interface{}) ([]*vo.UpdateIssueCustionFieldData, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.UpdateIssueCustionFieldData, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNUpdateIssueCustionFieldData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueCustionFieldData(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUpdateIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueWorkHoursReq(ctx context.Context, v interface{}) (*vo.UpdateIssueWorkHoursReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateIssueWorkHoursReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateMultiIssueWorkHoursReq2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateMultiIssueWorkHoursReq(ctx context.Context, v interface{}) (*vo.UpdateMultiIssueWorkHoursReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateMultiIssueWorkHoursReq(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateOneMultiWorkHourRecord2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOneMultiWorkHourRecord(ctx context.Context, v interface{}) ([]*vo.UpdateOneMultiWorkHourRecord, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.UpdateOneMultiWorkHourRecord, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOUpdateOneMultiWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOneMultiWorkHourRecord(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUpdateOneMultiWorkHourRecord2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOneMultiWorkHourRecord(ctx context.Context, v interface{}) (*vo.UpdateOneMultiWorkHourRecord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateOneMultiWorkHourRecord(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserIdInfo2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserIdInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v *vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserIdInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOUserIdInfoExtraForIssueAudit2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoExtraForIssueAuditᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.UserIDInfoExtraForIssueAudit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserIdInfoExtraForIssueAudit2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfoExtraForIssueAudit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserOrganization2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.UserOrganization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserOrganization2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserRoleInfo2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx context.Context, sel ast.SelectionSet, v *vo.UserRoleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserRoleInfo(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalOfsDocumentData2ᚕᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*vo.FsDocumentData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNfsDocumentData2ᚖgiteaᚗbjxᚗcloudᚋallstarᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFsDocumentData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

// endregion ***************************** type.gotpl *****************************
